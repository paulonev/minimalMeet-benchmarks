/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 1227.0, "series": [{"data": [[0.0, 8.0], [0.1, 12.0], [0.2, 13.0], [0.3, 15.0], [0.4, 17.0], [0.5, 18.0], [0.6, 20.0], [0.7, 21.0], [0.8, 23.0], [0.9, 24.0], [1.0, 26.0], [1.1, 27.0], [1.2, 28.0], [1.3, 28.0], [1.4, 29.0], [1.5, 30.0], [1.6, 31.0], [1.7, 32.0], [1.8, 33.0], [1.9, 33.0], [2.0, 34.0], [2.1, 35.0], [2.2, 35.0], [2.3, 36.0], [2.4, 37.0], [2.5, 37.0], [2.6, 38.0], [2.7, 38.0], [2.8, 39.0], [2.9, 40.0], [3.0, 41.0], [3.1, 42.0], [3.2, 43.0], [3.3, 43.0], [3.4, 44.0], [3.5, 44.0], [3.6, 45.0], [3.7, 45.0], [3.8, 46.0], [3.9, 46.0], [4.0, 47.0], [4.1, 48.0], [4.2, 48.0], [4.3, 49.0], [4.4, 50.0], [4.5, 51.0], [4.6, 52.0], [4.7, 54.0], [4.8, 56.0], [4.9, 57.0], [5.0, 60.0], [5.1, 61.0], [5.2, 63.0], [5.3, 65.0], [5.4, 66.0], [5.5, 68.0], [5.6, 69.0], [5.7, 70.0], [5.8, 72.0], [5.9, 72.0], [6.0, 73.0], [6.1, 74.0], [6.2, 74.0], [6.3, 75.0], [6.4, 76.0], [6.5, 76.0], [6.6, 77.0], [6.7, 77.0], [6.8, 78.0], [6.9, 78.0], [7.0, 79.0], [7.1, 79.0], [7.2, 80.0], [7.3, 80.0], [7.4, 81.0], [7.5, 81.0], [7.6, 81.0], [7.7, 82.0], [7.8, 82.0], [7.9, 82.0], [8.0, 83.0], [8.1, 83.0], [8.2, 84.0], [8.3, 85.0], [8.4, 85.0], [8.5, 86.0], [8.6, 87.0], [8.7, 88.0], [8.8, 90.0], [8.9, 92.0], [9.0, 93.0], [9.1, 94.0], [9.2, 95.0], [9.3, 97.0], [9.4, 99.0], [9.5, 101.0], [9.6, 102.0], [9.7, 103.0], [9.8, 104.0], [9.9, 104.0], [10.0, 105.0], [10.1, 105.0], [10.2, 106.0], [10.3, 106.0], [10.4, 106.0], [10.5, 107.0], [10.6, 107.0], [10.7, 108.0], [10.8, 108.0], [10.9, 109.0], [11.0, 109.0], [11.1, 110.0], [11.2, 111.0], [11.3, 111.0], [11.4, 112.0], [11.5, 113.0], [11.6, 114.0], [11.7, 115.0], [11.8, 116.0], [11.9, 117.0], [12.0, 118.0], [12.1, 120.0], [12.2, 122.0], [12.3, 123.0], [12.4, 125.0], [12.5, 126.0], [12.6, 127.0], [12.7, 128.0], [12.8, 128.0], [12.9, 129.0], [13.0, 129.0], [13.1, 130.0], [13.2, 131.0], [13.3, 132.0], [13.4, 132.0], [13.5, 133.0], [13.6, 134.0], [13.7, 134.0], [13.8, 135.0], [13.9, 135.0], [14.0, 135.0], [14.1, 136.0], [14.2, 136.0], [14.3, 137.0], [14.4, 138.0], [14.5, 139.0], [14.6, 140.0], [14.7, 142.0], [14.8, 144.0], [14.9, 145.0], [15.0, 146.0], [15.1, 147.0], [15.2, 148.0], [15.3, 148.0], [15.4, 149.0], [15.5, 149.0], [15.6, 150.0], [15.7, 150.0], [15.8, 151.0], [15.9, 151.0], [16.0, 152.0], [16.1, 152.0], [16.2, 153.0], [16.3, 154.0], [16.4, 154.0], [16.5, 155.0], [16.6, 156.0], [16.7, 156.0], [16.8, 157.0], [16.9, 157.0], [17.0, 158.0], [17.1, 158.0], [17.2, 159.0], [17.3, 159.0], [17.4, 159.0], [17.5, 160.0], [17.6, 160.0], [17.7, 161.0], [17.8, 161.0], [17.9, 161.0], [18.0, 162.0], [18.1, 162.0], [18.2, 163.0], [18.3, 163.0], [18.4, 163.0], [18.5, 164.0], [18.6, 164.0], [18.7, 165.0], [18.8, 165.0], [18.9, 166.0], [19.0, 167.0], [19.1, 167.0], [19.2, 169.0], [19.3, 170.0], [19.4, 172.0], [19.5, 173.0], [19.6, 174.0], [19.7, 175.0], [19.8, 176.0], [19.9, 178.0], [20.0, 179.0], [20.1, 180.0], [20.2, 185.0], [20.3, 188.0], [20.4, 191.0], [20.5, 192.0], [20.6, 193.0], [20.7, 195.0], [20.8, 199.0], [20.9, 203.0], [21.0, 205.0], [21.1, 207.0], [21.2, 208.0], [21.3, 210.0], [21.4, 224.0], [21.5, 227.0], [21.6, 229.0], [21.7, 232.0], [21.8, 234.0], [21.9, 235.0], [22.0, 236.0], [22.1, 237.0], [22.2, 238.0], [22.3, 238.0], [22.4, 239.0], [22.5, 240.0], [22.6, 241.0], [22.7, 242.0], [22.8, 243.0], [22.9, 244.0], [23.0, 245.0], [23.1, 246.0], [23.2, 246.0], [23.3, 247.0], [23.4, 247.0], [23.5, 248.0], [23.6, 249.0], [23.7, 249.0], [23.8, 250.0], [23.9, 250.0], [24.0, 251.0], [24.1, 251.0], [24.2, 251.0], [24.3, 252.0], [24.4, 252.0], [24.5, 253.0], [24.6, 254.0], [24.7, 254.0], [24.8, 255.0], [24.9, 256.0], [25.0, 257.0], [25.1, 258.0], [25.2, 261.0], [25.3, 264.0], [25.4, 265.0], [25.5, 268.0], [25.6, 270.0], [25.7, 274.0], [25.8, 294.0], [25.9, 297.0], [26.0, 298.0], [26.1, 299.0], [26.2, 301.0], [26.3, 302.0], [26.4, 303.0], [26.5, 305.0], [26.6, 308.0], [26.7, 311.0], [26.8, 313.0], [26.9, 315.0], [27.0, 316.0], [27.1, 318.0], [27.2, 322.0], [27.3, 324.0], [27.4, 325.0], [27.5, 326.0], [27.6, 327.0], [27.7, 328.0], [27.8, 328.0], [27.9, 329.0], [28.0, 330.0], [28.1, 330.0], [28.2, 331.0], [28.3, 331.0], [28.4, 331.0], [28.5, 332.0], [28.6, 332.0], [28.7, 333.0], [28.8, 333.0], [28.9, 333.0], [29.0, 333.0], [29.1, 334.0], [29.2, 334.0], [29.3, 334.0], [29.4, 334.0], [29.5, 335.0], [29.6, 335.0], [29.7, 335.0], [29.8, 335.0], [29.9, 336.0], [30.0, 336.0], [30.1, 336.0], [30.2, 336.0], [30.3, 337.0], [30.4, 337.0], [30.5, 337.0], [30.6, 337.0], [30.7, 337.0], [30.8, 338.0], [30.9, 338.0], [31.0, 338.0], [31.1, 338.0], [31.2, 338.0], [31.3, 339.0], [31.4, 339.0], [31.5, 339.0], [31.6, 339.0], [31.7, 340.0], [31.8, 340.0], [31.9, 340.0], [32.0, 340.0], [32.1, 340.0], [32.2, 341.0], [32.3, 341.0], [32.4, 341.0], [32.5, 341.0], [32.6, 342.0], [32.7, 342.0], [32.8, 342.0], [32.9, 342.0], [33.0, 343.0], [33.1, 343.0], [33.2, 343.0], [33.3, 343.0], [33.4, 344.0], [33.5, 344.0], [33.6, 344.0], [33.7, 345.0], [33.8, 345.0], [33.9, 346.0], [34.0, 347.0], [34.1, 348.0], [34.2, 348.0], [34.3, 350.0], [34.4, 351.0], [34.5, 352.0], [34.6, 353.0], [34.7, 354.0], [34.8, 355.0], [34.9, 356.0], [35.0, 356.0], [35.1, 357.0], [35.2, 358.0], [35.3, 359.0], [35.4, 359.0], [35.5, 360.0], [35.6, 360.0], [35.7, 361.0], [35.8, 362.0], [35.9, 366.0], [36.0, 368.0], [36.1, 371.0], [36.2, 378.0], [36.3, 382.0], [36.4, 385.0], [36.5, 387.0], [36.6, 389.0], [36.7, 390.0], [36.8, 391.0], [36.9, 394.0], [37.0, 396.0], [37.1, 398.0], [37.2, 400.0], [37.3, 403.0], [37.4, 405.0], [37.5, 407.0], [37.6, 410.0], [37.7, 413.0], [37.8, 414.0], [37.9, 415.0], [38.0, 416.0], [38.1, 417.0], [38.2, 418.0], [38.3, 419.0], [38.4, 420.0], [38.5, 421.0], [38.6, 421.0], [38.7, 422.0], [38.8, 424.0], [38.9, 425.0], [39.0, 426.0], [39.1, 427.0], [39.2, 429.0], [39.3, 430.0], [39.4, 432.0], [39.5, 433.0], [39.6, 433.0], [39.7, 434.0], [39.8, 434.0], [39.9, 435.0], [40.0, 435.0], [40.1, 435.0], [40.2, 436.0], [40.3, 436.0], [40.4, 436.0], [40.5, 437.0], [40.6, 437.0], [40.7, 437.0], [40.8, 437.0], [40.9, 437.0], [41.0, 438.0], [41.1, 438.0], [41.2, 438.0], [41.3, 438.0], [41.4, 438.0], [41.5, 438.0], [41.6, 439.0], [41.7, 439.0], [41.8, 439.0], [41.9, 439.0], [42.0, 439.0], [42.1, 439.0], [42.2, 439.0], [42.3, 440.0], [42.4, 440.0], [42.5, 440.0], [42.6, 440.0], [42.7, 440.0], [42.8, 440.0], [42.9, 440.0], [43.0, 440.0], [43.1, 441.0], [43.2, 441.0], [43.3, 441.0], [43.4, 441.0], [43.5, 441.0], [43.6, 441.0], [43.7, 441.0], [43.8, 441.0], [43.9, 442.0], [44.0, 442.0], [44.1, 442.0], [44.2, 442.0], [44.3, 442.0], [44.4, 442.0], [44.5, 442.0], [44.6, 443.0], [44.7, 443.0], [44.8, 443.0], [44.9, 443.0], [45.0, 443.0], [45.1, 443.0], [45.2, 443.0], [45.3, 444.0], [45.4, 444.0], [45.5, 444.0], [45.6, 444.0], [45.7, 444.0], [45.8, 445.0], [45.9, 445.0], [46.0, 445.0], [46.1, 445.0], [46.2, 445.0], [46.3, 446.0], [46.4, 446.0], [46.5, 446.0], [46.6, 446.0], [46.7, 447.0], [46.8, 447.0], [46.9, 447.0], [47.0, 447.0], [47.1, 448.0], [47.2, 448.0], [47.3, 448.0], [47.4, 449.0], [47.5, 449.0], [47.6, 449.0], [47.7, 450.0], [47.8, 450.0], [47.9, 451.0], [48.0, 451.0], [48.1, 452.0], [48.2, 452.0], [48.3, 453.0], [48.4, 454.0], [48.5, 455.0], [48.6, 456.0], [48.7, 457.0], [48.8, 458.0], [48.9, 459.0], [49.0, 460.0], [49.1, 461.0], [49.2, 462.0], [49.3, 463.0], [49.4, 464.0], [49.5, 464.0], [49.6, 465.0], [49.7, 465.0], [49.8, 466.0], [49.9, 466.0], [50.0, 467.0], [50.1, 468.0], [50.2, 468.0], [50.3, 469.0], [50.4, 470.0], [50.5, 470.0], [50.6, 471.0], [50.7, 472.0], [50.8, 473.0], [50.9, 474.0], [51.0, 475.0], [51.1, 476.0], [51.2, 476.0], [51.3, 477.0], [51.4, 478.0], [51.5, 478.0], [51.6, 478.0], [51.7, 479.0], [51.8, 479.0], [51.9, 480.0], [52.0, 480.0], [52.1, 481.0], [52.2, 481.0], [52.3, 482.0], [52.4, 482.0], [52.5, 483.0], [52.6, 483.0], [52.7, 484.0], [52.8, 485.0], [52.9, 486.0], [53.0, 486.0], [53.1, 487.0], [53.2, 488.0], [53.3, 488.0], [53.4, 489.0], [53.5, 490.0], [53.6, 491.0], [53.7, 491.0], [53.8, 492.0], [53.9, 493.0], [54.0, 495.0], [54.1, 498.0], [54.2, 500.0], [54.3, 501.0], [54.4, 502.0], [54.5, 503.0], [54.6, 504.0], [54.7, 504.0], [54.8, 505.0], [54.9, 506.0], [55.0, 507.0], [55.1, 508.0], [55.2, 509.0], [55.3, 510.0], [55.4, 511.0], [55.5, 512.0], [55.6, 512.0], [55.7, 513.0], [55.8, 513.0], [55.9, 514.0], [56.0, 515.0], [56.1, 515.0], [56.2, 516.0], [56.3, 517.0], [56.4, 518.0], [56.5, 518.0], [56.6, 519.0], [56.7, 520.0], [56.8, 521.0], [56.9, 522.0], [57.0, 522.0], [57.1, 524.0], [57.2, 525.0], [57.3, 526.0], [57.4, 526.0], [57.5, 527.0], [57.6, 527.0], [57.7, 528.0], [57.8, 528.0], [57.9, 528.0], [58.0, 529.0], [58.1, 529.0], [58.2, 529.0], [58.3, 529.0], [58.4, 530.0], [58.5, 530.0], [58.6, 530.0], [58.7, 530.0], [58.8, 530.0], [58.9, 530.0], [59.0, 531.0], [59.1, 531.0], [59.2, 531.0], [59.3, 531.0], [59.4, 531.0], [59.5, 531.0], [59.6, 531.0], [59.7, 532.0], [59.8, 532.0], [59.9, 532.0], [60.0, 532.0], [60.1, 532.0], [60.2, 532.0], [60.3, 532.0], [60.4, 532.0], [60.5, 533.0], [60.6, 533.0], [60.7, 533.0], [60.8, 533.0], [60.9, 533.0], [61.0, 533.0], [61.1, 533.0], [61.2, 533.0], [61.3, 533.0], [61.4, 533.0], [61.5, 534.0], [61.6, 534.0], [61.7, 534.0], [61.8, 534.0], [61.9, 534.0], [62.0, 534.0], [62.1, 534.0], [62.2, 534.0], [62.3, 534.0], [62.4, 535.0], [62.5, 535.0], [62.6, 535.0], [62.7, 535.0], [62.8, 535.0], [62.9, 535.0], [63.0, 535.0], [63.1, 535.0], [63.2, 535.0], [63.3, 535.0], [63.4, 536.0], [63.5, 536.0], [63.6, 536.0], [63.7, 536.0], [63.8, 536.0], [63.9, 536.0], [64.0, 536.0], [64.1, 536.0], [64.2, 536.0], [64.3, 536.0], [64.4, 536.0], [64.5, 537.0], [64.6, 537.0], [64.7, 537.0], [64.8, 537.0], [64.9, 537.0], [65.0, 537.0], [65.1, 537.0], [65.2, 537.0], [65.3, 537.0], [65.4, 537.0], [65.5, 537.0], [65.6, 538.0], [65.7, 538.0], [65.8, 538.0], [65.9, 538.0], [66.0, 538.0], [66.1, 538.0], [66.2, 538.0], [66.3, 538.0], [66.4, 538.0], [66.5, 538.0], [66.6, 538.0], [66.7, 539.0], [66.8, 539.0], [66.9, 539.0], [67.0, 539.0], [67.1, 539.0], [67.2, 539.0], [67.3, 539.0], [67.4, 539.0], [67.5, 539.0], [67.6, 540.0], [67.7, 540.0], [67.8, 540.0], [67.9, 540.0], [68.0, 540.0], [68.1, 540.0], [68.2, 540.0], [68.3, 540.0], [68.4, 540.0], [68.5, 541.0], [68.6, 541.0], [68.7, 541.0], [68.8, 541.0], [68.9, 541.0], [69.0, 541.0], [69.1, 541.0], [69.2, 541.0], [69.3, 542.0], [69.4, 542.0], [69.5, 542.0], [69.6, 542.0], [69.7, 542.0], [69.8, 542.0], [69.9, 542.0], [70.0, 543.0], [70.1, 543.0], [70.2, 543.0], [70.3, 543.0], [70.4, 543.0], [70.5, 543.0], [70.6, 543.0], [70.7, 544.0], [70.8, 544.0], [70.9, 544.0], [71.0, 544.0], [71.1, 544.0], [71.2, 544.0], [71.3, 544.0], [71.4, 545.0], [71.5, 545.0], [71.6, 545.0], [71.7, 545.0], [71.8, 545.0], [71.9, 545.0], [72.0, 545.0], [72.1, 546.0], [72.2, 546.0], [72.3, 546.0], [72.4, 546.0], [72.5, 546.0], [72.6, 546.0], [72.7, 546.0], [72.8, 547.0], [72.9, 547.0], [73.0, 547.0], [73.1, 547.0], [73.2, 547.0], [73.3, 547.0], [73.4, 547.0], [73.5, 548.0], [73.6, 548.0], [73.7, 548.0], [73.8, 548.0], [73.9, 548.0], [74.0, 548.0], [74.1, 549.0], [74.2, 549.0], [74.3, 549.0], [74.4, 549.0], [74.5, 549.0], [74.6, 549.0], [74.7, 550.0], [74.8, 550.0], [74.9, 550.0], [75.0, 550.0], [75.1, 550.0], [75.2, 551.0], [75.3, 551.0], [75.4, 551.0], [75.5, 551.0], [75.6, 551.0], [75.7, 551.0], [75.8, 552.0], [75.9, 552.0], [76.0, 552.0], [76.1, 552.0], [76.2, 552.0], [76.3, 553.0], [76.4, 553.0], [76.5, 553.0], [76.6, 553.0], [76.7, 553.0], [76.8, 554.0], [76.9, 554.0], [77.0, 554.0], [77.1, 554.0], [77.2, 554.0], [77.3, 555.0], [77.4, 555.0], [77.5, 555.0], [77.6, 555.0], [77.7, 555.0], [77.8, 556.0], [77.9, 556.0], [78.0, 556.0], [78.1, 556.0], [78.2, 556.0], [78.3, 557.0], [78.4, 557.0], [78.5, 557.0], [78.6, 557.0], [78.7, 558.0], [78.8, 558.0], [78.9, 558.0], [79.0, 558.0], [79.1, 558.0], [79.2, 559.0], [79.3, 559.0], [79.4, 559.0], [79.5, 560.0], [79.6, 560.0], [79.7, 560.0], [79.8, 560.0], [79.9, 561.0], [80.0, 561.0], [80.1, 561.0], [80.2, 562.0], [80.3, 562.0], [80.4, 562.0], [80.5, 563.0], [80.6, 563.0], [80.7, 563.0], [80.8, 564.0], [80.9, 564.0], [81.0, 564.0], [81.1, 565.0], [81.2, 565.0], [81.3, 565.0], [81.4, 566.0], [81.5, 566.0], [81.6, 566.0], [81.7, 567.0], [81.8, 567.0], [81.9, 567.0], [82.0, 568.0], [82.1, 568.0], [82.2, 569.0], [82.3, 569.0], [82.4, 570.0], [82.5, 570.0], [82.6, 570.0], [82.7, 571.0], [82.8, 571.0], [82.9, 571.0], [83.0, 572.0], [83.1, 572.0], [83.2, 572.0], [83.3, 573.0], [83.4, 573.0], [83.5, 574.0], [83.6, 574.0], [83.7, 574.0], [83.8, 574.0], [83.9, 575.0], [84.0, 575.0], [84.1, 575.0], [84.2, 576.0], [84.3, 576.0], [84.4, 576.0], [84.5, 577.0], [84.6, 577.0], [84.7, 577.0], [84.8, 578.0], [84.9, 578.0], [85.0, 579.0], [85.1, 579.0], [85.2, 580.0], [85.3, 580.0], [85.4, 581.0], [85.5, 581.0], [85.6, 581.0], [85.7, 582.0], [85.8, 582.0], [85.9, 583.0], [86.0, 583.0], [86.1, 584.0], [86.2, 585.0], [86.3, 585.0], [86.4, 586.0], [86.5, 586.0], [86.6, 587.0], [86.7, 588.0], [86.8, 588.0], [86.9, 590.0], [87.0, 590.0], [87.1, 591.0], [87.2, 592.0], [87.3, 593.0], [87.4, 593.0], [87.5, 594.0], [87.6, 595.0], [87.7, 595.0], [87.8, 596.0], [87.9, 597.0], [88.0, 597.0], [88.1, 598.0], [88.2, 598.0], [88.3, 599.0], [88.4, 599.0], [88.5, 600.0], [88.6, 600.0], [88.7, 601.0], [88.8, 602.0], [88.9, 602.0], [89.0, 603.0], [89.1, 604.0], [89.2, 604.0], [89.3, 605.0], [89.4, 606.0], [89.5, 607.0], [89.6, 607.0], [89.7, 608.0], [89.8, 610.0], [89.9, 611.0], [90.0, 612.0], [90.1, 613.0], [90.2, 613.0], [90.3, 614.0], [90.4, 615.0], [90.5, 616.0], [90.6, 617.0], [90.7, 618.0], [90.8, 619.0], [90.9, 620.0], [91.0, 621.0], [91.1, 622.0], [91.2, 622.0], [91.3, 623.0], [91.4, 625.0], [91.5, 626.0], [91.6, 628.0], [91.7, 629.0], [91.8, 630.0], [91.9, 631.0], [92.0, 633.0], [92.1, 635.0], [92.2, 637.0], [92.3, 642.0], [92.4, 646.0], [92.5, 649.0], [92.6, 651.0], [92.7, 654.0], [92.8, 658.0], [92.9, 661.0], [93.0, 665.0], [93.1, 673.0], [93.2, 681.0], [93.3, 686.0], [93.4, 690.0], [93.5, 695.0], [93.6, 709.0], [93.7, 714.0], [93.8, 717.0], [93.9, 720.0], [94.0, 724.0], [94.1, 741.0], [94.2, 747.0], [94.3, 749.0], [94.4, 751.0], [94.5, 755.0], [94.6, 759.0], [94.7, 773.0], [94.8, 777.0], [94.9, 781.0], [95.0, 783.0], [95.1, 785.0], [95.2, 787.0], [95.3, 790.0], [95.4, 794.0], [95.5, 798.0], [95.6, 807.0], [95.7, 817.0], [95.8, 822.0], [95.9, 826.0], [96.0, 828.0], [96.1, 830.0], [96.2, 832.0], [96.3, 835.0], [96.4, 839.0], [96.5, 843.0], [96.6, 846.0], [96.7, 850.0], [96.8, 853.0], [96.9, 859.0], [97.0, 869.0], [97.1, 873.0], [97.2, 877.0], [97.3, 879.0], [97.4, 881.0], [97.5, 889.0], [97.6, 907.0], [97.7, 915.0], [97.8, 919.0], [97.9, 922.0], [98.0, 929.0], [98.1, 938.0], [98.2, 948.0], [98.3, 953.0], [98.4, 957.0], [98.5, 963.0], [98.6, 968.0], [98.7, 984.0], [98.8, 990.0], [98.9, 994.0], [99.0, 1008.0], [99.1, 1022.0], [99.2, 1026.0], [99.3, 1031.0], [99.4, 1044.0], [99.5, 1090.0], [99.6, 1117.0], [99.7, 1151.0], [99.8, 1166.0], [99.9, 1192.0], [100.0, 1227.0]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "maxY": 18206.0, "series": [{"data": [[0.0, 5019.0], [600.0, 2727.0], [700.0, 1043.0], [200.0, 2812.0], [800.0, 1084.0], [900.0, 736.0], [1000.0, 321.0], [1100.0, 202.0], [300.0, 5879.0], [1200.0, 33.0], [100.0, 6043.0], [400.0, 9051.0], [500.0, 18206.0]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 24305.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 28851.0, "series": [{"data": [[0.0, 28851.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 24305.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 45.23739332816144, "minX": 1.69858716E12, "maxY": 500.0, "series": [{"data": [[1.69858722E12, 331.35540540540563], [1.6985872E12, 500.0], [1.698587195E12, 500.0], [1.698587175E12, 285.51142401700264], [1.698587215E12, 500.0], [1.69858719E12, 499.95109980003616], [1.69858717E12, 200.2592875318061], [1.69858721E12, 500.0], [1.698587185E12, 459.5701688082644], [1.698587165E12, 122.28694261147771], [1.698587205E12, 500.0], [1.69858718E12, 374.3691959229892], [1.69858716E12, 45.23739332816144]], "isOverall": false, "label": "MinimalMeet-express", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858722E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.837837837837839, "minX": 2.0, "maxY": 967.8260869565216, "series": [{"data": [[2.0, 380.5], [4.0, 25.900000000000002], [5.0, 54.333333333333336], [6.0, 14.0], [7.0, 35.42424242424243], [8.0, 12.837837837837839], [9.0, 14.774193548387096], [10.0, 40.95555555555555], [11.0, 37.11538461538461], [12.0, 17.975], [13.0, 37.63414634146341], [14.0, 28.02325581395349], [15.0, 27.866666666666667], [16.0, 23.641025641025646], [17.0, 23.92857142857143], [18.0, 54.02439024390243], [19.0, 28.550000000000004], [20.0, 24.627450980392158], [21.0, 65.69444444444446], [22.0, 39.547619047619044], [23.0, 29.999999999999993], [24.0, 27.058823529411768], [25.0, 30.591836734693878], [26.0, 53.73770491803279], [27.0, 29.5625], [28.0, 31.884615384615387], [29.0, 39.03636363636363], [30.0, 58.42], [31.0, 52.36666666666668], [32.0, 50.10909090909092], [33.0, 34.96000000000001], [34.0, 58.19999999999999], [35.0, 48.22222222222222], [36.0, 37.54385964912281], [37.0, 39.357142857142854], [38.0, 53.50000000000001], [39.0, 37.71666666666667], [40.0, 38.09523809523809], [41.0, 74.23076923076923], [42.0, 58.69841269841269], [43.0, 41.25423728813559], [44.0, 44.535714285714306], [45.0, 50.983870967741936], [46.0, 62.24615384615385], [47.0, 45.73015873015874], [48.0, 44.349206349206355], [49.0, 63.18749999999999], [50.0, 49.93333333333333], [51.0, 44.69696969696969], [52.0, 66.15151515151516], [53.0, 47.89999999999999], [54.0, 60.28787878787881], [55.0, 49.98333333333332], [56.0, 53.48437499999999], [57.0, 75.70491803278689], [58.0, 56.739999999999995], [59.0, 79.3137254901961], [60.0, 86.47272727272727], [61.0, 65.73333333333332], [62.0, 100.41666666666669], [63.0, 84.8181818181818], [64.0, 89.49122807017544], [65.0, 83.29032258064517], [66.0, 61.4923076923077], [67.0, 69.11764705882351], [68.0, 84.95588235294116], [69.0, 62.828571428571415], [70.0, 108.06666666666665], [71.0, 103.27659574468083], [72.0, 81.93442622950816], [73.0, 104.23214285714285], [74.0, 72.93548387096774], [75.0, 74.30000000000001], [76.0, 90.30645161290323], [77.0, 82.3214285714286], [78.0, 79.25862068965517], [79.0, 79.64999999999998], [80.0, 87.63636363636364], [81.0, 102.43478260869563], [82.0, 75.43750000000003], [83.0, 72.8529411764706], [84.0, 91.05882352941175], [85.0, 81.51666666666665], [86.0, 80.98529411764706], [87.0, 77.28571428571429], [88.0, 88.23214285714285], [89.0, 121.57692307692308], [90.0, 107.00000000000004], [91.0, 104.98437499999996], [92.0, 89.1212121212121], [93.0, 83.53846153846153], [94.0, 83.22857142857139], [95.0, 95.47222222222221], [96.0, 80.35135135135134], [97.0, 103.20930232558135], [99.0, 179.16363636363639], [98.0, 449.0], [100.0, 165.08333333333331], [101.0, 98.54385964912281], [102.0, 107.8135593220339], [103.0, 103.04918032786885], [104.0, 112.86486486486486], [105.0, 93.15000000000003], [106.0, 98.73437500000001], [107.0, 103.19672131147541], [108.0, 125.89230769230768], [109.0, 106.10169491525424], [110.0, 105.29230769230769], [111.0, 104.77966101694912], [112.0, 131.44262295081973], [113.0, 114.45454545454544], [114.0, 110.31666666666666], [115.0, 107.23333333333333], [116.0, 129.3], [117.0, 108.20000000000002], [118.0, 116.3220338983051], [119.0, 116.91525423728815], [120.0, 126.38157894736841], [121.0, 107.98360655737703], [122.0, 111.16417910447761], [123.0, 113.01724137931036], [124.0, 140.04838709677418], [125.0, 126.40677966101694], [126.0, 129.34000000000006], [127.0, 134.28125000000003], [128.0, 148.41791044776116], [129.0, 120.24561403508773], [130.0, 126.7090909090909], [131.0, 139.92063492063488], [132.0, 148.6031746031746], [133.0, 129.52380952380958], [134.0, 125.26470588235293], [135.0, 128.5], [136.0, 146.8666666666667], [137.0, 134.89062500000006], [138.0, 134.53571428571433], [139.0, 140.6956521739131], [140.0, 180.21818181818182], [141.0, 163.52727272727262], [142.0, 158.9803921568627], [143.0, 176.3396226415095], [144.0, 168.8571428571429], [145.0, 161.8301886792453], [146.0, 166.3148148148148], [147.0, 173.31034482758622], [148.0, 167.47368421052636], [149.0, 166.25454545454542], [150.0, 164.18000000000004], [151.0, 175.42253521126761], [152.0, 162.41304347826093], [153.0, 163.05000000000007], [154.0, 147.77631578947367], [155.0, 146.21250000000006], [156.0, 129.27586206896552], [157.0, 130.8082191780822], [158.0, 144.56716417910454], [159.0, 143.77777777777777], [160.0, 136.36619718309854], [161.0, 138.3432835820895], [162.0, 141.578125], [163.0, 167.45454545454538], [164.0, 157.48837209302326], [165.0, 177.46551724137933], [166.0, 178.53448275862067], [167.0, 210.39215686274505], [168.0, 190.97959183673473], [169.0, 191.79032258064515], [170.0, 179.63934426229508], [171.0, 177.69014084507043], [172.0, 157.8533333333334], [173.0, 148.21428571428572], [174.0, 154.72463768115938], [175.0, 150.95945945945942], [176.0, 151.969696969697], [177.0, 151.28787878787873], [178.0, 153.08108108108107], [179.0, 166.41095890410963], [180.0, 148.61333333333332], [181.0, 150.94029850746267], [182.0, 163.5416666666667], [183.0, 158.90322580645164], [184.0, 164.4328358208955], [185.0, 168.9090909090909], [186.0, 173.33333333333334], [187.0, 194.60869565217385], [188.0, 178.09722222222217], [189.0, 169.15942028985503], [190.0, 160.68000000000004], [191.0, 163.72857142857143], [192.0, 161.78666666666672], [193.0, 159.13888888888894], [194.0, 164.41428571428574], [195.0, 187.609756097561], [196.0, 196.59574468085106], [197.0, 238.29999999999995], [198.0, 265.7600000000001], [199.0, 282.3571428571429], [200.0, 318.1162790697673], [201.0, 346.2222222222222], [202.0, 373.62962962962956], [203.0, 406.95833333333326], [204.0, 409.38888888888886], [205.0, 437.0416666666667], [206.0, 482.7692307692307], [207.0, 494.6296296296296], [208.0, 510.87499999999994], [209.0, 552.0869565217391], [210.0, 566.2916666666667], [211.0, 555.4375], [212.0, 535.7500000000001], [213.0, 566.9599999999999], [214.0, 557.5], [215.0, 551.7916666666667], [216.0, 562.6486486486486], [217.0, 482.57142857142856], [218.0, 384.3076923076924], [219.0, 287.9365079365079], [220.0, 224.78947368421055], [221.0, 206.94285714285715], [222.0, 202.17647058823522], [223.0, 194.0], [224.0, 262.6470588235294], [225.0, 269.5882352941176], [226.0, 270.31818181818187], [227.0, 244.72058823529412], [228.0, 199.85507246376812], [229.0, 218.2], [230.0, 215.34090909090898], [231.0, 230.31372549019608], [232.0, 263.40000000000003], [233.0, 325.075], [234.0, 322.1071428571428], [235.0, 362.52], [236.0, 384.6071428571429], [237.0, 428.2], [238.0, 441.688888888889], [239.0, 465.49999999999994], [240.0, 466.4186046511627], [241.0, 455.21874999999994], [242.0, 498.695652173913], [243.0, 458.08333333333326], [244.0, 460.7142857142857], [245.0, 462.46666666666675], [246.0, 473.7499999999999], [247.0, 474.125], [248.0, 483.4642857142858], [249.0, 499.24999999999994], [250.0, 546.8235294117648], [251.0, 526.8666666666664], [252.0, 495.8970588235297], [253.0, 432.4705882352942], [254.0, 347.6206896551724], [255.0, 256.2698412698412], [257.0, 249.89041095890397], [256.0, 238.61764705882348], [258.0, 231.6865671641791], [259.0, 233.15000000000003], [260.0, 239.8153846153846], [261.0, 245.48484848484847], [262.0, 248.79629629629625], [263.0, 255.80303030303037], [264.0, 255.15873015873015], [270.0, 245.3529411764706], [271.0, 244.76923076923075], [268.0, 236.73134328358205], [269.0, 257.2537313432837], [265.0, 263.8787878787879], [266.0, 249.61111111111111], [267.0, 238.41538461538457], [273.0, 257.6142857142857], [272.0, 245.90624999999994], [274.0, 248.43076923076924], [275.0, 248.41269841269843], [276.0, 251.79104477611938], [277.0, 265.25373134328356], [278.0, 255.50000000000006], [279.0, 250.00000000000003], [280.0, 247.4788732394366], [286.0, 360.7777777777778], [287.0, 400.96], [284.0, 278.1562499999999], [285.0, 327.03225806451604], [281.0, 262.44262295081967], [282.0, 254.65714285714287], [283.0, 255.79687499999997], [289.0, 472.695652173913], [288.0, 434.59999999999997], [290.0, 512.7368421052631], [291.0, 561.0], [292.0, 612.0833333333334], [293.0, 620.0], [294.0, 684.2], [295.0, 720.8076923076922], [296.0, 786.2105263157895], [302.0, 814.7222222222222], [303.0, 782.6], [300.0, 842.7187499999999], [301.0, 801.8787878787876], [297.0, 801.4999999999999], [298.0, 776.4285714285714], [299.0, 867.1111111111112], [305.0, 772.7674418604652], [304.0, 805.2307692307692], [306.0, 710.3421052631578], [307.0, 661.7708333333335], [308.0, 611.2352941176471], [309.0, 573.0], [310.0, 541.911111111111], [311.0, 485.7659574468085], [312.0, 453.91176470588226], [318.0, 515.9180327868853], [319.0, 510.04081632653066], [316.0, 506.8333333333333], [317.0, 514.48], [313.0, 444.8333333333333], [314.0, 474.3157894736842], [315.0, 487.1599999999999], [321.0, 539.655172413793], [320.0, 527.6], [322.0, 552.4705882352943], [323.0, 494.60655737704906], [324.0, 479.609756097561], [325.0, 431.8939393939394], [326.0, 417.7761194029849], [327.0, 350.0147058823529], [328.0, 325.98550724637687], [334.0, 426.05555555555554], [335.0, 471.29629629629625], [332.0, 377.27777777777777], [333.0, 416.1428571428572], [329.0, 337.6571428571429], [330.0, 328.4339622641509], [331.0, 345.70689655172424], [337.0, 540.4999999999999], [336.0, 492.81249999999994], [338.0, 523.0749999999998], [339.0, 530.2500000000001], [340.0, 501.1692307692309], [341.0, 440.8], [342.0, 381.77941176470574], [343.0, 331.2112676056337], [344.0, 303.09859154929563], [350.0, 312.46666666666664], [351.0, 320.0677966101695], [348.0, 306.91044776119395], [349.0, 303.1176470588236], [345.0, 298.97142857142853], [346.0, 303.2187499999999], [347.0, 305.9726027397261], [353.0, 333.11764705882354], [352.0, 335.5081967213115], [354.0, 333.7727272727273], [355.0, 334.61904761904765], [356.0, 340.2676056338029], [357.0, 333.7818181818182], [358.0, 337.79032258064524], [359.0, 337.86363636363654], [360.0, 340.87142857142857], [366.0, 347.34782608695656], [367.0, 336.2272727272728], [364.0, 344.22857142857146], [365.0, 342.32203389830494], [361.0, 351.83333333333337], [362.0, 359.83783783783787], [363.0, 348.2424242424242], [369.0, 335.6164383561644], [368.0, 334.3432835820895], [370.0, 335.58333333333337], [371.0, 328.8], [372.0, 339.98412698412704], [373.0, 332.76811594202894], [374.0, 333.3809523809524], [375.0, 342.7761194029851], [376.0, 340.9999999999999], [382.0, 333.8360655737705], [383.0, 336.15151515151535], [380.0, 337.8636363636363], [381.0, 334.7808219178083], [377.0, 341.0333333333334], [378.0, 337.9714285714285], [379.0, 344.972972972973], [385.0, 338.9411764705884], [384.0, 344.6521739130433], [386.0, 336.77027027027015], [387.0, 349.52941176470586], [388.0, 343.2352941176471], [389.0, 341.1029411764705], [390.0, 341.24615384615396], [391.0, 343.6527777777779], [392.0, 350.29166666666663], [398.0, 342.67142857142846], [399.0, 345.2162162162163], [396.0, 342.9014084507042], [397.0, 343.4242424242425], [393.0, 340.8428571428572], [394.0, 339.17391304347825], [395.0, 344.4925373134328], [401.0, 341.43835616438344], [400.0, 354.7837837837838], [402.0, 337.98648648648646], [403.0, 336.58064516129025], [404.0, 342.1818181818181], [405.0, 345.7017543859649], [406.0, 348.98437499999994], [407.0, 358.75], [408.0, 365.7272727272727], [414.0, 359.6818181818181], [415.0, 365.49206349206344], [412.0, 359.55714285714294], [413.0, 356.77142857142866], [409.0, 361.35294117647055], [410.0, 360.49206349206344], [411.0, 361.2957746478873], [417.0, 432.9545454545454], [416.0, 369.0625000000001], [418.0, 446.33333333333337], [419.0, 478.2340425531915], [420.0, 505.5384615384615], [421.0, 551.2222222222223], [422.0, 559.8412698412699], [423.0, 564.1162790697676], [424.0, 603.1923076923076], [430.0, 750.4545454545455], [431.0, 750.3333333333331], [428.0, 722.9259259259259], [429.0, 751.6250000000002], [425.0, 661.2413793103449], [426.0, 646.125], [427.0, 696.6097560975611], [433.0, 764.3793103448276], [432.0, 781.7857142857143], [434.0, 793.5555555555554], [435.0, 747.7000000000002], [436.0, 842.0882352941177], [437.0, 837.4736842105262], [438.0, 924.5652173913043], [439.0, 967.8260869565216], [440.0, 966.923076923077], [446.0, 631.0140845070422], [447.0, 509.98630136986293], [444.0, 828.0266666666665], [445.0, 718.8358208955223], [441.0, 912.029411764706], [442.0, 951.7166666666667], [443.0, 912.0877192982456], [449.0, 392.53030303030323], [448.0, 412.6250000000001], [450.0, 386.9999999999999], [451.0, 395.28985507246387], [452.0, 392.5882352941177], [453.0, 398.38333333333344], [454.0, 411.8082191780823], [455.0, 407.2388059701493], [456.0, 416.67213114754094], [462.0, 428.70588235294116], [463.0, 451.4210526315789], [460.0, 416.39393939393943], [461.0, 415.2647058823529], [457.0, 418.4], [458.0, 419.9687500000001], [459.0, 422.97058823529414], [465.0, 520.2857142857143], [464.0, 493.08], [466.0, 565.4444444444443], [467.0, 608.681818181818], [468.0, 658.8518518518518], [469.0, 674.9565217391306], [470.0, 721.7058823529412], [471.0, 756.4999999999999], [472.0, 780.1874999999999], [478.0, 663.544117647059], [479.0, 592.9487179487178], [476.0, 850.0499999999998], [477.0, 781.7101449275364], [473.0, 825.9999999999999], [474.0, 823.5781250000001], [475.0, 827.7457627118642], [481.0, 594.1884057971015], [480.0, 589.4444444444445], [482.0, 535.0882352941178], [483.0, 521.7428571428574], [484.0, 517.4714285714288], [485.0, 508.1518987341773], [486.0, 506.0307692307692], [487.0, 503.4852941176471], [488.0, 424.7], [494.0, 468.6891891891892], [495.0, 468.40000000000015], [492.0, 443.2631578947368], [493.0, 460.82142857142856], [489.0, 435.97142857142865], [490.0, 431.4218750000001], [491.0, 432.83582089552243], [496.0, 469.0158730158731], [497.0, 475.1506849315068], [498.0, 475.7631578947367], [499.0, 476.5974025974026], [500.0, 563.8282107161605]], "isOverall": false, "label": "POST /meetings", "isController": false}, {"data": [[376.1390623824234, 425.9556400030087]], "isOverall": false, "label": "POST /meetings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 26196.0, "minX": 1.69858716E12, "maxY": 326759.4, "series": [{"data": [[1.69858722E12, 26196.0], [1.6985872E12, 166309.2], [1.698587195E12, 116501.4], [1.698587175E12, 133245.6], [1.698587215E12, 154450.2], [1.69858719E12, 194735.4], [1.69858717E12, 138896.0], [1.69858721E12, 161211.6], [1.698587185E12, 140502.6], [1.698587165E12, 176035.2], [1.698587205E12, 147972.0], [1.69858718E12, 187549.2], [1.69858716E12, 135897.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69858722E12, 43956.0], [1.6985872E12, 279061.2], [1.698587195E12, 195485.4], [1.698587175E12, 223581.6], [1.698587215E12, 259162.2], [1.69858719E12, 326759.4], [1.69858717E12, 233442.0], [1.69858721E12, 270507.6], [1.698587185E12, 235758.6], [1.698587165E12, 297059.4], [1.698587205E12, 248292.0], [1.69858718E12, 314701.2], [1.69858716E12, 229699.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858722E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 48.972329971554174, "minX": 1.69858716E12, "maxY": 751.9568520206616, "series": [{"data": [[1.69858722E12, 495.48918918918906], [1.6985872E12, 536.0881226053642], [1.698587195E12, 751.9568520206616], [1.698587175E12, 383.28241232731136], [1.698587215E12, 573.6346550538613], [1.69858719E12, 451.93546627885786], [1.69858717E12, 249.3905852417304], [1.69858721E12, 549.103645147123], [1.698587185E12, 563.0826404635924], [1.698587165E12, 120.00399920016005], [1.698587205E12, 597.7629186602859], [1.69858718E12, 348.60343525858934], [1.69858716E12, 48.972329971554174]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858722E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 48.96896819239714, "minX": 1.69858716E12, "maxY": 751.9568520206616, "series": [{"data": [[1.69858722E12, 495.48918918918906], [1.6985872E12, 536.0879097488305], [1.698587195E12, 751.9568520206616], [1.698587175E12, 383.28134962805535], [1.698587215E12, 573.6341966536771], [1.69858719E12, 451.93528449372883], [1.69858717E12, 249.3905852417304], [1.69858721E12, 549.1034255599476], [1.698587185E12, 563.0823885109601], [1.698587165E12, 120.0029994001199], [1.698587205E12, 597.7629186602859], [1.69858718E12, 348.60324650811623], [1.69858716E12, 48.96896819239714]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858722E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.8489996224990551, "minX": 1.69858716E12, "maxY": 1.057312252964424, "series": [{"data": [[1.69858722E12, 0.995945945945946], [1.6985872E12, 1.00681140911026], [1.698587195E12, 0.984807049529018], [1.698587175E12, 0.8886822529224244], [1.698587215E12, 1.0284208113683262], [1.69858719E12, 0.8694782766769661], [1.69858717E12, 0.8643765903307888], [1.69858721E12, 1.057312252964424], [1.698587185E12, 0.8964474678760409], [1.698587165E12, 0.9288142371525698], [1.698587205E12, 1.035167464114832], [1.69858718E12, 0.8489996224990551], [1.69858716E12, 1.0183604861649862]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858722E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.69858716E12, "maxY": 1227.0, "series": [{"data": [[1.69858722E12, 547.0], [1.6985872E12, 753.0], [1.698587195E12, 1227.0], [1.698587175E12, 873.0], [1.698587215E12, 652.0], [1.69858719E12, 500.0], [1.69858717E12, 598.0], [1.69858721E12, 602.0], [1.698587185E12, 991.0], [1.698587165E12, 184.0], [1.698587205E12, 947.0], [1.69858718E12, 546.0], [1.69858716E12, 120.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69858722E12, 379.0], [1.6985872E12, 431.0], [1.698587195E12, 495.0], [1.698587175E12, 223.0], [1.698587215E12, 522.0], [1.69858719E12, 431.0], [1.69858717E12, 140.0], [1.69858721E12, 521.0], [1.698587185E12, 355.0], [1.698587165E12, 69.0], [1.698587205E12, 500.0], [1.69858718E12, 294.0], [1.69858716E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69858722E12, 534.0], [1.6985872E12, 576.0], [1.698587195E12, 1038.0], [1.698587175E12, 647.0], [1.698587215E12, 623.0], [1.69858719E12, 482.0], [1.69858717E12, 475.0], [1.69858721E12, 579.0], [1.698587185E12, 842.0], [1.698587165E12, 162.0], [1.698587205E12, 782.0], [1.69858718E12, 362.0], [1.69858716E12, 80.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69858722E12, 541.59], [1.6985872E12, 668.0], [1.698587195E12, 1200.08], [1.698587175E12, 857.3999999999996], [1.698587215E12, 640.0], [1.69858719E12, 492.0], [1.69858717E12, 570.2100000000005], [1.69858721E12, 594.0], [1.698587185E12, 969.0], [1.698587165E12, 178.0], [1.698587205E12, 925.1899999999996], [1.69858718E12, 537.0], [1.69858716E12, 106.32000000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69858722E12, 508.0], [1.6985872E12, 538.0], [1.698587195E12, 661.0], [1.698587175E12, 282.5], [1.698587215E12, 565.0], [1.69858719E12, 444.0], [1.69858717E12, 190.0], [1.69858721E12, 543.0], [1.698587185E12, 504.0], [1.698587165E12, 118.0], [1.698587205E12, 560.0], [1.69858718E12, 339.0], [1.69858716E12, 45.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69858722E12, 536.0], [1.6985872E12, 582.0], [1.698587195E12, 1150.0], [1.698587175E12, 791.0], [1.698587215E12, 630.0], [1.69858719E12, 488.0], [1.69858717E12, 517.4499999999998], [1.69858721E12, 586.0], [1.698587185E12, 907.5], [1.698587165E12, 165.0], [1.698587205E12, 877.0], [1.69858718E12, 448.0], [1.69858716E12, 86.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858722E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 318.0, "maxY": 1093.0, "series": [{"data": [[512.0, 441.0], [544.0, 652.5], [560.0, 824.0], [607.0, 757.0], [618.0, 556.0], [635.0, 822.0], [632.0, 620.0], [631.0, 952.0], [700.0, 718.0], [761.0, 28.0], [752.0, 467.0], [740.0, 508.0], [826.0, 600.0], [857.0, 592.0], [855.0, 607.0], [891.0, 257.0], [890.0, 246.0], [869.0, 382.0], [883.0, 553.0], [868.0, 559.0], [879.0, 571.0], [887.0, 555.0], [913.0, 40.0], [898.0, 562.0], [903.0, 547.0], [901.0, 557.0], [927.0, 539.0], [902.0, 560.0], [923.0, 543.0], [946.0, 51.0], [929.0, 77.0], [936.0, 105.0], [943.0, 137.0], [931.0, 539.0], [933.0, 535.0], [950.0, 538.0], [928.0, 550.0], [1017.0, 289.0], [1052.0, 81.0], [1053.0, 143.0], [1061.0, 154.0], [1056.0, 162.0], [1050.0, 333.0], [1024.0, 410.0], [1085.0, 468.0], [1033.0, 479.0], [1102.0, 248.0], [1103.0, 335.0], [1129.0, 340.0], [1147.0, 348.0], [1124.0, 446.0], [1091.0, 453.0], [1135.0, 441.0], [1134.0, 439.0], [318.0, 15.0], [410.0, 416.5], [445.0, 1093.0], [476.0, 321.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1147.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 318.0, "maxY": 1093.0, "series": [{"data": [[512.0, 441.0], [544.0, 652.5], [560.0, 824.0], [607.0, 757.0], [618.0, 556.0], [635.0, 822.0], [632.0, 620.0], [631.0, 952.0], [700.0, 718.0], [761.0, 28.0], [752.0, 467.0], [740.0, 508.0], [826.0, 600.0], [857.0, 592.0], [855.0, 607.0], [891.0, 257.0], [890.0, 246.0], [869.0, 382.0], [883.0, 553.0], [868.0, 559.0], [879.0, 571.0], [887.0, 555.0], [913.0, 40.0], [898.0, 562.0], [903.0, 547.0], [901.0, 557.0], [927.0, 539.0], [902.0, 560.0], [923.0, 543.0], [946.0, 51.0], [929.0, 77.0], [936.0, 105.0], [943.0, 137.0], [931.0, 539.0], [933.0, 535.0], [950.0, 538.0], [928.0, 550.0], [1017.0, 289.0], [1052.0, 81.0], [1053.0, 143.0], [1061.0, 154.0], [1056.0, 162.0], [1050.0, 333.0], [1024.0, 410.0], [1085.0, 468.0], [1033.0, 479.0], [1102.0, 248.0], [1103.0, 335.0], [1129.0, 340.0], [1147.0, 348.0], [1124.0, 446.0], [1091.0, 453.0], [1135.0, 441.0], [1134.0, 439.0], [318.0, 15.0], [410.0, 416.5], [445.0, 1093.0], [476.0, 321.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1147.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 48.0, "minX": 1.69858716E12, "maxY": 1100.8, "series": [{"data": [[1.69858722E12, 48.0], [1.6985872E12, 939.6], [1.698587195E12, 658.2], [1.698587175E12, 769.6], [1.698587215E12, 872.8], [1.69858719E12, 1100.8], [1.69858717E12, 802.6], [1.69858721E12, 910.8], [1.698587185E12, 810.4], [1.698587165E12, 1017.0], [1.698587205E12, 835.8], [1.69858718E12, 1076.2], [1.69858716E12, 789.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858722E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 148.0, "minX": 1.69858716E12, "maxY": 1100.2, "series": [{"data": [[1.69858722E12, 148.0], [1.6985872E12, 939.6], [1.698587195E12, 658.2], [1.698587175E12, 752.8], [1.698587215E12, 872.6], [1.69858719E12, 1100.2], [1.69858717E12, 786.0], [1.69858721E12, 910.8], [1.698587185E12, 793.8], [1.698587165E12, 1000.2], [1.698587205E12, 836.0], [1.69858718E12, 1059.6], [1.69858716E12, 773.4]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858722E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 148.0, "minX": 1.69858716E12, "maxY": 1100.2, "series": [{"data": [[1.69858722E12, 148.0], [1.6985872E12, 939.6], [1.698587195E12, 658.2], [1.698587175E12, 752.8], [1.698587215E12, 872.6], [1.69858719E12, 1100.2], [1.69858717E12, 786.0], [1.69858721E12, 910.8], [1.698587185E12, 793.8], [1.698587165E12, 1000.2], [1.698587205E12, 836.0], [1.69858718E12, 1059.6], [1.69858716E12, 773.4]], "isOverall": false, "label": "POST /meetings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858722E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 148.0, "minX": 1.69858716E12, "maxY": 1100.2, "series": [{"data": [[1.69858722E12, 148.0], [1.6985872E12, 939.6], [1.698587195E12, 658.2], [1.698587175E12, 752.8], [1.698587215E12, 872.6], [1.69858719E12, 1100.2], [1.69858717E12, 786.0], [1.69858721E12, 910.8], [1.698587185E12, 793.8], [1.698587165E12, 1000.2], [1.698587205E12, 836.0], [1.69858718E12, 1059.6], [1.69858716E12, 773.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858722E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

