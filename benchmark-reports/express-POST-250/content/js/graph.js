/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 1222.0, "series": [{"data": [[0.0, 7.0], [0.1, 8.0], [0.2, 9.0], [0.3, 10.0], [0.4, 10.0], [0.5, 11.0], [0.6, 12.0], [0.7, 13.0], [0.8, 13.0], [0.9, 14.0], [1.0, 14.0], [1.1, 15.0], [1.2, 15.0], [1.3, 16.0], [1.4, 16.0], [1.5, 17.0], [1.6, 18.0], [1.7, 19.0], [1.8, 19.0], [1.9, 20.0], [2.0, 21.0], [2.1, 22.0], [2.2, 23.0], [2.3, 23.0], [2.4, 24.0], [2.5, 25.0], [2.6, 25.0], [2.7, 25.0], [2.8, 26.0], [2.9, 26.0], [3.0, 26.0], [3.1, 27.0], [3.2, 27.0], [3.3, 27.0], [3.4, 27.0], [3.5, 28.0], [3.6, 28.0], [3.7, 28.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 30.0], [4.2, 30.0], [4.3, 31.0], [4.4, 31.0], [4.5, 32.0], [4.6, 32.0], [4.7, 33.0], [4.8, 33.0], [4.9, 34.0], [5.0, 34.0], [5.1, 35.0], [5.2, 35.0], [5.3, 36.0], [5.4, 36.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 38.0], [5.9, 38.0], [6.0, 38.0], [6.1, 38.0], [6.2, 39.0], [6.3, 39.0], [6.4, 39.0], [6.5, 39.0], [6.6, 40.0], [6.7, 40.0], [6.8, 40.0], [6.9, 41.0], [7.0, 41.0], [7.1, 41.0], [7.2, 41.0], [7.3, 42.0], [7.4, 42.0], [7.5, 42.0], [7.6, 42.0], [7.7, 43.0], [7.8, 43.0], [7.9, 43.0], [8.0, 44.0], [8.1, 44.0], [8.2, 44.0], [8.3, 44.0], [8.4, 45.0], [8.5, 45.0], [8.6, 45.0], [8.7, 45.0], [8.8, 46.0], [8.9, 46.0], [9.0, 46.0], [9.1, 46.0], [9.2, 47.0], [9.3, 47.0], [9.4, 47.0], [9.5, 48.0], [9.6, 48.0], [9.7, 49.0], [9.8, 49.0], [9.9, 49.0], [10.0, 50.0], [10.1, 51.0], [10.2, 51.0], [10.3, 52.0], [10.4, 53.0], [10.5, 54.0], [10.6, 55.0], [10.7, 55.0], [10.8, 56.0], [10.9, 57.0], [11.0, 57.0], [11.1, 58.0], [11.2, 58.0], [11.3, 59.0], [11.4, 59.0], [11.5, 60.0], [11.6, 60.0], [11.7, 61.0], [11.8, 61.0], [11.9, 61.0], [12.0, 62.0], [12.1, 62.0], [12.2, 62.0], [12.3, 63.0], [12.4, 63.0], [12.5, 63.0], [12.6, 64.0], [12.7, 64.0], [12.8, 65.0], [12.9, 65.0], [13.0, 66.0], [13.1, 66.0], [13.2, 67.0], [13.3, 68.0], [13.4, 68.0], [13.5, 69.0], [13.6, 70.0], [13.7, 70.0], [13.8, 71.0], [13.9, 72.0], [14.0, 73.0], [14.1, 73.0], [14.2, 74.0], [14.3, 75.0], [14.4, 76.0], [14.5, 77.0], [14.6, 78.0], [14.7, 79.0], [14.8, 80.0], [14.9, 81.0], [15.0, 81.0], [15.1, 82.0], [15.2, 82.0], [15.3, 83.0], [15.4, 83.0], [15.5, 83.0], [15.6, 84.0], [15.7, 84.0], [15.8, 84.0], [15.9, 85.0], [16.0, 85.0], [16.1, 85.0], [16.2, 86.0], [16.3, 86.0], [16.4, 86.0], [16.5, 87.0], [16.6, 87.0], [16.7, 87.0], [16.8, 87.0], [16.9, 88.0], [17.0, 88.0], [17.1, 88.0], [17.2, 88.0], [17.3, 89.0], [17.4, 89.0], [17.5, 89.0], [17.6, 89.0], [17.7, 90.0], [17.8, 90.0], [17.9, 90.0], [18.0, 91.0], [18.1, 91.0], [18.2, 92.0], [18.3, 92.0], [18.4, 93.0], [18.5, 93.0], [18.6, 94.0], [18.7, 94.0], [18.8, 95.0], [18.9, 95.0], [19.0, 96.0], [19.1, 97.0], [19.2, 98.0], [19.3, 98.0], [19.4, 99.0], [19.5, 100.0], [19.6, 101.0], [19.7, 102.0], [19.8, 103.0], [19.9, 104.0], [20.0, 104.0], [20.1, 105.0], [20.2, 106.0], [20.3, 106.0], [20.4, 107.0], [20.5, 107.0], [20.6, 108.0], [20.7, 108.0], [20.8, 109.0], [20.9, 109.0], [21.0, 109.0], [21.1, 109.0], [21.2, 110.0], [21.3, 110.0], [21.4, 110.0], [21.5, 111.0], [21.6, 111.0], [21.7, 111.0], [21.8, 112.0], [21.9, 112.0], [22.0, 112.0], [22.1, 113.0], [22.2, 113.0], [22.3, 113.0], [22.4, 113.0], [22.5, 114.0], [22.6, 114.0], [22.7, 114.0], [22.8, 115.0], [22.9, 115.0], [23.0, 115.0], [23.1, 116.0], [23.2, 116.0], [23.3, 116.0], [23.4, 117.0], [23.5, 117.0], [23.6, 117.0], [23.7, 118.0], [23.8, 118.0], [23.9, 118.0], [24.0, 119.0], [24.1, 119.0], [24.2, 119.0], [24.3, 120.0], [24.4, 120.0], [24.5, 120.0], [24.6, 121.0], [24.7, 121.0], [24.8, 121.0], [24.9, 122.0], [25.0, 122.0], [25.1, 122.0], [25.2, 123.0], [25.3, 123.0], [25.4, 123.0], [25.5, 124.0], [25.6, 124.0], [25.7, 125.0], [25.8, 125.0], [25.9, 125.0], [26.0, 126.0], [26.1, 126.0], [26.2, 126.0], [26.3, 127.0], [26.4, 127.0], [26.5, 128.0], [26.6, 128.0], [26.7, 129.0], [26.8, 129.0], [26.9, 130.0], [27.0, 130.0], [27.1, 131.0], [27.2, 131.0], [27.3, 132.0], [27.4, 132.0], [27.5, 133.0], [27.6, 133.0], [27.7, 133.0], [27.8, 134.0], [27.9, 134.0], [28.0, 135.0], [28.1, 135.0], [28.2, 135.0], [28.3, 136.0], [28.4, 136.0], [28.5, 137.0], [28.6, 137.0], [28.7, 138.0], [28.8, 138.0], [28.9, 139.0], [29.0, 139.0], [29.1, 140.0], [29.2, 141.0], [29.3, 141.0], [29.4, 142.0], [29.5, 144.0], [29.6, 145.0], [29.7, 148.0], [29.8, 150.0], [29.9, 152.0], [30.0, 154.0], [30.1, 155.0], [30.2, 157.0], [30.3, 158.0], [30.4, 159.0], [30.5, 160.0], [30.6, 161.0], [30.7, 161.0], [30.8, 162.0], [30.9, 163.0], [31.0, 164.0], [31.1, 165.0], [31.2, 167.0], [31.3, 168.0], [31.4, 169.0], [31.5, 169.0], [31.6, 170.0], [31.7, 171.0], [31.8, 172.0], [31.9, 173.0], [32.0, 173.0], [32.1, 174.0], [32.2, 174.0], [32.3, 175.0], [32.4, 175.0], [32.5, 176.0], [32.6, 176.0], [32.7, 177.0], [32.8, 177.0], [32.9, 178.0], [33.0, 178.0], [33.1, 178.0], [33.2, 179.0], [33.3, 179.0], [33.4, 180.0], [33.5, 180.0], [33.6, 180.0], [33.7, 181.0], [33.8, 181.0], [33.9, 181.0], [34.0, 182.0], [34.1, 182.0], [34.2, 183.0], [34.3, 183.0], [34.4, 183.0], [34.5, 184.0], [34.6, 184.0], [34.7, 184.0], [34.8, 185.0], [34.9, 185.0], [35.0, 185.0], [35.1, 186.0], [35.2, 186.0], [35.3, 186.0], [35.4, 187.0], [35.5, 187.0], [35.6, 187.0], [35.7, 188.0], [35.8, 188.0], [35.9, 188.0], [36.0, 189.0], [36.1, 189.0], [36.2, 190.0], [36.3, 190.0], [36.4, 190.0], [36.5, 191.0], [36.6, 191.0], [36.7, 191.0], [36.8, 191.0], [36.9, 192.0], [37.0, 192.0], [37.1, 193.0], [37.2, 193.0], [37.3, 193.0], [37.4, 194.0], [37.5, 194.0], [37.6, 194.0], [37.7, 195.0], [37.8, 195.0], [37.9, 196.0], [38.0, 196.0], [38.1, 196.0], [38.2, 197.0], [38.3, 197.0], [38.4, 198.0], [38.5, 198.0], [38.6, 199.0], [38.7, 199.0], [38.8, 200.0], [38.9, 200.0], [39.0, 201.0], [39.1, 201.0], [39.2, 202.0], [39.3, 202.0], [39.4, 202.0], [39.5, 203.0], [39.6, 203.0], [39.7, 204.0], [39.8, 204.0], [39.9, 204.0], [40.0, 205.0], [40.1, 205.0], [40.2, 206.0], [40.3, 206.0], [40.4, 206.0], [40.5, 207.0], [40.6, 207.0], [40.7, 207.0], [40.8, 208.0], [40.9, 208.0], [41.0, 209.0], [41.1, 209.0], [41.2, 209.0], [41.3, 210.0], [41.4, 210.0], [41.5, 210.0], [41.6, 211.0], [41.7, 211.0], [41.8, 212.0], [41.9, 212.0], [42.0, 212.0], [42.1, 213.0], [42.2, 213.0], [42.3, 214.0], [42.4, 214.0], [42.5, 215.0], [42.6, 215.0], [42.7, 216.0], [42.8, 216.0], [42.9, 217.0], [43.0, 218.0], [43.1, 218.0], [43.2, 219.0], [43.3, 220.0], [43.4, 220.0], [43.5, 221.0], [43.6, 221.0], [43.7, 222.0], [43.8, 223.0], [43.9, 223.0], [44.0, 223.0], [44.1, 224.0], [44.2, 225.0], [44.3, 225.0], [44.4, 226.0], [44.5, 226.0], [44.6, 227.0], [44.7, 228.0], [44.8, 229.0], [44.9, 230.0], [45.0, 231.0], [45.1, 232.0], [45.2, 235.0], [45.3, 237.0], [45.4, 238.0], [45.5, 239.0], [45.6, 240.0], [45.7, 241.0], [45.8, 242.0], [45.9, 243.0], [46.0, 243.0], [46.1, 244.0], [46.2, 245.0], [46.3, 245.0], [46.4, 246.0], [46.5, 247.0], [46.6, 248.0], [46.7, 248.0], [46.8, 249.0], [46.9, 249.0], [47.0, 250.0], [47.1, 250.0], [47.2, 251.0], [47.3, 251.0], [47.4, 252.0], [47.5, 253.0], [47.6, 253.0], [47.7, 254.0], [47.8, 255.0], [47.9, 256.0], [48.0, 257.0], [48.1, 257.0], [48.2, 258.0], [48.3, 259.0], [48.4, 259.0], [48.5, 259.0], [48.6, 260.0], [48.7, 260.0], [48.8, 261.0], [48.9, 261.0], [49.0, 261.0], [49.1, 261.0], [49.2, 262.0], [49.3, 262.0], [49.4, 263.0], [49.5, 263.0], [49.6, 263.0], [49.7, 263.0], [49.8, 264.0], [49.9, 264.0], [50.0, 265.0], [50.1, 265.0], [50.2, 265.0], [50.3, 266.0], [50.4, 266.0], [50.5, 267.0], [50.6, 267.0], [50.7, 267.0], [50.8, 268.0], [50.9, 268.0], [51.0, 268.0], [51.1, 269.0], [51.2, 269.0], [51.3, 269.0], [51.4, 269.0], [51.5, 270.0], [51.6, 270.0], [51.7, 271.0], [51.8, 271.0], [51.9, 271.0], [52.0, 271.0], [52.1, 272.0], [52.2, 272.0], [52.3, 272.0], [52.4, 273.0], [52.5, 273.0], [52.6, 273.0], [52.7, 273.0], [52.8, 273.0], [52.9, 274.0], [53.0, 274.0], [53.1, 274.0], [53.2, 274.0], [53.3, 275.0], [53.4, 275.0], [53.5, 275.0], [53.6, 275.0], [53.7, 275.0], [53.8, 275.0], [53.9, 276.0], [54.0, 276.0], [54.1, 276.0], [54.2, 276.0], [54.3, 276.0], [54.4, 277.0], [54.5, 277.0], [54.6, 277.0], [54.7, 277.0], [54.8, 277.0], [54.9, 278.0], [55.0, 278.0], [55.1, 278.0], [55.2, 278.0], [55.3, 278.0], [55.4, 278.0], [55.5, 278.0], [55.6, 279.0], [55.7, 279.0], [55.8, 279.0], [55.9, 279.0], [56.0, 279.0], [56.1, 279.0], [56.2, 280.0], [56.3, 280.0], [56.4, 280.0], [56.5, 280.0], [56.6, 280.0], [56.7, 280.0], [56.8, 280.0], [56.9, 281.0], [57.0, 281.0], [57.1, 281.0], [57.2, 281.0], [57.3, 281.0], [57.4, 281.0], [57.5, 282.0], [57.6, 282.0], [57.7, 282.0], [57.8, 282.0], [57.9, 282.0], [58.0, 282.0], [58.1, 282.0], [58.2, 282.0], [58.3, 283.0], [58.4, 283.0], [58.5, 283.0], [58.6, 283.0], [58.7, 283.0], [58.8, 283.0], [58.9, 283.0], [59.0, 284.0], [59.1, 284.0], [59.2, 284.0], [59.3, 284.0], [59.4, 284.0], [59.5, 284.0], [59.6, 284.0], [59.7, 284.0], [59.8, 285.0], [59.9, 285.0], [60.0, 285.0], [60.1, 285.0], [60.2, 285.0], [60.3, 285.0], [60.4, 285.0], [60.5, 285.0], [60.6, 286.0], [60.7, 286.0], [60.8, 286.0], [60.9, 286.0], [61.0, 286.0], [61.1, 286.0], [61.2, 286.0], [61.3, 286.0], [61.4, 287.0], [61.5, 287.0], [61.6, 287.0], [61.7, 287.0], [61.8, 287.0], [61.9, 287.0], [62.0, 287.0], [62.1, 287.0], [62.2, 287.0], [62.3, 288.0], [62.4, 288.0], [62.5, 288.0], [62.6, 288.0], [62.7, 288.0], [62.8, 288.0], [62.9, 288.0], [63.0, 289.0], [63.1, 289.0], [63.2, 289.0], [63.3, 289.0], [63.4, 289.0], [63.5, 289.0], [63.6, 289.0], [63.7, 289.0], [63.8, 289.0], [63.9, 290.0], [64.0, 290.0], [64.1, 290.0], [64.2, 290.0], [64.3, 290.0], [64.4, 290.0], [64.5, 290.0], [64.6, 290.0], [64.7, 290.0], [64.8, 291.0], [64.9, 291.0], [65.0, 291.0], [65.1, 291.0], [65.2, 291.0], [65.3, 291.0], [65.4, 291.0], [65.5, 291.0], [65.6, 291.0], [65.7, 291.0], [65.8, 292.0], [65.9, 292.0], [66.0, 292.0], [66.1, 292.0], [66.2, 292.0], [66.3, 292.0], [66.4, 292.0], [66.5, 292.0], [66.6, 292.0], [66.7, 293.0], [66.8, 293.0], [66.9, 293.0], [67.0, 293.0], [67.1, 293.0], [67.2, 293.0], [67.3, 293.0], [67.4, 293.0], [67.5, 294.0], [67.6, 294.0], [67.7, 294.0], [67.8, 294.0], [67.9, 294.0], [68.0, 294.0], [68.1, 294.0], [68.2, 294.0], [68.3, 294.0], [68.4, 295.0], [68.5, 295.0], [68.6, 295.0], [68.7, 295.0], [68.8, 295.0], [68.9, 295.0], [69.0, 295.0], [69.1, 295.0], [69.2, 295.0], [69.3, 296.0], [69.4, 296.0], [69.5, 296.0], [69.6, 296.0], [69.7, 296.0], [69.8, 296.0], [69.9, 296.0], [70.0, 296.0], [70.1, 296.0], [70.2, 297.0], [70.3, 297.0], [70.4, 297.0], [70.5, 297.0], [70.6, 297.0], [70.7, 297.0], [70.8, 297.0], [70.9, 298.0], [71.0, 298.0], [71.1, 298.0], [71.2, 298.0], [71.3, 298.0], [71.4, 298.0], [71.5, 298.0], [71.6, 298.0], [71.7, 298.0], [71.8, 298.0], [71.9, 299.0], [72.0, 299.0], [72.1, 299.0], [72.2, 299.0], [72.3, 299.0], [72.4, 299.0], [72.5, 299.0], [72.6, 299.0], [72.7, 300.0], [72.8, 300.0], [72.9, 300.0], [73.0, 300.0], [73.1, 300.0], [73.2, 300.0], [73.3, 300.0], [73.4, 301.0], [73.5, 301.0], [73.6, 301.0], [73.7, 301.0], [73.8, 301.0], [73.9, 301.0], [74.0, 301.0], [74.1, 301.0], [74.2, 302.0], [74.3, 302.0], [74.4, 302.0], [74.5, 302.0], [74.6, 302.0], [74.7, 302.0], [74.8, 302.0], [74.9, 302.0], [75.0, 303.0], [75.1, 303.0], [75.2, 303.0], [75.3, 303.0], [75.4, 303.0], [75.5, 303.0], [75.6, 303.0], [75.7, 304.0], [75.8, 304.0], [75.9, 304.0], [76.0, 304.0], [76.1, 304.0], [76.2, 304.0], [76.3, 304.0], [76.4, 304.0], [76.5, 304.0], [76.6, 305.0], [76.7, 305.0], [76.8, 305.0], [76.9, 305.0], [77.0, 305.0], [77.1, 305.0], [77.2, 305.0], [77.3, 305.0], [77.4, 306.0], [77.5, 306.0], [77.6, 306.0], [77.7, 306.0], [77.8, 306.0], [77.9, 306.0], [78.0, 306.0], [78.1, 306.0], [78.2, 307.0], [78.3, 307.0], [78.4, 307.0], [78.5, 307.0], [78.6, 307.0], [78.7, 307.0], [78.8, 307.0], [78.9, 308.0], [79.0, 308.0], [79.1, 308.0], [79.2, 308.0], [79.3, 308.0], [79.4, 308.0], [79.5, 308.0], [79.6, 309.0], [79.7, 309.0], [79.8, 309.0], [79.9, 309.0], [80.0, 309.0], [80.1, 309.0], [80.2, 309.0], [80.3, 310.0], [80.4, 310.0], [80.5, 310.0], [80.6, 310.0], [80.7, 310.0], [80.8, 310.0], [80.9, 311.0], [81.0, 311.0], [81.1, 311.0], [81.2, 311.0], [81.3, 311.0], [81.4, 312.0], [81.5, 312.0], [81.6, 312.0], [81.7, 312.0], [81.8, 312.0], [81.9, 313.0], [82.0, 313.0], [82.1, 313.0], [82.2, 313.0], [82.3, 314.0], [82.4, 314.0], [82.5, 314.0], [82.6, 314.0], [82.7, 315.0], [82.8, 315.0], [82.9, 316.0], [83.0, 316.0], [83.1, 316.0], [83.2, 317.0], [83.3, 317.0], [83.4, 317.0], [83.5, 317.0], [83.6, 318.0], [83.7, 318.0], [83.8, 318.0], [83.9, 319.0], [84.0, 319.0], [84.1, 320.0], [84.2, 320.0], [84.3, 321.0], [84.4, 321.0], [84.5, 321.0], [84.6, 322.0], [84.7, 322.0], [84.8, 323.0], [84.9, 323.0], [85.0, 324.0], [85.1, 324.0], [85.2, 325.0], [85.3, 325.0], [85.4, 326.0], [85.5, 327.0], [85.6, 327.0], [85.7, 328.0], [85.8, 329.0], [85.9, 330.0], [86.0, 331.0], [86.1, 332.0], [86.2, 333.0], [86.3, 334.0], [86.4, 335.0], [86.5, 335.0], [86.6, 336.0], [86.7, 337.0], [86.8, 337.0], [86.9, 338.0], [87.0, 338.0], [87.1, 339.0], [87.2, 339.0], [87.3, 340.0], [87.4, 341.0], [87.5, 342.0], [87.6, 342.0], [87.7, 343.0], [87.8, 344.0], [87.9, 344.0], [88.0, 345.0], [88.1, 346.0], [88.2, 347.0], [88.3, 348.0], [88.4, 349.0], [88.5, 350.0], [88.6, 351.0], [88.7, 352.0], [88.8, 352.0], [88.9, 353.0], [89.0, 354.0], [89.1, 356.0], [89.2, 358.0], [89.3, 360.0], [89.4, 363.0], [89.5, 365.0], [89.6, 367.0], [89.7, 369.0], [89.8, 371.0], [89.9, 372.0], [90.0, 374.0], [90.1, 375.0], [90.2, 376.0], [90.3, 377.0], [90.4, 378.0], [90.5, 380.0], [90.6, 381.0], [90.7, 383.0], [90.8, 384.0], [90.9, 386.0], [91.0, 387.0], [91.1, 390.0], [91.2, 391.0], [91.3, 396.0], [91.4, 403.0], [91.5, 408.0], [91.6, 411.0], [91.7, 413.0], [91.8, 415.0], [91.9, 418.0], [92.0, 420.0], [92.1, 422.0], [92.2, 424.0], [92.3, 426.0], [92.4, 427.0], [92.5, 430.0], [92.6, 436.0], [92.7, 442.0], [92.8, 444.0], [92.9, 447.0], [93.0, 449.0], [93.1, 452.0], [93.2, 454.0], [93.3, 457.0], [93.4, 460.0], [93.5, 463.0], [93.6, 471.0], [93.7, 475.0], [93.8, 478.0], [93.9, 480.0], [94.0, 482.0], [94.1, 484.0], [94.2, 485.0], [94.3, 487.0], [94.4, 490.0], [94.5, 491.0], [94.6, 495.0], [94.7, 501.0], [94.8, 506.0], [94.9, 512.0], [95.0, 515.0], [95.1, 519.0], [95.2, 523.0], [95.3, 526.0], [95.4, 530.0], [95.5, 535.0], [95.6, 538.0], [95.7, 541.0], [95.8, 543.0], [95.9, 546.0], [96.0, 550.0], [96.1, 554.0], [96.2, 557.0], [96.3, 559.0], [96.4, 561.0], [96.5, 563.0], [96.6, 565.0], [96.7, 566.0], [96.8, 569.0], [96.9, 572.0], [97.0, 575.0], [97.1, 577.0], [97.2, 581.0], [97.3, 584.0], [97.4, 587.0], [97.5, 589.0], [97.6, 592.0], [97.7, 594.0], [97.8, 596.0], [97.9, 598.0], [98.0, 599.0], [98.1, 601.0], [98.2, 603.0], [98.3, 605.0], [98.4, 608.0], [98.5, 613.0], [98.6, 617.0], [98.7, 619.0], [98.8, 622.0], [98.9, 625.0], [99.0, 629.0], [99.1, 632.0], [99.2, 636.0], [99.3, 647.0], [99.4, 654.0], [99.5, 1067.0], [99.6, 1129.0], [99.7, 1145.0], [99.8, 1157.0], [99.9, 1210.0], [100.0, 1222.0]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 16042.0, "series": [{"data": [[0.0, 9187.0], [1100.0, 155.0], [300.0, 8832.0], [1200.0, 58.0], [600.0, 694.0], [100.0, 9128.0], [200.0, 16042.0], [400.0, 1569.0], [900.0, 1.0], [500.0, 1571.0], [1000.0, 36.0]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2506.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 44767.0, "series": [{"data": [[0.0, 44767.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2506.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 20.86724386724392, "minX": 1.698527605E12, "maxY": 250.0, "series": [{"data": [[1.69852762E12, 136.29150326797412], [1.69852766E12, 250.0], [1.69852764E12, 250.0], [1.698527625E12, 182.85294831351658], [1.698527605E12, 20.86724386724392], [1.698527665E12, 217.77870563674318], [1.698527645E12, 250.0], [1.69852763E12, 221.89177215189926], [1.69852761E12, 55.337826272999465], [1.69852765E12, 250.0], [1.698527635E12, 249.3784043575777], [1.698527615E12, 97.63127370064676], [1.698527655E12, 250.0]], "isOverall": false, "label": "MinimalMeet-express", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698527665E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.63157894736842, "minX": 2.0, "maxY": 484.82499999999993, "series": [{"data": [[2.0, 21.555555555555557], [3.0, 17.51162790697674], [4.0, 12.94230769230769], [5.0, 9.63157894736842], [6.0, 21.245283018867923], [7.0, 14.388888888888888], [8.0, 12.763157894736846], [9.0, 13.66666666666667], [10.0, 15.59770114942529], [11.0, 28.906666666666666], [12.0, 17.45054945054945], [13.0, 19.29347826086957], [14.0, 18.24719101123595], [15.0, 18.148936170212767], [16.0, 24.546511627906977], [17.0, 33.20000000000002], [18.0, 44.63461538461539], [19.0, 40.93846153846153], [20.0, 68.73684210526316], [21.0, 49.18181818181815], [22.0, 31.095238095238106], [23.0, 29.117647058823533], [24.0, 31.848484848484855], [25.0, 30.444444444444443], [26.0, 27.442477876106196], [27.0, 29.483050847457633], [28.0, 26.68], [29.0, 33.653543307086615], [30.0, 30.535433070866137], [31.0, 71.82000000000001], [32.0, 38.31428571428572], [33.0, 34.22033898305082], [34.0, 46.281250000000014], [35.0, 37.90990990990991], [36.0, 37.6341463414634], [37.0, 38.309090909090905], [38.0, 37.93650793650793], [39.0, 39.310344827586206], [40.0, 48.71052631578948], [41.0, 43.31967213114754], [42.0, 43.05555555555557], [43.0, 40.61111111111112], [44.0, 41.023622047244096], [45.0, 42.86290322580644], [46.0, 44.121212121212096], [47.0, 48.47286821705426], [48.0, 45.17213114754101], [49.0, 52.48979591836734], [50.0, 77.96511627906976], [51.0, 52.33333333333332], [52.0, 47.17777777777777], [53.0, 46.17266187050361], [54.0, 75.96428571428574], [55.0, 48.466666666666676], [56.0, 55.591666666666676], [57.0, 52.351145038167964], [58.0, 63.62393162393162], [59.0, 66.2941176470588], [60.0, 60.04273504273504], [61.0, 62.81355932203391], [62.0, 64.05660377358492], [63.0, 66.67441860465122], [64.0, 64.80508474576271], [65.0, 62.911290322580626], [66.0, 66.65625000000001], [67.0, 70.1559633027523], [68.0, 68.90163934426228], [69.0, 86.98630136986299], [70.0, 94.54716981132077], [71.0, 84.9633027522936], [72.0, 102.96666666666665], [73.0, 132.85365853658536], [74.0, 109.63888888888889], [75.0, 131.3802816901409], [76.0, 95.15454545454544], [77.0, 94.55172413793103], [78.0, 109.33980582524272], [79.0, 75.17164179104478], [80.0, 82.1037735849057], [81.0, 93.55140186915885], [82.0, 93.26923076923075], [83.0, 96.94392523364488], [84.0, 102.08421052631579], [85.0, 98.04166666666663], [86.0, 81.98958333333333], [87.0, 132.4555555555556], [88.0, 102.25961538461539], [89.0, 94.8943089430894], [90.0, 91.11023622047239], [91.0, 87.48760330578513], [92.0, 87.99999999999999], [93.0, 83.70289855072465], [94.0, 94.78313253012053], [95.0, 120.81746031746023], [96.0, 88.09219858156033], [97.0, 86.01599999999999], [98.0, 90.25735294117652], [99.0, 91.48780487804876], [100.0, 106.54455445544554], [101.0, 113.01709401709402], [102.0, 109.4102564102564], [103.0, 108.69999999999997], [104.0, 114.85436893203884], [105.0, 128.66355140186917], [106.0, 119.43396226415095], [107.0, 127.60000000000001], [108.0, 135.5510204081632], [109.0, 142.2553191489361], [110.0, 128.55045871559633], [111.0, 117.65517241379312], [112.0, 120.38947368421054], [113.0, 167.29069767441865], [114.0, 162.4179104477612], [115.0, 176.44444444444446], [116.0, 157.94999999999996], [117.0, 141.85000000000005], [118.0, 128.67796610169495], [119.0, 120.95283018867929], [120.0, 140.28571428571433], [121.0, 132.83999999999995], [122.0, 125.7391304347826], [123.0, 115.71212121212119], [124.0, 115.46969696969693], [125.0, 118.88659793814436], [126.0, 156.07563025210084], [127.0, 117.8759689922481], [128.0, 112.5804195804196], [129.0, 116.02222222222223], [130.0, 115.6058394160584], [131.0, 111.73943661971832], [132.0, 120.75590551181102], [133.0, 131.77118644067798], [134.0, 135.38461538461542], [135.0, 134.98360655737704], [136.0, 126.54225352112675], [137.0, 118.75694444444449], [138.0, 132.8559322033898], [139.0, 133.236559139785], [140.0, 194.82978723404253], [141.0, 272.6538461538462], [142.0, 343.6428571428571], [143.0, 345.10256410256414], [144.0, 326.16438356164394], [145.0, 331.5777777777777], [146.0, 286.66216216216213], [147.0, 271.2727272727273], [148.0, 243.49333333333334], [149.0, 234.4857142857143], [150.0, 162.91379310344828], [151.0, 167.43103448275858], [152.0, 226.87500000000006], [153.0, 305.03448275862075], [154.0, 315.68333333333345], [155.0, 320.8333333333333], [156.0, 306.0816326530611], [157.0, 328.4200000000001], [158.0, 357.5925925925926], [159.0, 367.804347826087], [160.0, 375.7586206896551], [161.0, 374.9999999999999], [162.0, 292.3305785123967], [163.0, 168.0162601626016], [164.0, 163.43396226415098], [165.0, 190.90526315789475], [166.0, 188.4471544715448], [167.0, 164.87499999999991], [168.0, 177.8870967741936], [169.0, 180.09615384615384], [170.0, 174.43609022556385], [171.0, 166.58426966292126], [172.0, 241.2978723404255], [173.0, 322.2307692307692], [174.0, 386.64102564102564], [175.0, 434.09259259259255], [176.0, 429.16666666666663], [177.0, 452.37499999999994], [178.0, 475.50980392156856], [179.0, 484.82499999999993], [180.0, 454.38028169014075], [181.0, 386.9855072463767], [182.0, 299.69607843137254], [183.0, 211.00799999999998], [184.0, 176.4351145038167], [185.0, 190.2162162162162], [186.0, 186.13600000000005], [187.0, 195.1960784313725], [188.0, 191.85271317829464], [189.0, 194.04504504504504], [190.0, 201.2195121951219], [191.0, 201.18478260869563], [192.0, 221.34188034188037], [193.0, 229.61999999999998], [194.0, 200.86821705426357], [195.0, 179.70542635658916], [196.0, 178.72262773722636], [197.0, 177.75206611570258], [198.0, 188.7822580645161], [199.0, 197.26315789473676], [200.0, 201.9913793103448], [201.0, 196.35658914728688], [202.0, 188.7786259541985], [203.0, 182.6370370370371], [204.0, 183.659090909091], [205.0, 192.92028985507244], [206.0, 192.6923076923077], [207.0, 218.48453608247428], [208.0, 219.376923076923], [209.0, 196.50000000000006], [210.0, 206.3543307086614], [211.0, 195.6159420289856], [212.0, 186.2537313432836], [213.0, 191.59420289855075], [214.0, 199.85000000000005], [215.0, 210.44094488188975], [216.0, 212.53097345132744], [217.0, 232.8627450980392], [218.0, 242.6], [219.0, 221.93333333333334], [220.0, 208.8709677419354], [221.0, 210.57364341085278], [222.0, 204.95312500000009], [223.0, 212.48780487804873], [224.0, 232.64814814814818], [225.0, 298.1132075471699], [226.0, 291.26984126984115], [227.0, 217.74803149606296], [228.0, 213.7651515151515], [229.0, 221.55737704918033], [230.0, 225.12499999999997], [231.0, 225.2786885245901], [232.0, 238.6574074074074], [233.0, 253.72448979591834], [234.0, 272.2599999999999], [235.0, 280.425925925926], [236.0, 273.1028037383178], [237.0, 266.00917431192664], [238.0, 260.77358490566024], [239.0, 279.75000000000006], [240.0, 303.98947368421045], [241.0, 335.86666666666673], [242.0, 337.2696629213484], [243.0, 336.53684210526313], [244.0, 314.009708737864], [245.0, 292.0353982300886], [246.0, 276.3119266055043], [247.0, 273.31249999999983], [248.0, 288.2200000000001], [249.0, 302.53000000000003], [250.0, 345.23160837878686]], "isOverall": false, "label": "POST /meetings", "isController": false}, {"data": [[184.30148287606022, 238.93446576269855]], "isOverall": false, "label": "POST /meetings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 33913.2, "minX": 1.698527605E12, "maxY": 281556.0, "series": [{"data": [[1.69852762E12, 135405.0], [1.69852766E12, 129210.0], [1.69852764E12, 134838.6], [1.698527625E12, 145883.4], [1.698527605E12, 97353.6], [1.698527665E12, 33913.2], [1.698527645E12, 136927.2], [1.69852763E12, 167796.0], [1.69852761E12, 164524.8], [1.69852765E12, 124501.8], [1.698527635E12, 110483.4], [1.698527615E12, 158187.8], [1.698527655E12, 132219.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69852762E12, 227205.0], [1.69852766E12, 216810.0], [1.69852764E12, 226254.6], [1.698527625E12, 244787.4], [1.698527605E12, 164656.8], [1.698527665E12, 56905.2], [1.698527645E12, 229759.2], [1.69852763E12, 281556.0], [1.69852761E12, 277635.6], [1.69852765E12, 208909.8], [1.698527635E12, 185387.4], [1.698527615E12, 266290.2], [1.698527655E12, 221859.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698527665E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.71753246753252, "minX": 1.698527605E12, "maxY": 388.8000640820253, "series": [{"data": [[1.69852762E12, 176.50352941176445], [1.69852766E12, 342.4432876712335], [1.69852764E12, 328.3189813599379], [1.698527625E12, 222.68721184178622], [1.698527605E12, 26.71753246753252], [1.698527665E12, 285.1795407098124], [1.698527645E12, 322.6654601861431], [1.69852763E12, 231.1852320675104], [1.69852761E12, 59.40971330765939], [1.69852765E12, 352.559283480239], [1.698527635E12, 388.8000640820253], [1.698527615E12, 108.4447914343074], [1.698527655E12, 346.3073627844719]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698527665E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 26.71464646464641, "minX": 1.698527605E12, "maxY": 388.79878244152513, "series": [{"data": [[1.69852762E12, 176.50352941176445], [1.69852766E12, 342.4430136986299], [1.69852764E12, 328.31871882383786], [1.698527625E12, 222.68721184178622], [1.698527605E12, 26.71464646464641], [1.698527665E12, 285.1795407098124], [1.698527645E12, 322.6652016546027], [1.69852763E12, 231.18502109704642], [1.69852761E12, 59.409285408643484], [1.69852765E12, 352.55814614728405], [1.698527635E12, 388.79878244152513], [1.698527615E12, 108.44389917465963], [1.698527655E12, 346.3073627844719]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698527665E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9119145838388744, "minX": 1.698527605E12, "maxY": 1.0793691830403294, "series": [{"data": [[1.69852762E12, 0.9155555555555539], [1.69852766E12, 1.0789041095890461], [1.69852764E12, 1.0585455500131267], [1.698527625E12, 0.9119145838388744], [1.698527605E12, 1.0277777777777748], [1.698527665E12, 1.0793319415448854], [1.698527645E12, 1.0793691830403294], [1.69852763E12, 0.9240506329113928], [1.69852761E12, 0.9773213521608911], [1.69852765E12, 1.0329826556724486], [1.698527635E12, 0.9641140660044865], [1.698527615E12, 0.9192505018960532], [1.698527655E12, 1.0516733601070942]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698527665E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.698527605E12, "maxY": 1222.0, "series": [{"data": [[1.69852762E12, 411.0], [1.69852766E12, 661.0], [1.69852764E12, 612.0], [1.698527625E12, 526.0], [1.698527605E12, 102.0], [1.698527665E12, 317.0], [1.698527645E12, 632.0], [1.69852763E12, 345.0], [1.69852761E12, 162.0], [1.69852765E12, 645.0], [1.698527635E12, 1222.0], [1.698527615E12, 184.0], [1.698527655E12, 678.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69852762E12, 105.0], [1.69852766E12, 240.0], [1.69852764E12, 236.0], [1.698527625E12, 154.0], [1.698527605E12, 7.0], [1.698527665E12, 203.0], [1.698527645E12, 251.0], [1.69852763E12, 177.0], [1.69852761E12, 30.0], [1.69852765E12, 257.0], [1.698527635E12, 244.0], [1.698527615E12, 65.0], [1.698527655E12, 240.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69852762E12, 324.0], [1.69852766E12, 538.0], [1.69852764E12, 456.0], [1.698527625E12, 370.8000000000002], [1.698527605E12, 42.0], [1.698527665E12, 308.0], [1.698527645E12, 454.0], [1.69852763E12, 301.0], [1.69852761E12, 89.0], [1.69852765E12, 565.2000000000003], [1.698527635E12, 479.8000000000002], [1.698527615E12, 140.0], [1.698527655E12, 588.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69852762E12, 379.7399999999998], [1.69852766E12, 647.0], [1.69852764E12, 573.0], [1.698527625E12, 490.0], [1.698527605E12, 93.0], [1.698527665E12, 314.0], [1.698527645E12, 589.0], [1.69852763E12, 341.0], [1.69852761E12, 138.0], [1.69852765E12, 631.0], [1.698527635E12, 1214.7799999999997], [1.698527615E12, 178.0], [1.698527655E12, 650.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69852762E12, 132.0], [1.69852766E12, 294.0], [1.69852764E12, 295.0], [1.698527625E12, 193.0], [1.698527605E12, 26.0], [1.698527665E12, 286.0], [1.698527645E12, 301.0], [1.69852763E12, 216.0], [1.69852761E12, 54.0], [1.69852765E12, 305.0], [1.698527635E12, 311.0], [1.698527615E12, 104.0], [1.698527655E12, 296.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69852762E12, 350.0], [1.69852766E12, 602.0], [1.69852764E12, 504.5], [1.698527625E12, 447.89999999999964], [1.698527605E12, 52.0], [1.698527665E12, 311.0], [1.698527645E12, 539.0], [1.69852763E12, 331.0], [1.69852761E12, 105.25], [1.69852765E12, 601.0], [1.698527635E12, 1136.8999999999996], [1.698527615E12, 158.0], [1.698527655E12, 618.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698527665E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 8.0, "maxY": 1151.0, "series": [{"data": [[547.0, 188.0], [592.0, 345.5], [631.0, 240.0], [620.0, 296.0], [613.0, 315.0], [611.0, 292.0], [660.0, 19.0], [647.0, 289.0], [701.0, 131.0], [703.0, 249.0], [702.0, 324.0], [714.0, 27.0], [718.0, 95.0], [741.0, 333.0], [784.0, 292.0], [789.0, 320.0], [770.0, 290.0], [786.0, 312.0], [803.0, 140.0], [802.0, 331.5], [804.0, 288.0], [823.0, 301.0], [831.0, 315.0], [822.0, 302.0], [851.0, 124.0], [846.0, 294.0], [862.0, 289.0], [859.0, 296.0], [836.0, 292.0], [839.0, 303.0], [855.0, 287.0], [888.0, 32.0], [890.0, 189.5], [892.0, 277.0], [865.0, 308.0], [868.0, 294.0], [959.0, 88.0], [935.0, 198.0], [951.0, 213.0], [943.0, 227.0], [989.0, 45.0], [970.0, 64.0], [980.0, 91.0], [975.0, 123.0], [1000.0, 39.0], [997.0, 55.0], [1021.0, 205.0], [1076.0, 116.0], [1044.0, 189.0], [1041.0, 192.0], [8.0, 8.0], [66.0, 233.0], [263.0, 1151.0], [394.0, 595.0], [403.0, 586.0], [429.0, 586.0], [442.0, 325.0], [502.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1076.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 8.0, "maxY": 1151.0, "series": [{"data": [[547.0, 188.0], [592.0, 345.5], [631.0, 240.0], [620.0, 296.0], [613.0, 315.0], [611.0, 292.0], [660.0, 19.0], [647.0, 289.0], [701.0, 131.0], [703.0, 249.0], [702.0, 324.0], [714.0, 27.0], [718.0, 95.0], [741.0, 333.0], [784.0, 292.0], [789.0, 320.0], [770.0, 290.0], [786.0, 312.0], [803.0, 140.0], [802.0, 331.5], [804.0, 288.0], [823.0, 301.0], [831.0, 315.0], [822.0, 302.0], [851.0, 124.0], [846.0, 294.0], [862.0, 289.0], [859.0, 296.0], [836.0, 292.0], [839.0, 303.0], [855.0, 287.0], [888.0, 32.0], [890.0, 189.5], [892.0, 277.0], [865.0, 308.0], [868.0, 294.0], [959.0, 88.0], [935.0, 198.0], [951.0, 213.0], [943.0, 227.0], [989.0, 45.0], [970.0, 64.0], [980.0, 91.0], [975.0, 123.0], [1000.0, 39.0], [997.0, 55.0], [1021.0, 205.0], [1076.0, 116.0], [1044.0, 189.0], [1041.0, 192.0], [8.0, 8.0], [66.0, 233.0], [263.0, 1151.0], [394.0, 595.0], [403.0, 586.0], [429.0, 586.0], [442.0, 325.0], [502.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1076.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 141.6, "minX": 1.698527605E12, "maxY": 956.4, "series": [{"data": [[1.69852762E12, 773.4], [1.69852766E12, 730.2], [1.69852764E12, 761.8], [1.698527625E12, 832.4], [1.698527605E12, 561.6], [1.698527665E12, 141.6], [1.698527645E12, 773.6], [1.69852763E12, 956.4], [1.69852761E12, 943.0], [1.69852765E12, 703.4], [1.698527635E12, 625.4], [1.698527615E12, 905.0], [1.698527655E12, 746.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698527665E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 191.6, "minX": 1.698527605E12, "maxY": 948.0, "series": [{"data": [[1.69852762E12, 765.0], [1.69852766E12, 730.0], [1.69852764E12, 761.8], [1.698527625E12, 824.2], [1.698527605E12, 554.4], [1.698527665E12, 191.6], [1.698527645E12, 773.6], [1.69852763E12, 948.0], [1.69852761E12, 934.8], [1.69852765E12, 703.4], [1.698527635E12, 624.2], [1.698527615E12, 896.6], [1.698527655E12, 747.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698527665E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 191.6, "minX": 1.698527605E12, "maxY": 948.0, "series": [{"data": [[1.69852762E12, 765.0], [1.69852766E12, 730.0], [1.69852764E12, 761.8], [1.698527625E12, 824.2], [1.698527605E12, 554.4], [1.698527665E12, 191.6], [1.698527645E12, 773.6], [1.69852763E12, 948.0], [1.69852761E12, 934.8], [1.69852765E12, 703.4], [1.698527635E12, 624.2], [1.698527615E12, 896.6], [1.698527655E12, 747.0]], "isOverall": false, "label": "POST /meetings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698527665E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 191.6, "minX": 1.698527605E12, "maxY": 948.0, "series": [{"data": [[1.69852762E12, 765.0], [1.69852766E12, 730.0], [1.69852764E12, 761.8], [1.698527625E12, 824.2], [1.698527605E12, 554.4], [1.698527665E12, 191.6], [1.698527645E12, 773.6], [1.69852763E12, 948.0], [1.69852761E12, 934.8], [1.69852765E12, 703.4], [1.698527635E12, 624.2], [1.698527615E12, 896.6], [1.698527655E12, 747.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698527665E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

