/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 1322.0, "series": [{"data": [[0.0, 7.0], [0.1, 9.0], [0.2, 10.0], [0.3, 12.0], [0.4, 13.0], [0.5, 14.0], [0.6, 15.0], [0.7, 16.0], [0.8, 17.0], [0.9, 18.0], [1.0, 18.0], [1.1, 19.0], [1.2, 21.0], [1.3, 22.0], [1.4, 23.0], [1.5, 24.0], [1.6, 24.0], [1.7, 25.0], [1.8, 26.0], [1.9, 26.0], [2.0, 27.0], [2.1, 28.0], [2.2, 28.0], [2.3, 29.0], [2.4, 30.0], [2.5, 30.0], [2.6, 31.0], [2.7, 32.0], [2.8, 33.0], [2.9, 33.0], [3.0, 34.0], [3.1, 35.0], [3.2, 35.0], [3.3, 36.0], [3.4, 37.0], [3.5, 37.0], [3.6, 38.0], [3.7, 39.0], [3.8, 39.0], [3.9, 40.0], [4.0, 41.0], [4.1, 42.0], [4.2, 42.0], [4.3, 43.0], [4.4, 43.0], [4.5, 44.0], [4.6, 45.0], [4.7, 45.0], [4.8, 46.0], [4.9, 47.0], [5.0, 47.0], [5.1, 48.0], [5.2, 48.0], [5.3, 49.0], [5.4, 49.0], [5.5, 50.0], [5.6, 50.0], [5.7, 51.0], [5.8, 52.0], [5.9, 52.0], [6.0, 53.0], [6.1, 54.0], [6.2, 54.0], [6.3, 55.0], [6.4, 56.0], [6.5, 56.0], [6.6, 57.0], [6.7, 58.0], [6.8, 58.0], [6.9, 59.0], [7.0, 60.0], [7.1, 60.0], [7.2, 61.0], [7.3, 61.0], [7.4, 62.0], [7.5, 63.0], [7.6, 64.0], [7.7, 64.0], [7.8, 65.0], [7.9, 65.0], [8.0, 66.0], [8.1, 67.0], [8.2, 68.0], [8.3, 69.0], [8.4, 69.0], [8.5, 70.0], [8.6, 71.0], [8.7, 71.0], [8.8, 72.0], [8.9, 73.0], [9.0, 74.0], [9.1, 75.0], [9.2, 75.0], [9.3, 76.0], [9.4, 77.0], [9.5, 78.0], [9.6, 78.0], [9.7, 79.0], [9.8, 80.0], [9.9, 81.0], [10.0, 81.0], [10.1, 82.0], [10.2, 83.0], [10.3, 84.0], [10.4, 84.0], [10.5, 85.0], [10.6, 86.0], [10.7, 86.0], [10.8, 87.0], [10.9, 88.0], [11.0, 89.0], [11.1, 89.0], [11.2, 90.0], [11.3, 91.0], [11.4, 92.0], [11.5, 93.0], [11.6, 94.0], [11.7, 95.0], [11.8, 95.0], [11.9, 97.0], [12.0, 97.0], [12.1, 98.0], [12.2, 99.0], [12.3, 100.0], [12.4, 101.0], [12.5, 102.0], [12.6, 103.0], [12.7, 104.0], [12.8, 105.0], [12.9, 106.0], [13.0, 107.0], [13.1, 108.0], [13.2, 109.0], [13.3, 110.0], [13.4, 110.0], [13.5, 111.0], [13.6, 112.0], [13.7, 113.0], [13.8, 114.0], [13.9, 115.0], [14.0, 116.0], [14.1, 117.0], [14.2, 117.0], [14.3, 118.0], [14.4, 119.0], [14.5, 120.0], [14.6, 121.0], [14.7, 122.0], [14.8, 123.0], [14.9, 123.0], [15.0, 124.0], [15.1, 125.0], [15.2, 126.0], [15.3, 126.0], [15.4, 127.0], [15.5, 128.0], [15.6, 129.0], [15.7, 130.0], [15.8, 130.0], [15.9, 131.0], [16.0, 132.0], [16.1, 132.0], [16.2, 133.0], [16.3, 134.0], [16.4, 135.0], [16.5, 135.0], [16.6, 136.0], [16.7, 137.0], [16.8, 138.0], [16.9, 138.0], [17.0, 139.0], [17.1, 140.0], [17.2, 141.0], [17.3, 141.0], [17.4, 142.0], [17.5, 143.0], [17.6, 144.0], [17.7, 145.0], [17.8, 146.0], [17.9, 147.0], [18.0, 148.0], [18.1, 148.0], [18.2, 149.0], [18.3, 150.0], [18.4, 151.0], [18.5, 152.0], [18.6, 152.0], [18.7, 153.0], [18.8, 154.0], [18.9, 155.0], [19.0, 156.0], [19.1, 157.0], [19.2, 158.0], [19.3, 159.0], [19.4, 160.0], [19.5, 161.0], [19.6, 163.0], [19.7, 164.0], [19.8, 164.0], [19.9, 166.0], [20.0, 167.0], [20.1, 168.0], [20.2, 169.0], [20.3, 170.0], [20.4, 172.0], [20.5, 173.0], [20.6, 174.0], [20.7, 176.0], [20.8, 177.0], [20.9, 179.0], [21.0, 180.0], [21.1, 180.0], [21.2, 181.0], [21.3, 182.0], [21.4, 184.0], [21.5, 185.0], [21.6, 186.0], [21.7, 187.0], [21.8, 189.0], [21.9, 191.0], [22.0, 192.0], [22.1, 193.0], [22.2, 193.0], [22.3, 195.0], [22.4, 196.0], [22.5, 197.0], [22.6, 198.0], [22.7, 199.0], [22.8, 201.0], [22.9, 202.0], [23.0, 203.0], [23.1, 204.0], [23.2, 206.0], [23.3, 207.0], [23.4, 209.0], [23.5, 209.0], [23.6, 210.0], [23.7, 212.0], [23.8, 213.0], [23.9, 214.0], [24.0, 214.0], [24.1, 217.0], [24.2, 218.0], [24.3, 220.0], [24.4, 222.0], [24.5, 223.0], [24.6, 225.0], [24.7, 226.0], [24.8, 228.0], [24.9, 229.0], [25.0, 231.0], [25.1, 232.0], [25.2, 233.0], [25.3, 235.0], [25.4, 236.0], [25.5, 237.0], [25.6, 239.0], [25.7, 240.0], [25.8, 242.0], [25.9, 243.0], [26.0, 245.0], [26.1, 246.0], [26.2, 248.0], [26.3, 250.0], [26.4, 251.0], [26.5, 253.0], [26.6, 254.0], [26.7, 256.0], [26.8, 257.0], [26.9, 259.0], [27.0, 260.0], [27.1, 262.0], [27.2, 264.0], [27.3, 265.0], [27.4, 267.0], [27.5, 267.0], [27.6, 269.0], [27.7, 271.0], [27.8, 273.0], [27.9, 275.0], [28.0, 277.0], [28.1, 278.0], [28.2, 280.0], [28.3, 282.0], [28.4, 284.0], [28.5, 286.0], [28.6, 287.0], [28.7, 289.0], [28.8, 290.0], [28.9, 292.0], [29.0, 294.0], [29.1, 295.0], [29.2, 297.0], [29.3, 299.0], [29.4, 300.0], [29.5, 302.0], [29.6, 303.0], [29.7, 305.0], [29.8, 307.0], [29.9, 309.0], [30.0, 310.0], [30.1, 311.0], [30.2, 313.0], [30.3, 315.0], [30.4, 316.0], [30.5, 318.0], [30.6, 320.0], [30.7, 322.0], [30.8, 324.0], [30.9, 326.0], [31.0, 328.0], [31.1, 330.0], [31.2, 332.0], [31.3, 333.0], [31.4, 335.0], [31.5, 338.0], [31.6, 340.0], [31.7, 342.0], [31.8, 343.0], [31.9, 345.0], [32.0, 347.0], [32.1, 350.0], [32.2, 351.0], [32.3, 353.0], [32.4, 355.0], [32.5, 356.0], [32.6, 358.0], [32.7, 361.0], [32.8, 362.0], [32.9, 364.0], [33.0, 366.0], [33.1, 368.0], [33.2, 369.0], [33.3, 371.0], [33.4, 372.0], [33.5, 375.0], [33.6, 376.0], [33.7, 378.0], [33.8, 379.0], [33.9, 380.0], [34.0, 382.0], [34.1, 384.0], [34.2, 385.0], [34.3, 385.0], [34.4, 386.0], [34.5, 388.0], [34.6, 389.0], [34.7, 390.0], [34.8, 392.0], [34.9, 393.0], [35.0, 394.0], [35.1, 395.0], [35.2, 397.0], [35.3, 397.0], [35.4, 399.0], [35.5, 400.0], [35.6, 401.0], [35.7, 402.0], [35.8, 403.0], [35.9, 404.0], [36.0, 406.0], [36.1, 407.0], [36.2, 408.0], [36.3, 409.0], [36.4, 410.0], [36.5, 412.0], [36.6, 413.0], [36.7, 414.0], [36.8, 416.0], [36.9, 417.0], [37.0, 418.0], [37.1, 419.0], [37.2, 420.0], [37.3, 421.0], [37.4, 422.0], [37.5, 423.0], [37.6, 423.0], [37.7, 424.0], [37.8, 426.0], [37.9, 427.0], [38.0, 428.0], [38.1, 429.0], [38.2, 430.0], [38.3, 432.0], [38.4, 433.0], [38.5, 434.0], [38.6, 435.0], [38.7, 436.0], [38.8, 437.0], [38.9, 439.0], [39.0, 440.0], [39.1, 441.0], [39.2, 443.0], [39.3, 444.0], [39.4, 445.0], [39.5, 446.0], [39.6, 447.0], [39.7, 448.0], [39.8, 449.0], [39.9, 450.0], [40.0, 452.0], [40.1, 453.0], [40.2, 454.0], [40.3, 455.0], [40.4, 456.0], [40.5, 457.0], [40.6, 458.0], [40.7, 460.0], [40.8, 461.0], [40.9, 462.0], [41.0, 463.0], [41.1, 464.0], [41.2, 465.0], [41.3, 466.0], [41.4, 467.0], [41.5, 468.0], [41.6, 469.0], [41.7, 470.0], [41.8, 471.0], [41.9, 472.0], [42.0, 473.0], [42.1, 474.0], [42.2, 475.0], [42.3, 476.0], [42.4, 477.0], [42.5, 478.0], [42.6, 478.0], [42.7, 479.0], [42.8, 480.0], [42.9, 481.0], [43.0, 481.0], [43.1, 483.0], [43.2, 484.0], [43.3, 484.0], [43.4, 485.0], [43.5, 486.0], [43.6, 487.0], [43.7, 488.0], [43.8, 489.0], [43.9, 490.0], [44.0, 491.0], [44.1, 492.0], [44.2, 493.0], [44.3, 493.0], [44.4, 494.0], [44.5, 495.0], [44.6, 496.0], [44.7, 497.0], [44.8, 498.0], [44.9, 499.0], [45.0, 499.0], [45.1, 501.0], [45.2, 502.0], [45.3, 503.0], [45.4, 503.0], [45.5, 504.0], [45.6, 505.0], [45.7, 506.0], [45.8, 507.0], [45.9, 508.0], [46.0, 509.0], [46.1, 510.0], [46.2, 511.0], [46.3, 512.0], [46.4, 512.0], [46.5, 513.0], [46.6, 514.0], [46.7, 515.0], [46.8, 515.0], [46.9, 516.0], [47.0, 517.0], [47.1, 517.0], [47.2, 518.0], [47.3, 519.0], [47.4, 520.0], [47.5, 520.0], [47.6, 521.0], [47.7, 521.0], [47.8, 522.0], [47.9, 522.0], [48.0, 523.0], [48.1, 524.0], [48.2, 525.0], [48.3, 525.0], [48.4, 526.0], [48.5, 527.0], [48.6, 528.0], [48.7, 528.0], [48.8, 529.0], [48.9, 530.0], [49.0, 531.0], [49.1, 531.0], [49.2, 532.0], [49.3, 533.0], [49.4, 534.0], [49.5, 534.0], [49.6, 535.0], [49.7, 536.0], [49.8, 537.0], [49.9, 538.0], [50.0, 538.0], [50.1, 539.0], [50.2, 540.0], [50.3, 540.0], [50.4, 541.0], [50.5, 542.0], [50.6, 542.0], [50.7, 543.0], [50.8, 544.0], [50.9, 544.0], [51.0, 545.0], [51.1, 545.0], [51.2, 546.0], [51.3, 547.0], [51.4, 547.0], [51.5, 548.0], [51.6, 548.0], [51.7, 549.0], [51.8, 550.0], [51.9, 550.0], [52.0, 551.0], [52.1, 552.0], [52.2, 553.0], [52.3, 553.0], [52.4, 554.0], [52.5, 555.0], [52.6, 555.0], [52.7, 556.0], [52.8, 557.0], [52.9, 558.0], [53.0, 559.0], [53.1, 559.0], [53.2, 560.0], [53.3, 561.0], [53.4, 562.0], [53.5, 562.0], [53.6, 563.0], [53.7, 564.0], [53.8, 564.0], [53.9, 565.0], [54.0, 566.0], [54.1, 566.0], [54.2, 567.0], [54.3, 567.0], [54.4, 568.0], [54.5, 569.0], [54.6, 569.0], [54.7, 570.0], [54.8, 571.0], [54.9, 571.0], [55.0, 572.0], [55.1, 573.0], [55.2, 573.0], [55.3, 574.0], [55.4, 575.0], [55.5, 575.0], [55.6, 576.0], [55.7, 577.0], [55.8, 578.0], [55.9, 578.0], [56.0, 579.0], [56.1, 579.0], [56.2, 580.0], [56.3, 581.0], [56.4, 581.0], [56.5, 582.0], [56.6, 583.0], [56.7, 583.0], [56.8, 584.0], [56.9, 585.0], [57.0, 585.0], [57.1, 586.0], [57.2, 587.0], [57.3, 587.0], [57.4, 588.0], [57.5, 588.0], [57.6, 589.0], [57.7, 589.0], [57.8, 590.0], [57.9, 591.0], [58.0, 591.0], [58.1, 592.0], [58.2, 593.0], [58.3, 593.0], [58.4, 594.0], [58.5, 594.0], [58.6, 595.0], [58.7, 596.0], [58.8, 596.0], [58.9, 597.0], [59.0, 598.0], [59.1, 598.0], [59.2, 599.0], [59.3, 599.0], [59.4, 600.0], [59.5, 601.0], [59.6, 601.0], [59.7, 602.0], [59.8, 602.0], [59.9, 603.0], [60.0, 604.0], [60.1, 604.0], [60.2, 605.0], [60.3, 605.0], [60.4, 606.0], [60.5, 607.0], [60.6, 607.0], [60.7, 608.0], [60.8, 609.0], [60.9, 610.0], [61.0, 610.0], [61.1, 611.0], [61.2, 612.0], [61.3, 612.0], [61.4, 613.0], [61.5, 613.0], [61.6, 614.0], [61.7, 614.0], [61.8, 615.0], [61.9, 616.0], [62.0, 616.0], [62.1, 617.0], [62.2, 618.0], [62.3, 618.0], [62.4, 619.0], [62.5, 620.0], [62.6, 620.0], [62.7, 621.0], [62.8, 621.0], [62.9, 622.0], [63.0, 622.0], [63.1, 623.0], [63.2, 623.0], [63.3, 624.0], [63.4, 625.0], [63.5, 625.0], [63.6, 626.0], [63.7, 627.0], [63.8, 628.0], [63.9, 628.0], [64.0, 629.0], [64.1, 629.0], [64.2, 630.0], [64.3, 631.0], [64.4, 631.0], [64.5, 632.0], [64.6, 632.0], [64.7, 633.0], [64.8, 634.0], [64.9, 634.0], [65.0, 635.0], [65.1, 635.0], [65.2, 636.0], [65.3, 637.0], [65.4, 637.0], [65.5, 638.0], [65.6, 638.0], [65.7, 639.0], [65.8, 640.0], [65.9, 640.0], [66.0, 641.0], [66.1, 642.0], [66.2, 642.0], [66.3, 643.0], [66.4, 643.0], [66.5, 644.0], [66.6, 644.0], [66.7, 645.0], [66.8, 645.0], [66.9, 646.0], [67.0, 646.0], [67.1, 647.0], [67.2, 647.0], [67.3, 648.0], [67.4, 648.0], [67.5, 649.0], [67.6, 649.0], [67.7, 650.0], [67.8, 650.0], [67.9, 651.0], [68.0, 651.0], [68.1, 652.0], [68.2, 652.0], [68.3, 653.0], [68.4, 654.0], [68.5, 654.0], [68.6, 654.0], [68.7, 655.0], [68.8, 656.0], [68.9, 656.0], [69.0, 657.0], [69.1, 657.0], [69.2, 658.0], [69.3, 658.0], [69.4, 659.0], [69.5, 660.0], [69.6, 660.0], [69.7, 660.0], [69.8, 661.0], [69.9, 662.0], [70.0, 662.0], [70.1, 663.0], [70.2, 663.0], [70.3, 664.0], [70.4, 664.0], [70.5, 665.0], [70.6, 665.0], [70.7, 666.0], [70.8, 666.0], [70.9, 667.0], [71.0, 668.0], [71.1, 668.0], [71.2, 669.0], [71.3, 670.0], [71.4, 670.0], [71.5, 671.0], [71.6, 671.0], [71.7, 672.0], [71.8, 673.0], [71.9, 673.0], [72.0, 674.0], [72.1, 674.0], [72.2, 675.0], [72.3, 675.0], [72.4, 676.0], [72.5, 676.0], [72.6, 677.0], [72.7, 678.0], [72.8, 678.0], [72.9, 679.0], [73.0, 679.0], [73.1, 680.0], [73.2, 681.0], [73.3, 681.0], [73.4, 682.0], [73.5, 682.0], [73.6, 683.0], [73.7, 684.0], [73.8, 684.0], [73.9, 685.0], [74.0, 685.0], [74.1, 686.0], [74.2, 686.0], [74.3, 687.0], [74.4, 687.0], [74.5, 688.0], [74.6, 688.0], [74.7, 689.0], [74.8, 689.0], [74.9, 690.0], [75.0, 691.0], [75.1, 691.0], [75.2, 692.0], [75.3, 692.0], [75.4, 693.0], [75.5, 693.0], [75.6, 694.0], [75.7, 694.0], [75.8, 695.0], [75.9, 695.0], [76.0, 696.0], [76.1, 696.0], [76.2, 697.0], [76.3, 698.0], [76.4, 698.0], [76.5, 699.0], [76.6, 699.0], [76.7, 700.0], [76.8, 701.0], [76.9, 701.0], [77.0, 702.0], [77.1, 702.0], [77.2, 703.0], [77.3, 703.0], [77.4, 704.0], [77.5, 705.0], [77.6, 705.0], [77.7, 706.0], [77.8, 706.0], [77.9, 707.0], [78.0, 708.0], [78.1, 708.0], [78.2, 709.0], [78.3, 709.0], [78.4, 710.0], [78.5, 711.0], [78.6, 711.0], [78.7, 712.0], [78.8, 712.0], [78.9, 713.0], [79.0, 714.0], [79.1, 715.0], [79.2, 715.0], [79.3, 716.0], [79.4, 717.0], [79.5, 717.0], [79.6, 718.0], [79.7, 719.0], [79.8, 719.0], [79.9, 720.0], [80.0, 721.0], [80.1, 722.0], [80.2, 722.0], [80.3, 723.0], [80.4, 723.0], [80.5, 724.0], [80.6, 725.0], [80.7, 726.0], [80.8, 727.0], [80.9, 727.0], [81.0, 728.0], [81.1, 729.0], [81.2, 729.0], [81.3, 730.0], [81.4, 731.0], [81.5, 732.0], [81.6, 732.0], [81.7, 733.0], [81.8, 733.0], [81.9, 734.0], [82.0, 735.0], [82.1, 735.0], [82.2, 736.0], [82.3, 737.0], [82.4, 738.0], [82.5, 739.0], [82.6, 739.0], [82.7, 740.0], [82.8, 741.0], [82.9, 741.0], [83.0, 742.0], [83.1, 742.0], [83.2, 743.0], [83.3, 744.0], [83.4, 744.0], [83.5, 745.0], [83.6, 746.0], [83.7, 746.0], [83.8, 747.0], [83.9, 748.0], [84.0, 749.0], [84.1, 749.0], [84.2, 750.0], [84.3, 751.0], [84.4, 751.0], [84.5, 752.0], [84.6, 752.0], [84.7, 753.0], [84.8, 754.0], [84.9, 755.0], [85.0, 755.0], [85.1, 756.0], [85.2, 757.0], [85.3, 757.0], [85.4, 758.0], [85.5, 759.0], [85.6, 760.0], [85.7, 760.0], [85.8, 761.0], [85.9, 762.0], [86.0, 762.0], [86.1, 763.0], [86.2, 764.0], [86.3, 764.0], [86.4, 765.0], [86.5, 766.0], [86.6, 766.0], [86.7, 767.0], [86.8, 768.0], [86.9, 769.0], [87.0, 769.0], [87.1, 770.0], [87.2, 771.0], [87.3, 771.0], [87.4, 772.0], [87.5, 773.0], [87.6, 774.0], [87.7, 774.0], [87.8, 775.0], [87.9, 776.0], [88.0, 777.0], [88.1, 777.0], [88.2, 778.0], [88.3, 779.0], [88.4, 780.0], [88.5, 781.0], [88.6, 782.0], [88.7, 783.0], [88.8, 784.0], [88.9, 785.0], [89.0, 785.0], [89.1, 786.0], [89.2, 787.0], [89.3, 788.0], [89.4, 789.0], [89.5, 790.0], [89.6, 792.0], [89.7, 793.0], [89.8, 794.0], [89.9, 795.0], [90.0, 796.0], [90.1, 797.0], [90.2, 798.0], [90.3, 799.0], [90.4, 800.0], [90.5, 801.0], [90.6, 802.0], [90.7, 804.0], [90.8, 805.0], [90.9, 806.0], [91.0, 807.0], [91.1, 808.0], [91.2, 809.0], [91.3, 810.0], [91.4, 811.0], [91.5, 813.0], [91.6, 814.0], [91.7, 815.0], [91.8, 816.0], [91.9, 818.0], [92.0, 819.0], [92.1, 820.0], [92.2, 821.0], [92.3, 823.0], [92.4, 824.0], [92.5, 824.0], [92.6, 826.0], [92.7, 827.0], [92.8, 828.0], [92.9, 830.0], [93.0, 831.0], [93.1, 832.0], [93.2, 833.0], [93.3, 835.0], [93.4, 836.0], [93.5, 838.0], [93.6, 840.0], [93.7, 841.0], [93.8, 843.0], [93.9, 844.0], [94.0, 846.0], [94.1, 847.0], [94.2, 849.0], [94.3, 851.0], [94.4, 852.0], [94.5, 853.0], [94.6, 856.0], [94.7, 857.0], [94.8, 860.0], [94.9, 861.0], [95.0, 863.0], [95.1, 866.0], [95.2, 867.0], [95.3, 869.0], [95.4, 871.0], [95.5, 874.0], [95.6, 876.0], [95.7, 877.0], [95.8, 879.0], [95.9, 881.0], [96.0, 883.0], [96.1, 885.0], [96.2, 887.0], [96.3, 890.0], [96.4, 892.0], [96.5, 895.0], [96.6, 899.0], [96.7, 902.0], [96.8, 905.0], [96.9, 907.0], [97.0, 909.0], [97.1, 913.0], [97.2, 916.0], [97.3, 920.0], [97.4, 927.0], [97.5, 930.0], [97.6, 937.0], [97.7, 945.0], [97.8, 951.0], [97.9, 960.0], [98.0, 966.0], [98.1, 976.0], [98.2, 984.0], [98.3, 992.0], [98.4, 1001.0], [98.5, 1006.0], [98.6, 1015.0], [98.7, 1024.0], [98.8, 1035.0], [98.9, 1043.0], [99.0, 1050.0], [99.1, 1061.0], [99.2, 1072.0], [99.3, 1083.0], [99.4, 1099.0], [99.5, 1124.0], [99.6, 1139.0], [99.7, 1157.0], [99.8, 1180.0], [99.9, 1218.0], [100.0, 1322.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4056.0, "series": [{"data": [[0.0, 2864.0], [600.0, 4056.0], [700.0, 3216.0], [200.0, 1552.0], [800.0, 1461.0], [900.0, 414.0], [1000.0, 238.0], [1100.0, 106.0], [300.0, 1425.0], [1200.0, 32.0], [1300.0, 1.0], [100.0, 2456.0], [400.0, 2234.0], [500.0, 3346.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10545.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12856.0, "series": [{"data": [[0.0, 10545.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 12856.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.438888888888897, "minX": 1.698523915E12, "maxY": 250.0, "series": [{"data": [[1.698523965E12, 250.0], [1.698523945E12, 242.54670658682633], [1.698523925E12, 79.97974683544295], [1.698523915E12, 10.438888888888897], [1.69852396E12, 250.0], [1.69852394E12, 204.15577032404772], [1.69852392E12, 38.519694533762056], [1.698523975E12, 228.5753803596126], [1.698523955E12, 250.0], [1.698523935E12, 164.0050473186119], [1.69852397E12, 250.0], [1.69852395E12, 250.0], [1.69852393E12, 120.79504504504519]], "isOverall": false, "label": "MinimalMeet-dotnet", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698523975E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10.333333333333332, "minX": 2.0, "maxY": 858.2461538461538, "series": [{"data": [[2.0, 10.333333333333332], [3.0, 43.85714285714286], [4.0, 40.138888888888886], [5.0, 13.292682926829267], [6.0, 15.833333333333336], [7.0, 48.686274509803916], [8.0, 19.840909090909104], [9.0, 32.45454545454545], [10.0, 41.116279069767444], [11.0, 36.75], [12.0, 26.509803921568633], [13.0, 25.000000000000007], [14.0, 44.21153846153847], [15.0, 67.42105263157893], [16.0, 34.45283018867925], [17.0, 34.25], [18.0, 54.11290322580645], [19.0, 56.98333333333334], [20.0, 44.61403508771929], [21.0, 46.407407407407426], [22.0, 54.66071428571428], [23.0, 56.0], [24.0, 60.88405797101449], [25.0, 47.99999999999999], [26.0, 48.049180327868854], [27.0, 45.98412698412697], [28.0, 82.63076923076923], [29.0, 58.911764705882334], [30.0, 69.92727272727272], [31.0, 83.43396226415095], [32.0, 64.56], [33.0, 79.73134328358208], [34.0, 68.00000000000003], [35.0, 74.80952380952382], [36.0, 73.01562500000001], [37.0, 80.68518518518518], [38.0, 77.16393442622952], [39.0, 82.67142857142855], [40.0, 85.19402985074628], [41.0, 76.77551020408167], [42.0, 84.0985915492958], [43.0, 78.7536231884058], [44.0, 87.51785714285711], [45.0, 121.88709677419354], [46.0, 95.9310344827586], [47.0, 100.34848484848486], [48.0, 111.05405405405403], [49.0, 112.28571428571428], [50.0, 111.41269841269843], [51.0, 100.8888888888889], [52.0, 96.1875], [53.0, 104.19696969696969], [54.0, 130.60869565217394], [55.0, 124.390625], [56.0, 107.12820512820514], [57.0, 111.37313432835822], [58.0, 112.53658536585367], [59.0, 118.7391304347826], [60.0, 131.89230769230764], [61.0, 110.20000000000002], [62.0, 131.85507246376815], [63.0, 112.61403508771929], [64.0, 185.24137931034485], [65.0, 175.89830508474572], [66.0, 163.20289855072463], [67.0, 151.27777777777777], [68.0, 128.51020408163265], [69.0, 124.33823529411765], [70.0, 136.2375], [71.0, 136.08108108108107], [72.0, 135.37500000000003], [73.0, 145.1014492753624], [74.0, 170.304347826087], [75.0, 113.73437499999999], [76.0, 277.75], [77.0, 246.2878787878788], [78.0, 167.48648648648646], [79.0, 128.8928571428571], [80.0, 187.66666666666666], [81.0, 203.32876712328772], [82.0, 170.77499999999998], [83.0, 207.1], [84.0, 222.7142857142857], [85.0, 218.80000000000004], [86.0, 170.2028985507247], [87.0, 196.58823529411768], [88.0, 186.66666666666669], [89.0, 145.91176470588235], [90.0, 176.55555555555551], [91.0, 179.61249999999995], [92.0, 186.78431372549022], [93.0, 184.8], [94.0, 210.66666666666669], [95.0, 139.2608695652174], [96.0, 211.63291139240508], [97.0, 258.1764705882353], [98.0, 217.43157894736845], [99.0, 291.61538461538464], [100.0, 241.2727272727273], [101.0, 272.6], [102.0, 263.0000000000001], [103.0, 277.0476190476189], [104.0, 199.95], [105.0, 295.2361111111111], [106.0, 275.1935483870967], [107.0, 258.2456140350877], [108.0, 260.47058823529403], [109.0, 233.53191489361703], [110.0, 316.9354838709678], [111.0, 185.67213114754094], [112.0, 199.15], [113.0, 383.4411764705883], [114.0, 303.26804123711327], [115.0, 205.9090909090909], [116.0, 248.65740740740748], [117.0, 179.11111111111111], [118.0, 283.56140350877183], [119.0, 307.0677966101696], [120.0, 312.1666666666667], [121.0, 317.3749999999999], [122.0, 413.5000000000001], [123.0, 379.3636363636364], [124.0, 402.95833333333326], [125.0, 424.11111111111103], [126.0, 422.56410256410254], [127.0, 246.74999999999997], [128.0, 360.8333333333333], [129.0, 476.30357142857144], [130.0, 438.45679012345676], [131.0, 200.44000000000003], [132.0, 311.4], [133.0, 423.2631578947368], [134.0, 475.792207792208], [135.0, 402.23076923076917], [136.0, 441.17647058823536], [137.0, 409.6595744680851], [138.0, 464.56000000000006], [139.0, 213.625], [140.0, 413.07142857142856], [141.0, 467.9125], [142.0, 442.03921568627453], [143.0, 341.0625], [144.0, 359.30769230769226], [145.0, 471.42], [146.0, 512.9610389610391], [147.0, 247.3428571428572], [148.0, 296.23333333333335], [149.0, 411.05263157894734], [150.0, 597.0270270270271], [151.0, 670.75], [152.0, 592.3571428571431], [153.0, 384.4375], [154.0, 579.0], [155.0, 542.3809523809524], [156.0, 577.148148148148], [157.0, 552.5199999999996], [158.0, 388.57142857142856], [159.0, 447.875], [160.0, 526.9666666666667], [161.0, 533.1538461538463], [162.0, 335.3437499999999], [163.0, 333.30434782608694], [164.0, 467.03999999999996], [165.0, 464.53191489361694], [166.0, 448.7272727272728], [167.0, 346.01369863013696], [168.0, 397.68421052631584], [169.0, 466.875], [170.0, 564.5833333333333], [171.0, 614.6086956521738], [172.0, 535.6428571428571], [173.0, 301.9230769230769], [174.0, 479.8333333333333], [175.0, 480.25], [176.0, 550.5423728813558], [177.0, 601.1979166666665], [178.0, 474.3333333333333], [179.0, 462.1111111111111], [180.0, 541.5384615384615], [181.0, 557.076923076923], [182.0, 521.3013698630137], [183.0, 281.2068965517241], [184.0, 391.18181818181813], [185.0, 532.5625], [186.0, 632.75], [187.0, 642.0846153846152], [188.0, 478.04545454545456], [189.0, 406.8235294117647], [190.0, 414.3333333333333], [191.0, 503.4545454545453], [192.0, 511.66233766233756], [194.0, 502.42857142857144], [195.0, 560.0222222222221], [196.0, 542.0335570469801], [197.0, 231.6956521739131], [198.0, 258.74999999999994], [199.0, 394.83333333333337], [193.0, 736.0], [200.0, 538.0714285714286], [201.0, 640.1617647058823], [202.0, 565.252100840336], [203.0, 301.49999999999994], [204.0, 333.38235294117646], [205.0, 456.18181818181813], [206.0, 559.0], [207.0, 577.1132075471698], [208.0, 465.57142857142856], [209.0, 572.1818181818182], [210.0, 682.9999999999999], [211.0, 606.5806451612906], [212.0, 632.3478260869565], [213.0, 589.6], [214.0, 469.06666666666666], [215.0, 606.75], [216.0, 643.818181818182], [217.0, 662.831325301205], [218.0, 642.6447368421054], [219.0, 612.818181818182], [220.0, 453.97959183673464], [221.0, 451.3846153846154], [222.0, 556.7692307692307], [223.0, 625.3333333333334], [224.0, 641.4761904761904], [225.0, 722.3157894736843], [226.0, 821.4242424242423], [227.0, 753.4464285714286], [228.0, 433.6315789473684], [229.0, 428.29166666666663], [230.0, 488.85714285714283], [231.0, 559.5238095238095], [232.0, 691.7826086956521], [233.0, 748.8505747126436], [234.0, 800.9629629629628], [235.0, 608.4999999999999], [236.0, 567.0000000000001], [237.0, 701.1904761904763], [238.0, 719.157894736842], [239.0, 852.0384615384617], [240.0, 858.2461538461538], [241.0, 762.5365853658536], [242.0, 477.9629629629629], [243.0, 429.85714285714283], [244.0, 494.625], [245.0, 582.1818181818181], [246.0, 712.3076923076923], [247.0, 779.1791044776121], [248.0, 807.0869565217394], [249.0, 726.4705882352941], [250.0, 654.7409448818927]], "isOverall": false, "label": "GET /meetings", "isController": false}, {"data": [[181.99294901927234, 483.96059997436083]], "isOverall": false, "label": "GET /meetings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21888.0, "minX": 1.698523915E12, "maxY": 6.51029984E7, "series": [{"data": [[1.698523965E12, 5.26999352E7], [1.698523945E12, 4.3698556E7], [1.698523925E12, 6.2015316E7], [1.698523915E12, 1.8840096E7], [1.69852396E12, 5.04757572E7], [1.69852394E12, 4.60274012E7], [1.69852392E12, 6.51029984E7], [1.698523975E12, 3.78371928E7], [1.698523955E12, 4.71787404E7], [1.698523935E12, 4.1474378E7], [1.69852397E12, 5.167943E7], [1.69852395E12, 4.88272488E7], [1.69852393E12, 4.64722368E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.698523965E12, 61225.6], [1.698523945E12, 50768.0], [1.698523925E12, 72048.0], [1.698523915E12, 21888.0], [1.69852396E12, 58641.6], [1.69852394E12, 53473.6], [1.69852392E12, 75635.2], [1.698523975E12, 43958.4], [1.698523955E12, 54811.2], [1.698523935E12, 48184.0], [1.69852397E12, 60040.0], [1.69852395E12, 56726.4], [1.69852393E12, 53990.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698523975E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24.35138888888888, "minX": 1.698523915E12, "maxY": 707.1401197604797, "series": [{"data": [[1.698523965E12, 644.254220456803], [1.698523945E12, 707.1401197604797], [1.698523925E12, 165.82109704641348], [1.698523915E12, 24.35138888888888], [1.69852396E12, 637.3027475375832], [1.69852394E12, 549.4042069357581], [1.69852392E12, 75.72628617363331], [1.698523975E12, 623.232365145229], [1.698523955E12, 696.6001109262351], [1.698523935E12, 492.09652996845455], [1.69852397E12, 613.6734177215191], [1.69852395E12, 701.1495176848889], [1.69852393E12, 334.7567567567566]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698523975E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17.772222222222208, "minX": 1.698523915E12, "maxY": 491.8295819935694, "series": [{"data": [[1.698523965E12, 465.5665342601779], [1.698523945E12, 484.74311377245476], [1.698523925E12, 109.45443037974688], [1.698523915E12, 17.772222222222208], [1.69852396E12, 453.7921202695694], [1.69852394E12, 374.3439454235363], [1.69852392E12, 51.84244372990353], [1.698523975E12, 449.78838174273835], [1.698523955E12, 472.09816971713815], [1.698523935E12, 337.423974763408], [1.69852397E12, 424.75848101265854], [1.69852395E12, 491.8295819935694], [1.69852393E12, 221.78997747747735]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698523975E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.1728295819935695, "minX": 1.698523915E12, "maxY": 1.50881182490051, "series": [{"data": [[1.698523965E12, 1.4379344587884764], [1.698523945E12, 1.4299401197604793], [1.698523925E12, 1.2118143459915598], [1.698523915E12, 1.433333333333333], [1.69852396E12, 1.4665629860031117], [1.69852394E12, 1.50881182490051], [1.69852392E12, 1.1728295819935695], [1.698523975E12, 1.3803596127247588], [1.698523955E12, 1.413200221852469], [1.698523935E12, 1.4933753943217667], [1.69852397E12, 1.4653164556962033], [1.69852395E12, 1.4528403001071806], [1.69852393E12, 1.341216216216219]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698523975E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.698523915E12, "maxY": 1322.0, "series": [{"data": [[1.698523965E12, 1322.0], [1.698523945E12, 1187.0], [1.698523925E12, 342.0], [1.698523915E12, 56.0], [1.69852396E12, 1149.0], [1.69852394E12, 1048.0], [1.69852392E12, 183.0], [1.698523975E12, 1282.0], [1.698523955E12, 1293.0], [1.698523935E12, 876.0], [1.69852397E12, 1159.0], [1.69852395E12, 1282.0], [1.69852393E12, 728.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.698523965E12, 79.0], [1.698523945E12, 157.0], [1.698523925E12, 21.0], [1.698523915E12, 7.0], [1.69852396E12, 88.0], [1.69852394E12, 48.0], [1.69852392E12, 20.0], [1.698523975E12, 95.0], [1.698523955E12, 164.0], [1.698523935E12, 80.0], [1.69852397E12, 98.0], [1.69852395E12, 210.0], [1.69852393E12, 83.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.698523965E12, 822.5], [1.698523945E12, 907.0], [1.698523925E12, 237.0], [1.698523915E12, 37.0], [1.69852396E12, 801.0], [1.69852394E12, 707.0], [1.69852392E12, 121.0], [1.698523975E12, 841.0], [1.698523955E12, 886.0], [1.698523935E12, 646.0], [1.69852397E12, 770.4000000000001], [1.69852395E12, 861.0], [1.69852393E12, 482.29999999999995]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.698523965E12, 1068.0999999999995], [1.698523945E12, 1079.4499999999998], [1.698523925E12, 290.28999999999996], [1.698523915E12, 46.789999999999964], [1.69852396E12, 975.7], [1.69852394E12, 895.2000000000012], [1.69852392E12, 152.11000000000013], [1.698523975E12, 1136.59], [1.698523955E12, 1181.8400000000001], [1.698523935E12, 759.0], [1.69852397E12, 1065.24], [1.69852395E12, 1173.0], [1.69852393E12, 622.9200000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.698523965E12, 657.0], [1.698523945E12, 733.0], [1.698523925E12, 159.0], [1.698523915E12, 24.0], [1.69852396E12, 649.0], [1.69852394E12, 560.0], [1.69852392E12, 70.0], [1.698523975E12, 627.0], [1.698523955E12, 724.0], [1.698523935E12, 507.0], [1.69852397E12, 618.0], [1.69852395E12, 708.0], [1.69852393E12, 318.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.698523965E12, 885.0], [1.698523945E12, 986.8999999999996], [1.698523925E12, 258.0], [1.698523915E12, 42.0], [1.69852396E12, 838.0], [1.69852394E12, 745.0], [1.69852392E12, 134.0], [1.698523975E12, 983.2499999999993], [1.698523955E12, 941.0], [1.698523935E12, 687.6999999999998], [1.69852397E12, 886.3999999999996], [1.69852395E12, 914.0], [1.69852393E12, 518.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698523975E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 244.0, "maxY": 800.0, "series": [{"data": [[520.0, 180.0], [244.0, 544.5], [246.0, 663.0], [271.0, 435.0], [268.0, 694.0], [287.0, 569.0], [290.0, 15.0], [288.0, 541.0], [295.0, 523.0], [298.0, 770.0], [308.0, 432.5], [315.0, 671.0], [320.0, 428.5], [335.0, 772.0], [327.0, 692.0], [324.0, 715.5], [330.0, 615.0], [349.0, 421.5], [348.0, 650.5], [347.0, 800.0], [350.0, 629.0], [367.0, 267.0], [360.0, 561.0], [353.0, 643.0], [352.0, 664.0], [363.0, 636.5], [377.0, 669.0], [379.0, 645.0], [375.0, 584.0], [396.0, 546.0], [392.0, 684.5], [397.0, 663.0], [430.0, 29.0], [426.0, 172.0], [422.0, 461.0], [428.0, 548.0], [417.0, 778.5], [421.0, 686.0], [416.0, 636.5], [431.0, 660.0], [418.0, 650.5], [432.0, 248.0], [433.0, 616.0], [458.0, 210.0], [457.0, 690.0], [471.0, 131.0], [473.0, 629.0], [494.0, 58.0], [493.0, 58.0], [495.0, 134.0], [501.0, 72.0], [506.0, 108.0], [504.0, 651.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 520.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11.5, "minX": 244.0, "maxY": 539.0, "series": [{"data": [[520.0, 119.5], [244.0, 370.0], [246.0, 522.0], [271.0, 318.0], [268.0, 490.0], [287.0, 420.0], [290.0, 11.5], [288.0, 366.0], [295.0, 336.0], [298.0, 509.5], [308.0, 289.5], [315.0, 505.0], [320.0, 298.5], [335.0, 512.0], [327.0, 469.0], [324.0, 473.0], [330.0, 421.0], [349.0, 279.5], [348.0, 438.5], [347.0, 539.0], [350.0, 429.5], [367.0, 169.0], [360.0, 380.0], [353.0, 448.5], [352.0, 458.0], [363.0, 416.0], [377.0, 420.0], [379.0, 485.0], [375.0, 450.0], [396.0, 374.0], [392.0, 489.0], [397.0, 461.0], [430.0, 21.0], [426.0, 114.0], [422.0, 304.0], [428.0, 367.0], [417.0, 512.0], [421.0, 499.0], [416.0, 465.0], [431.0, 493.0], [418.0, 452.5], [432.0, 169.5], [433.0, 410.0], [458.0, 139.0], [457.0, 502.0], [471.0, 88.0], [473.0, 437.0], [494.0, 39.5], [493.0, 40.0], [495.0, 87.0], [501.0, 46.0], [506.0, 74.0], [504.0, 432.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 520.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 147.6, "minX": 1.698523915E12, "maxY": 505.8, "series": [{"data": [[1.698523965E12, 402.8], [1.698523945E12, 338.8], [1.698523925E12, 482.4], [1.698523915E12, 147.6], [1.69852396E12, 385.8], [1.69852394E12, 360.2], [1.69852392E12, 505.8], [1.698523975E12, 239.2], [1.698523955E12, 360.6], [1.698523935E12, 325.2], [1.69852397E12, 395.0], [1.69852395E12, 373.2], [1.69852393E12, 363.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698523975E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 144.0, "minX": 1.698523915E12, "maxY": 497.6, "series": [{"data": [[1.698523965E12, 402.8], [1.698523945E12, 334.0], [1.698523925E12, 474.0], [1.698523915E12, 144.0], [1.69852396E12, 385.8], [1.69852394E12, 351.8], [1.69852392E12, 497.6], [1.698523975E12, 289.2], [1.698523955E12, 360.6], [1.698523935E12, 317.0], [1.69852397E12, 395.0], [1.69852395E12, 373.2], [1.69852393E12, 355.2]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698523975E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 144.0, "minX": 1.698523915E12, "maxY": 497.6, "series": [{"data": [[1.698523965E12, 402.8], [1.698523945E12, 334.0], [1.698523925E12, 474.0], [1.698523915E12, 144.0], [1.69852396E12, 385.8], [1.69852394E12, 351.8], [1.69852392E12, 497.6], [1.698523975E12, 289.2], [1.698523955E12, 360.6], [1.698523935E12, 317.0], [1.69852397E12, 395.0], [1.69852395E12, 373.2], [1.69852393E12, 355.2]], "isOverall": false, "label": "GET /meetings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698523975E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 144.0, "minX": 1.698523915E12, "maxY": 497.6, "series": [{"data": [[1.698523965E12, 402.8], [1.698523945E12, 334.0], [1.698523925E12, 474.0], [1.698523915E12, 144.0], [1.69852396E12, 385.8], [1.69852394E12, 351.8], [1.69852392E12, 497.6], [1.698523975E12, 289.2], [1.698523955E12, 360.6], [1.698523935E12, 317.0], [1.69852397E12, 395.0], [1.69852395E12, 373.2], [1.69852393E12, 355.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698523975E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

