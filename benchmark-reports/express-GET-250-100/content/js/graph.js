/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 465.0, "series": [{"data": [[0.0, 5.0], [0.1, 6.0], [0.2, 7.0], [0.3, 8.0], [0.4, 10.0], [0.5, 11.0], [0.6, 12.0], [0.7, 13.0], [0.8, 14.0], [0.9, 14.0], [1.0, 15.0], [1.1, 16.0], [1.2, 16.0], [1.3, 17.0], [1.4, 18.0], [1.5, 19.0], [1.6, 20.0], [1.7, 20.0], [1.8, 21.0], [1.9, 22.0], [2.0, 22.0], [2.1, 23.0], [2.2, 23.0], [2.3, 24.0], [2.4, 25.0], [2.5, 25.0], [2.6, 26.0], [2.7, 27.0], [2.8, 27.0], [2.9, 28.0], [3.0, 29.0], [3.1, 30.0], [3.2, 31.0], [3.3, 32.0], [3.4, 33.0], [3.5, 34.0], [3.6, 36.0], [3.7, 36.0], [3.8, 37.0], [3.9, 38.0], [4.0, 38.0], [4.1, 39.0], [4.2, 39.0], [4.3, 40.0], [4.4, 40.0], [4.5, 41.0], [4.6, 42.0], [4.7, 42.0], [4.8, 43.0], [4.9, 43.0], [5.0, 44.0], [5.1, 45.0], [5.2, 45.0], [5.3, 46.0], [5.4, 46.0], [5.5, 47.0], [5.6, 48.0], [5.7, 49.0], [5.8, 50.0], [5.9, 51.0], [6.0, 52.0], [6.1, 52.0], [6.2, 53.0], [6.3, 53.0], [6.4, 54.0], [6.5, 54.0], [6.6, 54.0], [6.7, 55.0], [6.8, 55.0], [6.9, 55.0], [7.0, 56.0], [7.1, 56.0], [7.2, 57.0], [7.3, 57.0], [7.4, 58.0], [7.5, 58.0], [7.6, 58.0], [7.7, 59.0], [7.8, 60.0], [7.9, 60.0], [8.0, 61.0], [8.1, 62.0], [8.2, 62.0], [8.3, 63.0], [8.4, 64.0], [8.5, 65.0], [8.6, 66.0], [8.7, 67.0], [8.8, 67.0], [8.9, 68.0], [9.0, 68.0], [9.1, 69.0], [9.2, 70.0], [9.3, 70.0], [9.4, 71.0], [9.5, 71.0], [9.6, 72.0], [9.7, 72.0], [9.8, 72.0], [9.9, 73.0], [10.0, 73.0], [10.1, 74.0], [10.2, 74.0], [10.3, 75.0], [10.4, 75.0], [10.5, 75.0], [10.6, 76.0], [10.7, 76.0], [10.8, 77.0], [10.9, 77.0], [11.0, 78.0], [11.1, 78.0], [11.2, 80.0], [11.3, 80.0], [11.4, 81.0], [11.5, 82.0], [11.6, 82.0], [11.7, 83.0], [11.8, 83.0], [11.9, 84.0], [12.0, 84.0], [12.1, 85.0], [12.2, 85.0], [12.3, 86.0], [12.4, 87.0], [12.5, 88.0], [12.6, 88.0], [12.7, 89.0], [12.8, 90.0], [12.9, 91.0], [13.0, 93.0], [13.1, 94.0], [13.2, 95.0], [13.3, 97.0], [13.4, 99.0], [13.5, 100.0], [13.6, 101.0], [13.7, 101.0], [13.8, 102.0], [13.9, 103.0], [14.0, 103.0], [14.1, 104.0], [14.2, 105.0], [14.3, 105.0], [14.4, 106.0], [14.5, 106.0], [14.6, 107.0], [14.7, 108.0], [14.8, 109.0], [14.9, 109.0], [15.0, 110.0], [15.1, 110.0], [15.2, 110.0], [15.3, 110.0], [15.4, 111.0], [15.5, 112.0], [15.6, 112.0], [15.7, 113.0], [15.8, 113.0], [15.9, 114.0], [16.0, 114.0], [16.1, 115.0], [16.2, 115.0], [16.3, 116.0], [16.4, 116.0], [16.5, 117.0], [16.6, 118.0], [16.7, 119.0], [16.8, 120.0], [16.9, 120.0], [17.0, 121.0], [17.1, 122.0], [17.2, 123.0], [17.3, 124.0], [17.4, 125.0], [17.5, 126.0], [17.6, 127.0], [17.7, 128.0], [17.8, 129.0], [17.9, 129.0], [18.0, 130.0], [18.1, 130.0], [18.2, 131.0], [18.3, 131.0], [18.4, 132.0], [18.5, 133.0], [18.6, 133.0], [18.7, 134.0], [18.8, 134.0], [18.9, 135.0], [19.0, 135.0], [19.1, 136.0], [19.2, 136.0], [19.3, 137.0], [19.4, 137.0], [19.5, 138.0], [19.6, 138.0], [19.7, 139.0], [19.8, 140.0], [19.9, 140.0], [20.0, 141.0], [20.1, 141.0], [20.2, 141.0], [20.3, 142.0], [20.4, 142.0], [20.5, 142.0], [20.6, 143.0], [20.7, 143.0], [20.8, 143.0], [20.9, 144.0], [21.0, 144.0], [21.1, 144.0], [21.2, 144.0], [21.3, 145.0], [21.4, 145.0], [21.5, 146.0], [21.6, 146.0], [21.7, 147.0], [21.8, 147.0], [21.9, 148.0], [22.0, 148.0], [22.1, 149.0], [22.2, 149.0], [22.3, 151.0], [22.4, 152.0], [22.5, 153.0], [22.6, 154.0], [22.7, 155.0], [22.8, 155.0], [22.9, 156.0], [23.0, 157.0], [23.1, 158.0], [23.2, 158.0], [23.3, 159.0], [23.4, 159.0], [23.5, 161.0], [23.6, 162.0], [23.7, 164.0], [23.8, 165.0], [23.9, 166.0], [24.0, 167.0], [24.1, 169.0], [24.2, 170.0], [24.3, 171.0], [24.4, 173.0], [24.5, 174.0], [24.6, 175.0], [24.7, 175.0], [24.8, 176.0], [24.9, 177.0], [25.0, 178.0], [25.1, 178.0], [25.2, 179.0], [25.3, 179.0], [25.4, 179.0], [25.5, 180.0], [25.6, 180.0], [25.7, 181.0], [25.8, 181.0], [25.9, 182.0], [26.0, 183.0], [26.1, 183.0], [26.2, 184.0], [26.3, 184.0], [26.4, 185.0], [26.5, 185.0], [26.6, 185.0], [26.7, 186.0], [26.8, 186.0], [26.9, 186.0], [27.0, 187.0], [27.1, 187.0], [27.2, 188.0], [27.3, 188.0], [27.4, 189.0], [27.5, 189.0], [27.6, 190.0], [27.7, 190.0], [27.8, 191.0], [27.9, 191.0], [28.0, 192.0], [28.1, 192.0], [28.2, 192.0], [28.3, 193.0], [28.4, 193.0], [28.5, 193.0], [28.6, 194.0], [28.7, 194.0], [28.8, 195.0], [28.9, 196.0], [29.0, 197.0], [29.1, 197.0], [29.2, 198.0], [29.3, 199.0], [29.4, 199.0], [29.5, 200.0], [29.6, 200.0], [29.7, 201.0], [29.8, 201.0], [29.9, 201.0], [30.0, 202.0], [30.1, 202.0], [30.2, 203.0], [30.3, 203.0], [30.4, 204.0], [30.5, 204.0], [30.6, 204.0], [30.7, 205.0], [30.8, 205.0], [30.9, 206.0], [31.0, 207.0], [31.1, 208.0], [31.2, 208.0], [31.3, 209.0], [31.4, 209.0], [31.5, 210.0], [31.6, 210.0], [31.7, 211.0], [31.8, 211.0], [31.9, 212.0], [32.0, 212.0], [32.1, 213.0], [32.2, 213.0], [32.3, 214.0], [32.4, 214.0], [32.5, 215.0], [32.6, 216.0], [32.7, 217.0], [32.8, 218.0], [32.9, 218.0], [33.0, 219.0], [33.1, 219.0], [33.2, 220.0], [33.3, 220.0], [33.4, 221.0], [33.5, 221.0], [33.6, 222.0], [33.7, 222.0], [33.8, 223.0], [33.9, 223.0], [34.0, 224.0], [34.1, 225.0], [34.2, 226.0], [34.3, 226.0], [34.4, 227.0], [34.5, 228.0], [34.6, 229.0], [34.7, 230.0], [34.8, 231.0], [34.9, 232.0], [35.0, 232.0], [35.1, 233.0], [35.2, 234.0], [35.3, 234.0], [35.4, 235.0], [35.5, 235.0], [35.6, 235.0], [35.7, 236.0], [35.8, 236.0], [35.9, 236.0], [36.0, 237.0], [36.1, 237.0], [36.2, 237.0], [36.3, 237.0], [36.4, 238.0], [36.5, 238.0], [36.6, 238.0], [36.7, 239.0], [36.8, 239.0], [36.9, 239.0], [37.0, 239.0], [37.1, 240.0], [37.2, 240.0], [37.3, 240.0], [37.4, 241.0], [37.5, 241.0], [37.6, 242.0], [37.7, 243.0], [37.8, 243.0], [37.9, 244.0], [38.0, 245.0], [38.1, 246.0], [38.2, 247.0], [38.3, 248.0], [38.4, 249.0], [38.5, 251.0], [38.6, 252.0], [38.7, 252.0], [38.8, 253.0], [38.9, 255.0], [39.0, 256.0], [39.1, 257.0], [39.2, 258.0], [39.3, 259.0], [39.4, 262.0], [39.5, 264.0], [39.6, 267.0], [39.7, 273.0], [39.8, 279.0], [39.9, 294.0], [40.0, 299.0], [40.1, 301.0], [40.2, 302.0], [40.3, 303.0], [40.4, 304.0], [40.5, 305.0], [40.6, 305.0], [40.7, 306.0], [40.8, 306.0], [40.9, 307.0], [41.0, 308.0], [41.1, 308.0], [41.2, 309.0], [41.3, 310.0], [41.4, 311.0], [41.5, 312.0], [41.6, 313.0], [41.7, 314.0], [41.8, 316.0], [41.9, 316.0], [42.0, 317.0], [42.1, 318.0], [42.2, 319.0], [42.3, 320.0], [42.4, 321.0], [42.5, 322.0], [42.6, 322.0], [42.7, 323.0], [42.8, 324.0], [42.9, 324.0], [43.0, 325.0], [43.1, 325.0], [43.2, 326.0], [43.3, 326.0], [43.4, 327.0], [43.5, 327.0], [43.6, 328.0], [43.7, 329.0], [43.8, 329.0], [43.9, 330.0], [44.0, 330.0], [44.1, 331.0], [44.2, 332.0], [44.3, 333.0], [44.4, 334.0], [44.5, 334.0], [44.6, 335.0], [44.7, 336.0], [44.8, 336.0], [44.9, 337.0], [45.0, 338.0], [45.1, 339.0], [45.2, 340.0], [45.3, 341.0], [45.4, 343.0], [45.5, 343.0], [45.6, 344.0], [45.7, 345.0], [45.8, 345.0], [45.9, 346.0], [46.0, 346.0], [46.1, 347.0], [46.2, 348.0], [46.3, 348.0], [46.4, 349.0], [46.5, 349.0], [46.6, 350.0], [46.7, 350.0], [46.8, 351.0], [46.9, 351.0], [47.0, 351.0], [47.1, 351.0], [47.2, 352.0], [47.3, 352.0], [47.4, 352.0], [47.5, 352.0], [47.6, 353.0], [47.7, 353.0], [47.8, 353.0], [47.9, 354.0], [48.0, 354.0], [48.1, 354.0], [48.2, 354.0], [48.3, 355.0], [48.4, 355.0], [48.5, 355.0], [48.6, 355.0], [48.7, 356.0], [48.8, 356.0], [48.9, 356.0], [49.0, 356.0], [49.1, 356.0], [49.2, 356.0], [49.3, 357.0], [49.4, 357.0], [49.5, 357.0], [49.6, 357.0], [49.7, 357.0], [49.8, 358.0], [49.9, 358.0], [50.0, 358.0], [50.1, 358.0], [50.2, 358.0], [50.3, 358.0], [50.4, 359.0], [50.5, 359.0], [50.6, 359.0], [50.7, 359.0], [50.8, 359.0], [50.9, 359.0], [51.0, 360.0], [51.1, 360.0], [51.2, 360.0], [51.3, 360.0], [51.4, 360.0], [51.5, 361.0], [51.6, 361.0], [51.7, 361.0], [51.8, 361.0], [51.9, 361.0], [52.0, 361.0], [52.1, 362.0], [52.2, 362.0], [52.3, 362.0], [52.4, 362.0], [52.5, 362.0], [52.6, 363.0], [52.7, 363.0], [52.8, 363.0], [52.9, 363.0], [53.0, 363.0], [53.1, 363.0], [53.2, 364.0], [53.3, 364.0], [53.4, 364.0], [53.5, 364.0], [53.6, 364.0], [53.7, 364.0], [53.8, 365.0], [53.9, 365.0], [54.0, 365.0], [54.1, 365.0], [54.2, 365.0], [54.3, 365.0], [54.4, 366.0], [54.5, 366.0], [54.6, 366.0], [54.7, 366.0], [54.8, 366.0], [54.9, 366.0], [55.0, 366.0], [55.1, 366.0], [55.2, 367.0], [55.3, 367.0], [55.4, 367.0], [55.5, 367.0], [55.6, 367.0], [55.7, 367.0], [55.8, 367.0], [55.9, 368.0], [56.0, 368.0], [56.1, 368.0], [56.2, 368.0], [56.3, 368.0], [56.4, 368.0], [56.5, 368.0], [56.6, 369.0], [56.7, 369.0], [56.8, 369.0], [56.9, 369.0], [57.0, 369.0], [57.1, 369.0], [57.2, 369.0], [57.3, 369.0], [57.4, 370.0], [57.5, 370.0], [57.6, 370.0], [57.7, 370.0], [57.8, 370.0], [57.9, 370.0], [58.0, 370.0], [58.1, 370.0], [58.2, 371.0], [58.3, 371.0], [58.4, 371.0], [58.5, 371.0], [58.6, 371.0], [58.7, 371.0], [58.8, 371.0], [58.9, 372.0], [59.0, 372.0], [59.1, 372.0], [59.2, 372.0], [59.3, 372.0], [59.4, 372.0], [59.5, 372.0], [59.6, 373.0], [59.7, 373.0], [59.8, 373.0], [59.9, 373.0], [60.0, 373.0], [60.1, 373.0], [60.2, 373.0], [60.3, 373.0], [60.4, 373.0], [60.5, 374.0], [60.6, 374.0], [60.7, 374.0], [60.8, 374.0], [60.9, 374.0], [61.0, 374.0], [61.1, 374.0], [61.2, 374.0], [61.3, 374.0], [61.4, 375.0], [61.5, 375.0], [61.6, 375.0], [61.7, 375.0], [61.8, 375.0], [61.9, 375.0], [62.0, 375.0], [62.1, 375.0], [62.2, 375.0], [62.3, 376.0], [62.4, 376.0], [62.5, 376.0], [62.6, 376.0], [62.7, 376.0], [62.8, 376.0], [62.9, 376.0], [63.0, 376.0], [63.1, 377.0], [63.2, 377.0], [63.3, 377.0], [63.4, 377.0], [63.5, 377.0], [63.6, 377.0], [63.7, 377.0], [63.8, 378.0], [63.9, 378.0], [64.0, 378.0], [64.1, 378.0], [64.2, 378.0], [64.3, 378.0], [64.4, 378.0], [64.5, 378.0], [64.6, 379.0], [64.7, 379.0], [64.8, 379.0], [64.9, 379.0], [65.0, 379.0], [65.1, 379.0], [65.2, 379.0], [65.3, 379.0], [65.4, 379.0], [65.5, 380.0], [65.6, 380.0], [65.7, 380.0], [65.8, 380.0], [65.9, 380.0], [66.0, 380.0], [66.1, 380.0], [66.2, 380.0], [66.3, 380.0], [66.4, 381.0], [66.5, 381.0], [66.6, 381.0], [66.7, 381.0], [66.8, 381.0], [66.9, 381.0], [67.0, 381.0], [67.1, 381.0], [67.2, 382.0], [67.3, 382.0], [67.4, 382.0], [67.5, 382.0], [67.6, 382.0], [67.7, 382.0], [67.8, 382.0], [67.9, 382.0], [68.0, 382.0], [68.1, 382.0], [68.2, 383.0], [68.3, 383.0], [68.4, 383.0], [68.5, 383.0], [68.6, 383.0], [68.7, 383.0], [68.8, 383.0], [68.9, 383.0], [69.0, 383.0], [69.1, 384.0], [69.2, 384.0], [69.3, 384.0], [69.4, 384.0], [69.5, 384.0], [69.6, 384.0], [69.7, 384.0], [69.8, 384.0], [69.9, 385.0], [70.0, 385.0], [70.1, 385.0], [70.2, 385.0], [70.3, 385.0], [70.4, 385.0], [70.5, 385.0], [70.6, 385.0], [70.7, 386.0], [70.8, 386.0], [70.9, 386.0], [71.0, 386.0], [71.1, 386.0], [71.2, 386.0], [71.3, 386.0], [71.4, 387.0], [71.5, 387.0], [71.6, 387.0], [71.7, 387.0], [71.8, 387.0], [71.9, 387.0], [72.0, 387.0], [72.1, 387.0], [72.2, 387.0], [72.3, 387.0], [72.4, 388.0], [72.5, 388.0], [72.6, 388.0], [72.7, 388.0], [72.8, 388.0], [72.9, 388.0], [73.0, 388.0], [73.1, 388.0], [73.2, 388.0], [73.3, 388.0], [73.4, 389.0], [73.5, 389.0], [73.6, 389.0], [73.7, 389.0], [73.8, 389.0], [73.9, 389.0], [74.0, 389.0], [74.1, 389.0], [74.2, 389.0], [74.3, 390.0], [74.4, 390.0], [74.5, 390.0], [74.6, 390.0], [74.7, 390.0], [74.8, 390.0], [74.9, 390.0], [75.0, 390.0], [75.1, 391.0], [75.2, 391.0], [75.3, 391.0], [75.4, 391.0], [75.5, 391.0], [75.6, 391.0], [75.7, 391.0], [75.8, 392.0], [75.9, 392.0], [76.0, 392.0], [76.1, 392.0], [76.2, 392.0], [76.3, 392.0], [76.4, 392.0], [76.5, 392.0], [76.6, 393.0], [76.7, 393.0], [76.8, 393.0], [76.9, 393.0], [77.0, 393.0], [77.1, 393.0], [77.2, 393.0], [77.3, 394.0], [77.4, 394.0], [77.5, 394.0], [77.6, 394.0], [77.7, 394.0], [77.8, 394.0], [77.9, 394.0], [78.0, 395.0], [78.1, 395.0], [78.2, 395.0], [78.3, 395.0], [78.4, 395.0], [78.5, 395.0], [78.6, 396.0], [78.7, 396.0], [78.8, 396.0], [78.9, 396.0], [79.0, 396.0], [79.1, 396.0], [79.2, 397.0], [79.3, 397.0], [79.4, 397.0], [79.5, 397.0], [79.6, 397.0], [79.7, 397.0], [79.8, 397.0], [79.9, 397.0], [80.0, 398.0], [80.1, 398.0], [80.2, 398.0], [80.3, 398.0], [80.4, 398.0], [80.5, 398.0], [80.6, 398.0], [80.7, 398.0], [80.8, 398.0], [80.9, 399.0], [81.0, 399.0], [81.1, 399.0], [81.2, 399.0], [81.3, 399.0], [81.4, 399.0], [81.5, 399.0], [81.6, 399.0], [81.7, 399.0], [81.8, 400.0], [81.9, 400.0], [82.0, 400.0], [82.1, 400.0], [82.2, 400.0], [82.3, 400.0], [82.4, 400.0], [82.5, 400.0], [82.6, 401.0], [82.7, 401.0], [82.8, 401.0], [82.9, 401.0], [83.0, 401.0], [83.1, 401.0], [83.2, 402.0], [83.3, 402.0], [83.4, 402.0], [83.5, 402.0], [83.6, 402.0], [83.7, 402.0], [83.8, 402.0], [83.9, 402.0], [84.0, 403.0], [84.1, 403.0], [84.2, 403.0], [84.3, 403.0], [84.4, 403.0], [84.5, 403.0], [84.6, 403.0], [84.7, 404.0], [84.8, 404.0], [84.9, 404.0], [85.0, 404.0], [85.1, 404.0], [85.2, 404.0], [85.3, 404.0], [85.4, 405.0], [85.5, 405.0], [85.6, 405.0], [85.7, 405.0], [85.8, 405.0], [85.9, 405.0], [86.0, 405.0], [86.1, 406.0], [86.2, 406.0], [86.3, 406.0], [86.4, 406.0], [86.5, 406.0], [86.6, 406.0], [86.7, 407.0], [86.8, 407.0], [86.9, 407.0], [87.0, 407.0], [87.1, 407.0], [87.2, 407.0], [87.3, 408.0], [87.4, 408.0], [87.5, 408.0], [87.6, 408.0], [87.7, 408.0], [87.8, 408.0], [87.9, 408.0], [88.0, 409.0], [88.1, 409.0], [88.2, 409.0], [88.3, 409.0], [88.4, 409.0], [88.5, 409.0], [88.6, 409.0], [88.7, 410.0], [88.8, 410.0], [88.9, 410.0], [89.0, 410.0], [89.1, 410.0], [89.2, 410.0], [89.3, 411.0], [89.4, 411.0], [89.5, 411.0], [89.6, 411.0], [89.7, 411.0], [89.8, 412.0], [89.9, 412.0], [90.0, 412.0], [90.1, 412.0], [90.2, 412.0], [90.3, 412.0], [90.4, 412.0], [90.5, 413.0], [90.6, 413.0], [90.7, 413.0], [90.8, 413.0], [90.9, 413.0], [91.0, 413.0], [91.1, 414.0], [91.2, 414.0], [91.3, 414.0], [91.4, 414.0], [91.5, 414.0], [91.6, 414.0], [91.7, 414.0], [91.8, 415.0], [91.9, 415.0], [92.0, 415.0], [92.1, 415.0], [92.2, 415.0], [92.3, 415.0], [92.4, 415.0], [92.5, 416.0], [92.6, 416.0], [92.7, 416.0], [92.8, 416.0], [92.9, 416.0], [93.0, 417.0], [93.1, 417.0], [93.2, 417.0], [93.3, 417.0], [93.4, 417.0], [93.5, 418.0], [93.6, 418.0], [93.7, 418.0], [93.8, 418.0], [93.9, 419.0], [94.0, 419.0], [94.1, 419.0], [94.2, 419.0], [94.3, 420.0], [94.4, 420.0], [94.5, 420.0], [94.6, 421.0], [94.7, 421.0], [94.8, 421.0], [94.9, 422.0], [95.0, 422.0], [95.1, 422.0], [95.2, 423.0], [95.3, 423.0], [95.4, 423.0], [95.5, 424.0], [95.6, 424.0], [95.7, 425.0], [95.8, 425.0], [95.9, 425.0], [96.0, 426.0], [96.1, 426.0], [96.2, 427.0], [96.3, 427.0], [96.4, 428.0], [96.5, 428.0], [96.6, 428.0], [96.7, 429.0], [96.8, 430.0], [96.9, 430.0], [97.0, 431.0], [97.1, 431.0], [97.2, 432.0], [97.3, 432.0], [97.4, 433.0], [97.5, 433.0], [97.6, 434.0], [97.7, 435.0], [97.8, 435.0], [97.9, 436.0], [98.0, 438.0], [98.1, 439.0], [98.2, 440.0], [98.3, 442.0], [98.4, 443.0], [98.5, 444.0], [98.6, 445.0], [98.7, 446.0], [98.8, 447.0], [98.9, 448.0], [99.0, 449.0], [99.1, 450.0], [99.2, 451.0], [99.3, 452.0], [99.4, 452.0], [99.5, 453.0], [99.6, 455.0], [99.7, 456.0], [99.8, 458.0], [99.9, 460.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4196.0, "minX": 0.0, "maxY": 16523.0, "series": [{"data": [[0.0, 5335.0], [300.0, 16523.0], [100.0, 6308.0], [200.0, 4196.0], [400.0, 7230.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 39592.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 39592.0, "series": [{"data": [[0.0, 39592.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.26042230644288, "minX": 1.698525675E12, "maxY": 250.0, "series": [{"data": [[1.69852568E12, 50.11774553571431], [1.6985257E12, 216.3718030690535], [1.69852572E12, 250.0], [1.698525675E12, 16.26042230644288], [1.698525685E12, 91.17847452517333], [1.698525705E12, 247.96360759493624], [1.698525725E12, 250.0], [1.69852569E12, 133.23132065067512], [1.69852571E12, 250.0], [1.69852573E12, 250.0], [1.698525695E12, 174.23840698308774], [1.698525715E12, 250.0], [1.698525735E12, 226.5912847483097]], "isOverall": false, "label": "MinimalMeet-express", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698525735E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.1875, "minX": 1.0, "maxY": 421.10810810810796, "series": [{"data": [[2.0, 19.115384615384613], [3.0, 13.1875], [4.0, 14.169811320754715], [5.0, 14.54098360655738], [6.0, 20.680851063829785], [7.0, 19.305084745762713], [8.0, 18.676923076923078], [9.0, 21.13846153846154], [10.0, 19.675675675675677], [11.0, 27.150000000000002], [12.0, 21.79746835443038], [13.0, 25.30555555555555], [14.0, 25.736842105263165], [15.0, 26.294871794871785], [16.0, 30.249999999999996], [17.0, 29.197530864197525], [18.0, 32.064935064935064], [19.0, 35.25714285714285], [20.0, 31.639534883720927], [21.0, 31.758620689655185], [22.0, 33.46590909090909], [23.0, 49.09803921568627], [24.0, 55.15384615384616], [25.0, 49.85294117647058], [26.0, 42.14999999999999], [27.0, 43.873417721518976], [28.0, 51.69999999999999], [29.0, 48.41666666666666], [30.0, 45.53191489361702], [31.0, 41.0], [32.0, 44.5744680851064], [33.0, 46.48351648351649], [34.0, 48.75280898876407], [35.0, 51.47619047619047], [36.0, 79.3728813559322], [37.0, 56.20238095238095], [38.0, 59.32926829268294], [39.0, 58.32142857142857], [40.0, 56.93181818181821], [41.0, 61.48780487804878], [42.0, 71.98717948717947], [43.0, 58.094736842105256], [44.0, 67.69620253164555], [45.0, 66.9404761904762], [46.0, 63.64044943820226], [47.0, 66.85106382978724], [48.0, 59.811881188118804], [49.0, 69.96385542168673], [50.0, 72.83146067415734], [51.0, 69.71134020618555], [52.0, 100.36956521739131], [53.0, 101.01333333333329], [54.0, 85.97674418604646], [55.0, 75.79569892473123], [56.0, 78.35294117647057], [57.0, 74.09374999999999], [58.0, 88.59210526315788], [59.0, 85.64044943820224], [60.0, 88.98780487804882], [61.0, 89.25555555555556], [62.0, 78.59595959595958], [63.0, 75.3106796116505], [64.0, 78.65686274509802], [65.0, 100.16216216216218], [66.0, 89.13999999999997], [67.0, 84.36170212765954], [68.0, 93.40217391304347], [69.0, 86.1818181818182], [70.0, 96.89411764705878], [71.0, 105.41463414634144], [72.0, 113.11999999999999], [73.0, 106.48913043478261], [74.0, 107.62025316455696], [75.0, 110.46590909090912], [76.0, 112.34177215189874], [77.0, 123.88000000000001], [78.0, 119.9756097560975], [79.0, 116.16470588235295], [80.0, 122.6666666666667], [81.0, 147.40625], [82.0, 141.11999999999995], [83.0, 137.0379746835443], [84.0, 114.04166666666667], [85.0, 120.18987341772153], [86.0, 121.75531914893622], [87.0, 113.28421052631577], [88.0, 108.55000000000001], [89.0, 118.17441860465115], [90.0, 133.15384615384613], [91.0, 142.2368421052631], [92.0, 148.17721518987338], [93.0, 148.34210526315783], [94.0, 144.2705882352941], [95.0, 126.55102040816324], [96.0, 117.65656565656562], [97.0, 141.21666666666667], [98.0, 168.4883720930232], [99.0, 137.6], [100.0, 146.39999999999992], [101.0, 173.06153846153848], [102.0, 184.79999999999995], [103.0, 214.07317073170728], [104.0, 239.21052631578945], [105.0, 200.5168539325843], [106.0, 138.11578947368417], [107.0, 133.6862745098039], [108.0, 132.03092783505156], [109.0, 138.421052631579], [110.0, 167.21428571428578], [111.0, 215.43750000000009], [112.0, 208.72058823529417], [113.0, 204.32857142857145], [114.0, 173.2142857142857], [115.0, 143.48], [116.0, 141.70833333333334], [117.0, 143.47], [118.0, 145.93939393939397], [119.0, 147.79591836734699], [120.0, 149.09278350515464], [121.0, 148.47422680412367], [122.0, 175.60000000000002], [123.0, 211.6769230769231], [124.0, 238.8448275862069], [125.0, 235.46835443037972], [126.0, 230.4262295081967], [127.0, 203.59782608695653], [128.0, 164.9191919191919], [129.0, 156.82000000000005], [130.0, 160.52525252525254], [131.0, 157.35922330097083], [132.0, 163.4222222222222], [133.0, 177.38043478260872], [134.0, 182.81249999999991], [135.0, 212.79104477611943], [136.0, 225.18292682926835], [137.0, 196.55789473684214], [138.0, 178.66292134831457], [139.0, 193.0888888888889], [140.0, 186.76842105263154], [141.0, 179.19565217391306], [142.0, 185.27272727272725], [143.0, 194.978947368421], [144.0, 189.45652173913038], [145.0, 183.1354166666667], [146.0, 202.26153846153846], [147.0, 261.4761904761906], [148.0, 255.52688172043017], [149.0, 196.2527472527473], [150.0, 195.85106382978722], [151.0, 199.04444444444448], [152.0, 201.12244897959187], [153.0, 190.22680412371128], [154.0, 186.53921568627447], [155.0, 184.44444444444446], [156.0, 189.95000000000002], [157.0, 199.6842105263158], [158.0, 239.2564102564103], [159.0, 244.86363636363637], [160.0, 218.16304347826087], [161.0, 211.24742268041237], [162.0, 210.06666666666675], [163.0, 206.78217821782178], [164.0, 203.375], [165.0, 204.02040816326524], [166.0, 213.34482758620692], [167.0, 232.19736842105266], [168.0, 244.27173913043478], [169.0, 226.22330097087385], [170.0, 211.58241758241755], [171.0, 214.9175257731958], [172.0, 222.4705882352941], [173.0, 241.31707317073165], [174.0, 256.06024096385534], [175.0, 250.9325842696629], [176.0, 240.55555555555557], [177.0, 234.98947368421054], [178.0, 223.25000000000006], [179.0, 222.3535353535353], [180.0, 228.52222222222224], [181.0, 238.56521739130434], [182.0, 239.7065217391305], [183.0, 235.64835164835165], [184.0, 239.8936170212766], [185.0, 240.36170212765958], [186.0, 239.37113402061857], [187.0, 233.27835051546387], [188.0, 252.9620253164556], [189.0, 258.15053763440864], [190.0, 253.75308641975315], [191.0, 270.46913580246905], [192.0, 296.1515151515152], [193.0, 319.0416666666667], [194.0, 327.5479452054795], [195.0, 329.7164179104478], [196.0, 334.0833333333335], [197.0, 341.98684210526324], [198.0, 318.1585365853659], [199.0, 307.2222222222222], [200.0, 310.6578947368421], [201.0, 324.99999999999994], [202.0, 320.5875], [203.0, 316.2247191011236], [204.0, 308.8933333333334], [205.0, 305.56962025316443], [206.0, 303.88888888888897], [207.0, 307.4556962025316], [208.0, 309.36249999999995], [209.0, 326.14492753623193], [210.0, 337.3766233766235], [211.0, 344.8181818181818], [212.0, 344.12903225806457], [213.0, 346.89473684210526], [214.0, 421.10810810810796], [215.0, 398.88172043010746], [216.0, 373.53571428571394], [217.0, 306.1851851851852], [218.0, 319.283950617284], [219.0, 325.9624999999999], [220.0, 327.0121951219513], [221.0, 325.14814814814827], [222.0, 333.1230769230769], [223.0, 362.25000000000017], [224.0, 378.66216216216213], [225.0, 383.3918918918918], [226.0, 367.7945205479451], [227.0, 367.6388888888889], [228.0, 374.1558441558443], [229.0, 365.8148148148148], [230.0, 351.36470588235295], [231.0, 334.87058823529406], [232.0, 333.6103896103896], [233.0, 346.3636363636363], [234.0, 360.0533333333332], [235.0, 373.3243243243244], [236.0, 376.8051948051948], [237.0, 384.67741935483855], [238.0, 389.5764705882352], [239.0, 374.93023255813944], [240.0, 351.13793103448273], [241.0, 340.2692307692308], [242.0, 361.1739130434782], [243.0, 381.33749999999986], [244.0, 389.09876543209873], [245.0, 393.4225352112678], [246.0, 381.01176470588246], [247.0, 384.090909090909], [248.0, 371.0217391304348], [249.0, 368.07594936708864], [250.0, 391.9069222355323], [1.0, 307.0]], "isOverall": false, "label": "GET /meetings", "isController": false}, {"data": [[186.37732370175837, 285.5394776722581]], "isOverall": false, "label": "GET /meetings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 37534.2, "minX": 1.698525675E12, "maxY": 1.53114156E7, "series": [{"data": [[1.69852568E12, 1.49689344E7], [1.6985257E12, 1.30644048E7], [1.69852572E12, 1.34653584E7], [1.698525675E12, 7714180.2], [1.698525685E12, 1.38537822E7], [1.698525705E12, 1.3198056E7], [1.698525725E12, 1.31395836E7], [1.69852569E12, 1.51485282E7], [1.69852571E12, 1.3448652E7], [1.69852573E12, 1.34945946E7], [1.698525695E12, 1.53114156E7], [1.698525715E12, 1.29934026E7], [1.698525735E12, 5559054.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69852568E12, 101068.8], [1.6985257E12, 88209.6], [1.69852572E12, 90916.8], [1.698525675E12, 52085.4], [1.698525685E12, 93539.4], [1.698525705E12, 89112.0], [1.698525725E12, 88717.2], [1.69852569E12, 102281.4], [1.69852571E12, 90804.0], [1.69852573E12, 91114.2], [1.698525695E12, 103381.2], [1.698525715E12, 87730.2], [1.698525735E12, 37534.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698525735E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.361126150514313, "minX": 1.698525675E12, "maxY": 398.30633236901275, "series": [{"data": [[1.69852568E12, 68.35770089285714], [1.6985257E12, 340.56202046035844], [1.69852572E12, 390.39454094292773], [1.698525675E12, 26.361126150514313], [1.698525685E12, 135.4048839312633], [1.698525705E12, 392.6012658227848], [1.698525725E12, 397.8429752066113], [1.69852569E12, 182.33195478356762], [1.69852571E12, 388.3819875776405], [1.69852573E12, 385.3358093469514], [1.698525695E12, 232.99208947081283], [1.698525715E12, 398.30633236901275], [1.698525735E12, 372.58151765589747]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698525735E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 26.305901461829993, "minX": 1.698525675E12, "maxY": 398.2751526840246, "series": [{"data": [[1.69852568E12, 68.32672991071436], [1.6985257E12, 340.5303708439902], [1.69852572E12, 390.3669354838719], [1.698525675E12, 26.305901461829993], [1.698525685E12, 135.36991257160093], [1.698525705E12, 392.5623417721521], [1.698525725E12, 397.817546090273], [1.69852569E12, 182.304935208161], [1.69852571E12, 388.35527950310535], [1.69852573E12, 385.3060971835339], [1.698525695E12, 232.9669939989089], [1.698525715E12, 398.2751526840246], [1.698525735E12, 372.55822689706974]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698525735E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.8366066557555912, "minX": 1.698525675E12, "maxY": 1.029778018408232, "series": [{"data": [[1.69852568E12, 0.8808593749999988], [1.6985257E12, 0.9609974424552439], [1.69852572E12, 0.9571960297766746], [1.698525675E12, 1.029778018408232], [1.698525685E12, 0.9339764847753994], [1.698525705E12, 0.9781645569620246], [1.698525725E12, 0.9599491417673238], [1.69852569E12, 0.8897160187482759], [1.69852571E12, 0.9487577639751555], [1.69852573E12, 0.9541937480656131], [1.698525695E12, 0.8366066557555912], [1.698525715E12, 0.9675345548055287], [1.698525735E12, 0.9211119459053346]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698525735E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.698525675E12, "maxY": 465.0, "series": [{"data": [[1.69852568E12, 121.0], [1.6985257E12, 428.0], [1.69852572E12, 459.0], [1.698525675E12, 89.0], [1.698525685E12, 260.0], [1.698525705E12, 457.0], [1.698525725E12, 465.0], [1.69852569E12, 277.0], [1.69852571E12, 440.0], [1.69852573E12, 430.0], [1.698525695E12, 335.0], [1.698525715E12, 460.0], [1.698525735E12, 410.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69852568E12, 33.0], [1.6985257E12, 292.0], [1.69852572E12, 349.0], [1.698525675E12, 5.0], [1.698525685E12, 95.0], [1.698525705E12, 329.0], [1.698525725E12, 345.0], [1.69852569E12, 135.0], [1.69852571E12, 349.0], [1.69852573E12, 343.0], [1.698525695E12, 179.0], [1.698525715E12, 350.0], [1.698525735E12, 307.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69852568E12, 91.0], [1.6985257E12, 377.0], [1.69852572E12, 423.0], [1.698525675E12, 45.0], [1.698525685E12, 181.0], [1.698525705E12, 427.0], [1.698525725E12, 434.0], [1.69852569E12, 223.0], [1.69852571E12, 413.0], [1.69852573E12, 413.0], [1.698525695E12, 262.0], [1.698525715E12, 431.0], [1.698525735E12, 396.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69852568E12, 111.0], [1.6985257E12, 418.0], [1.69852572E12, 455.0], [1.698525675E12, 75.03999999999996], [1.698525685E12, 238.0], [1.698525705E12, 452.0], [1.698525725E12, 460.0], [1.69852569E12, 267.0], [1.69852571E12, 427.0], [1.69852573E12, 426.0], [1.698525695E12, 330.0], [1.698525715E12, 455.0], [1.698525735E12, 407.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69852568E12, 69.0], [1.6985257E12, 335.0], [1.69852572E12, 388.0], [1.698525675E12, 24.0], [1.698525685E12, 129.0], [1.698525705E12, 388.0], [1.698525725E12, 396.0], [1.69852569E12, 184.0], [1.69852571E12, 390.0], [1.69852573E12, 385.0], [1.698525695E12, 233.0], [1.698525715E12, 402.0], [1.698525735E12, 372.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69852568E12, 97.0], [1.6985257E12, 384.0], [1.69852572E12, 445.0], [1.698525675E12, 49.59999999999991], [1.698525685E12, 209.0], [1.698525705E12, 439.0], [1.698525725E12, 448.0], [1.69852569E12, 239.0], [1.69852571E12, 418.0], [1.69852573E12, 417.0], [1.698525695E12, 319.0], [1.698525715E12, 438.0], [1.698525735E12, 400.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698525735E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 90.0, "maxY": 418.0, "series": [{"data": [[517.0, 14.0], [607.0, 39.0], [589.0, 156.0], [606.0, 368.0], [586.0, 418.0], [595.0, 409.0], [590.0, 411.0], [634.0, 321.0], [633.0, 354.0], [608.0, 400.0], [629.0, 318.0], [626.0, 309.0], [638.0, 370.0], [625.0, 393.0], [621.0, 407.0], [622.0, 404.0], [620.0, 411.0], [617.0, 402.0], [631.0, 378.0], [647.0, 396.0], [640.0, 195.5], [653.0, 380.0], [648.0, 372.5], [649.0, 398.0], [650.0, 377.5], [652.0, 374.0], [654.0, 388.0], [659.0, 381.0], [660.0, 363.0], [641.0, 396.0], [657.0, 373.0], [656.0, 388.0], [665.0, 391.0], [671.0, 382.0], [643.0, 395.0], [696.0, 53.0], [686.0, 66.0], [672.0, 233.5], [673.0, 120.0], [679.0, 137.0], [676.0, 383.0], [734.0, 78.0], [704.0, 132.0], [735.0, 173.0], [720.0, 197.0], [756.0, 183.0], [750.0, 208.0], [763.0, 209.0], [744.0, 234.0], [772.0, 82.0], [776.0, 144.0], [775.0, 236.0], [90.0, 7.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 776.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 90.0, "maxY": 418.0, "series": [{"data": [[517.0, 14.0], [607.0, 39.0], [589.0, 156.0], [606.0, 368.0], [586.0, 418.0], [595.0, 409.0], [590.0, 411.0], [634.0, 321.0], [633.0, 354.0], [608.0, 400.0], [629.0, 318.0], [626.0, 309.0], [638.0, 370.0], [625.0, 393.0], [621.0, 407.0], [622.0, 404.0], [620.0, 411.0], [617.0, 402.0], [631.0, 378.0], [647.0, 396.0], [640.0, 195.0], [653.0, 380.0], [648.0, 372.5], [649.0, 398.0], [650.0, 377.5], [652.0, 374.0], [654.0, 388.0], [659.0, 380.0], [660.0, 363.0], [641.0, 396.0], [657.0, 373.0], [656.0, 388.0], [665.0, 391.0], [671.0, 382.0], [643.0, 395.0], [696.0, 53.0], [686.0, 66.0], [672.0, 233.5], [673.0, 120.0], [679.0, 137.0], [676.0, 383.0], [734.0, 78.0], [704.0, 132.0], [735.0, 173.0], [720.0, 197.0], [756.0, 183.0], [750.0, 208.0], [763.0, 209.0], [744.0, 234.0], [772.0, 82.0], [776.0, 144.0], [775.0, 236.0], [90.0, 7.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 776.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 216.2, "minX": 1.698525675E12, "maxY": 741.4, "series": [{"data": [[1.69852568E12, 725.2], [1.6985257E12, 634.0], [1.69852572E12, 644.8], [1.698525675E12, 375.2], [1.698525685E12, 671.6], [1.698525705E12, 634.6], [1.698525725E12, 629.2], [1.69852569E12, 733.8], [1.69852571E12, 644.0], [1.69852573E12, 646.2], [1.698525695E12, 741.4], [1.698525715E12, 622.2], [1.698525735E12, 216.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698525735E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 266.2, "minX": 1.698525675E12, "maxY": 733.2, "series": [{"data": [[1.69852568E12, 716.8], [1.6985257E12, 625.6], [1.69852572E12, 644.8], [1.698525675E12, 369.4], [1.698525685E12, 663.4], [1.698525705E12, 632.0], [1.698525725E12, 629.2], [1.69852569E12, 725.4], [1.69852571E12, 644.0], [1.69852573E12, 646.2], [1.698525695E12, 733.2], [1.698525715E12, 622.2], [1.698525735E12, 266.2]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698525735E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 266.2, "minX": 1.698525675E12, "maxY": 733.2, "series": [{"data": [[1.69852568E12, 716.8], [1.6985257E12, 625.6], [1.69852572E12, 644.8], [1.698525675E12, 369.4], [1.698525685E12, 663.4], [1.698525705E12, 632.0], [1.698525725E12, 629.2], [1.69852569E12, 725.4], [1.69852571E12, 644.0], [1.69852573E12, 646.2], [1.698525695E12, 733.2], [1.698525715E12, 622.2], [1.698525735E12, 266.2]], "isOverall": false, "label": "GET /meetings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698525735E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 266.2, "minX": 1.698525675E12, "maxY": 733.2, "series": [{"data": [[1.69852568E12, 716.8], [1.6985257E12, 625.6], [1.69852572E12, 644.8], [1.698525675E12, 369.4], [1.698525685E12, 663.4], [1.698525705E12, 632.0], [1.698525725E12, 629.2], [1.69852569E12, 725.4], [1.69852571E12, 644.0], [1.69852573E12, 646.2], [1.698525695E12, 733.2], [1.698525715E12, 622.2], [1.698525735E12, 266.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698525735E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

