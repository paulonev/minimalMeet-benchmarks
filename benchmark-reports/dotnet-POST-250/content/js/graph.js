/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 660.0, "series": [{"data": [[0.0, 8.0], [0.1, 10.0], [0.2, 11.0], [0.3, 12.0], [0.4, 12.0], [0.5, 13.0], [0.6, 14.0], [0.7, 14.0], [0.8, 15.0], [0.9, 15.0], [1.0, 16.0], [1.1, 16.0], [1.2, 17.0], [1.3, 17.0], [1.4, 17.0], [1.5, 18.0], [1.6, 18.0], [1.7, 19.0], [1.8, 20.0], [1.9, 20.0], [2.0, 21.0], [2.1, 22.0], [2.2, 22.0], [2.3, 23.0], [2.4, 24.0], [2.5, 25.0], [2.6, 26.0], [2.7, 27.0], [2.8, 28.0], [2.9, 29.0], [3.0, 30.0], [3.1, 31.0], [3.2, 31.0], [3.3, 32.0], [3.4, 32.0], [3.5, 33.0], [3.6, 33.0], [3.7, 34.0], [3.8, 34.0], [3.9, 35.0], [4.0, 35.0], [4.1, 36.0], [4.2, 36.0], [4.3, 36.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 38.0], [4.8, 38.0], [4.9, 39.0], [5.0, 39.0], [5.1, 40.0], [5.2, 40.0], [5.3, 41.0], [5.4, 41.0], [5.5, 42.0], [5.6, 42.0], [5.7, 42.0], [5.8, 43.0], [5.9, 43.0], [6.0, 44.0], [6.1, 44.0], [6.2, 45.0], [6.3, 45.0], [6.4, 45.0], [6.5, 46.0], [6.6, 46.0], [6.7, 47.0], [6.8, 47.0], [6.9, 48.0], [7.0, 49.0], [7.1, 50.0], [7.2, 50.0], [7.3, 51.0], [7.4, 52.0], [7.5, 52.0], [7.6, 53.0], [7.7, 54.0], [7.8, 55.0], [7.9, 56.0], [8.0, 56.0], [8.1, 57.0], [8.2, 57.0], [8.3, 58.0], [8.4, 58.0], [8.5, 59.0], [8.6, 59.0], [8.7, 60.0], [8.8, 61.0], [8.9, 62.0], [9.0, 62.0], [9.1, 63.0], [9.2, 64.0], [9.3, 65.0], [9.4, 65.0], [9.5, 66.0], [9.6, 66.0], [9.7, 67.0], [9.8, 68.0], [9.9, 68.0], [10.0, 69.0], [10.1, 69.0], [10.2, 69.0], [10.3, 70.0], [10.4, 70.0], [10.5, 70.0], [10.6, 71.0], [10.7, 71.0], [10.8, 71.0], [10.9, 72.0], [11.0, 72.0], [11.1, 72.0], [11.2, 73.0], [11.3, 73.0], [11.4, 74.0], [11.5, 74.0], [11.6, 74.0], [11.7, 75.0], [11.8, 75.0], [11.9, 75.0], [12.0, 76.0], [12.1, 76.0], [12.2, 77.0], [12.3, 77.0], [12.4, 77.0], [12.5, 78.0], [12.6, 78.0], [12.7, 79.0], [12.8, 79.0], [12.9, 80.0], [13.0, 80.0], [13.1, 81.0], [13.2, 81.0], [13.3, 82.0], [13.4, 82.0], [13.5, 83.0], [13.6, 83.0], [13.7, 84.0], [13.8, 84.0], [13.9, 84.0], [14.0, 85.0], [14.1, 86.0], [14.2, 87.0], [14.3, 87.0], [14.4, 88.0], [14.5, 88.0], [14.6, 88.0], [14.7, 89.0], [14.8, 89.0], [14.9, 90.0], [15.0, 91.0], [15.1, 91.0], [15.2, 92.0], [15.3, 93.0], [15.4, 94.0], [15.5, 95.0], [15.6, 96.0], [15.7, 96.0], [15.8, 97.0], [15.9, 98.0], [16.0, 99.0], [16.1, 99.0], [16.2, 100.0], [16.3, 101.0], [16.4, 101.0], [16.5, 102.0], [16.6, 102.0], [16.7, 103.0], [16.8, 104.0], [16.9, 104.0], [17.0, 105.0], [17.1, 105.0], [17.2, 106.0], [17.3, 107.0], [17.4, 108.0], [17.5, 108.0], [17.6, 109.0], [17.7, 110.0], [17.8, 110.0], [17.9, 111.0], [18.0, 111.0], [18.1, 112.0], [18.2, 112.0], [18.3, 113.0], [18.4, 113.0], [18.5, 114.0], [18.6, 114.0], [18.7, 115.0], [18.8, 115.0], [18.9, 116.0], [19.0, 116.0], [19.1, 117.0], [19.2, 118.0], [19.3, 119.0], [19.4, 120.0], [19.5, 121.0], [19.6, 123.0], [19.7, 126.0], [19.8, 129.0], [19.9, 132.0], [20.0, 133.0], [20.1, 135.0], [20.2, 137.0], [20.3, 138.0], [20.4, 139.0], [20.5, 140.0], [20.6, 141.0], [20.7, 142.0], [20.8, 142.0], [20.9, 143.0], [21.0, 144.0], [21.1, 144.0], [21.2, 145.0], [21.3, 146.0], [21.4, 146.0], [21.5, 147.0], [21.6, 147.0], [21.7, 148.0], [21.8, 148.0], [21.9, 149.0], [22.0, 149.0], [22.1, 150.0], [22.2, 150.0], [22.3, 151.0], [22.4, 151.0], [22.5, 152.0], [22.6, 152.0], [22.7, 153.0], [22.8, 154.0], [22.9, 154.0], [23.0, 155.0], [23.1, 155.0], [23.2, 156.0], [23.3, 157.0], [23.4, 158.0], [23.5, 158.0], [23.6, 159.0], [23.7, 159.0], [23.8, 160.0], [23.9, 161.0], [24.0, 162.0], [24.1, 163.0], [24.2, 163.0], [24.3, 164.0], [24.4, 165.0], [24.5, 166.0], [24.6, 166.0], [24.7, 167.0], [24.8, 168.0], [24.9, 169.0], [25.0, 169.0], [25.1, 170.0], [25.2, 171.0], [25.3, 172.0], [25.4, 173.0], [25.5, 173.0], [25.6, 174.0], [25.7, 175.0], [25.8, 175.0], [25.9, 176.0], [26.0, 177.0], [26.1, 177.0], [26.2, 178.0], [26.3, 179.0], [26.4, 180.0], [26.5, 180.0], [26.6, 181.0], [26.7, 182.0], [26.8, 183.0], [26.9, 184.0], [27.0, 185.0], [27.1, 186.0], [27.2, 188.0], [27.3, 189.0], [27.4, 190.0], [27.5, 191.0], [27.6, 193.0], [27.7, 194.0], [27.8, 195.0], [27.9, 196.0], [28.0, 198.0], [28.1, 199.0], [28.2, 200.0], [28.3, 201.0], [28.4, 202.0], [28.5, 203.0], [28.6, 203.0], [28.7, 204.0], [28.8, 205.0], [28.9, 205.0], [29.0, 206.0], [29.1, 207.0], [29.2, 207.0], [29.3, 208.0], [29.4, 208.0], [29.5, 209.0], [29.6, 209.0], [29.7, 210.0], [29.8, 211.0], [29.9, 212.0], [30.0, 212.0], [30.1, 213.0], [30.2, 213.0], [30.3, 214.0], [30.4, 214.0], [30.5, 215.0], [30.6, 216.0], [30.7, 216.0], [30.8, 217.0], [30.9, 218.0], [31.0, 218.0], [31.1, 219.0], [31.2, 219.0], [31.3, 220.0], [31.4, 221.0], [31.5, 221.0], [31.6, 222.0], [31.7, 223.0], [31.8, 223.0], [31.9, 224.0], [32.0, 224.0], [32.1, 225.0], [32.2, 226.0], [32.3, 226.0], [32.4, 227.0], [32.5, 227.0], [32.6, 227.0], [32.7, 228.0], [32.8, 228.0], [32.9, 229.0], [33.0, 229.0], [33.1, 230.0], [33.2, 230.0], [33.3, 231.0], [33.4, 231.0], [33.5, 231.0], [33.6, 232.0], [33.7, 232.0], [33.8, 233.0], [33.9, 233.0], [34.0, 233.0], [34.1, 234.0], [34.2, 234.0], [34.3, 234.0], [34.4, 235.0], [34.5, 235.0], [34.6, 236.0], [34.7, 236.0], [34.8, 237.0], [34.9, 237.0], [35.0, 237.0], [35.1, 238.0], [35.2, 238.0], [35.3, 239.0], [35.4, 239.0], [35.5, 240.0], [35.6, 240.0], [35.7, 240.0], [35.8, 241.0], [35.9, 241.0], [36.0, 242.0], [36.1, 242.0], [36.2, 243.0], [36.3, 243.0], [36.4, 243.0], [36.5, 244.0], [36.6, 245.0], [36.7, 245.0], [36.8, 246.0], [36.9, 246.0], [37.0, 247.0], [37.1, 247.0], [37.2, 248.0], [37.3, 248.0], [37.4, 249.0], [37.5, 249.0], [37.6, 250.0], [37.7, 250.0], [37.8, 251.0], [37.9, 251.0], [38.0, 252.0], [38.1, 252.0], [38.2, 253.0], [38.3, 254.0], [38.4, 254.0], [38.5, 255.0], [38.6, 255.0], [38.7, 256.0], [38.8, 257.0], [38.9, 257.0], [39.0, 258.0], [39.1, 259.0], [39.2, 259.0], [39.3, 260.0], [39.4, 261.0], [39.5, 262.0], [39.6, 262.0], [39.7, 263.0], [39.8, 264.0], [39.9, 265.0], [40.0, 266.0], [40.1, 267.0], [40.2, 268.0], [40.3, 270.0], [40.4, 271.0], [40.5, 272.0], [40.6, 273.0], [40.7, 274.0], [40.8, 274.0], [40.9, 275.0], [41.0, 276.0], [41.1, 276.0], [41.2, 277.0], [41.3, 278.0], [41.4, 278.0], [41.5, 279.0], [41.6, 280.0], [41.7, 280.0], [41.8, 281.0], [41.9, 281.0], [42.0, 282.0], [42.1, 283.0], [42.2, 283.0], [42.3, 284.0], [42.4, 284.0], [42.5, 285.0], [42.6, 286.0], [42.7, 287.0], [42.8, 288.0], [42.9, 290.0], [43.0, 291.0], [43.1, 292.0], [43.2, 294.0], [43.3, 295.0], [43.4, 296.0], [43.5, 298.0], [43.6, 300.0], [43.7, 302.0], [43.8, 303.0], [43.9, 305.0], [44.0, 307.0], [44.1, 308.0], [44.2, 309.0], [44.3, 310.0], [44.4, 310.0], [44.5, 311.0], [44.6, 311.0], [44.7, 312.0], [44.8, 312.0], [44.9, 313.0], [45.0, 313.0], [45.1, 313.0], [45.2, 313.0], [45.3, 314.0], [45.4, 314.0], [45.5, 314.0], [45.6, 314.0], [45.7, 315.0], [45.8, 315.0], [45.9, 315.0], [46.0, 315.0], [46.1, 316.0], [46.2, 316.0], [46.3, 316.0], [46.4, 316.0], [46.5, 316.0], [46.6, 316.0], [46.7, 317.0], [46.8, 317.0], [46.9, 317.0], [47.0, 317.0], [47.1, 317.0], [47.2, 317.0], [47.3, 318.0], [47.4, 318.0], [47.5, 318.0], [47.6, 318.0], [47.7, 318.0], [47.8, 318.0], [47.9, 319.0], [48.0, 319.0], [48.1, 319.0], [48.2, 319.0], [48.3, 319.0], [48.4, 319.0], [48.5, 319.0], [48.6, 319.0], [48.7, 320.0], [48.8, 320.0], [48.9, 320.0], [49.0, 320.0], [49.1, 320.0], [49.2, 320.0], [49.3, 320.0], [49.4, 321.0], [49.5, 321.0], [49.6, 321.0], [49.7, 321.0], [49.8, 321.0], [49.9, 321.0], [50.0, 321.0], [50.1, 321.0], [50.2, 322.0], [50.3, 322.0], [50.4, 322.0], [50.5, 322.0], [50.6, 322.0], [50.7, 322.0], [50.8, 322.0], [50.9, 322.0], [51.0, 322.0], [51.1, 323.0], [51.2, 323.0], [51.3, 323.0], [51.4, 323.0], [51.5, 323.0], [51.6, 323.0], [51.7, 323.0], [51.8, 323.0], [51.9, 323.0], [52.0, 324.0], [52.1, 324.0], [52.2, 324.0], [52.3, 324.0], [52.4, 324.0], [52.5, 324.0], [52.6, 324.0], [52.7, 324.0], [52.8, 324.0], [52.9, 324.0], [53.0, 324.0], [53.1, 325.0], [53.2, 325.0], [53.3, 325.0], [53.4, 325.0], [53.5, 325.0], [53.6, 325.0], [53.7, 325.0], [53.8, 325.0], [53.9, 325.0], [54.0, 325.0], [54.1, 325.0], [54.2, 326.0], [54.3, 326.0], [54.4, 326.0], [54.5, 326.0], [54.6, 326.0], [54.7, 326.0], [54.8, 326.0], [54.9, 326.0], [55.0, 326.0], [55.1, 326.0], [55.2, 326.0], [55.3, 327.0], [55.4, 327.0], [55.5, 327.0], [55.6, 327.0], [55.7, 327.0], [55.8, 327.0], [55.9, 327.0], [56.0, 327.0], [56.1, 327.0], [56.2, 327.0], [56.3, 327.0], [56.4, 328.0], [56.5, 328.0], [56.6, 328.0], [56.7, 328.0], [56.8, 328.0], [56.9, 328.0], [57.0, 328.0], [57.1, 328.0], [57.2, 328.0], [57.3, 328.0], [57.4, 328.0], [57.5, 328.0], [57.6, 328.0], [57.7, 329.0], [57.8, 329.0], [57.9, 329.0], [58.0, 329.0], [58.1, 329.0], [58.2, 329.0], [58.3, 329.0], [58.4, 329.0], [58.5, 329.0], [58.6, 329.0], [58.7, 329.0], [58.8, 329.0], [58.9, 330.0], [59.0, 330.0], [59.1, 330.0], [59.2, 330.0], [59.3, 330.0], [59.4, 330.0], [59.5, 330.0], [59.6, 330.0], [59.7, 330.0], [59.8, 330.0], [59.9, 330.0], [60.0, 330.0], [60.1, 330.0], [60.2, 330.0], [60.3, 331.0], [60.4, 331.0], [60.5, 331.0], [60.6, 331.0], [60.7, 331.0], [60.8, 331.0], [60.9, 331.0], [61.0, 331.0], [61.1, 331.0], [61.2, 331.0], [61.3, 331.0], [61.4, 331.0], [61.5, 331.0], [61.6, 331.0], [61.7, 332.0], [61.8, 332.0], [61.9, 332.0], [62.0, 332.0], [62.1, 332.0], [62.2, 332.0], [62.3, 332.0], [62.4, 332.0], [62.5, 332.0], [62.6, 332.0], [62.7, 332.0], [62.8, 332.0], [62.9, 332.0], [63.0, 333.0], [63.1, 333.0], [63.2, 333.0], [63.3, 333.0], [63.4, 333.0], [63.5, 333.0], [63.6, 333.0], [63.7, 333.0], [63.8, 333.0], [63.9, 333.0], [64.0, 333.0], [64.1, 333.0], [64.2, 333.0], [64.3, 333.0], [64.4, 334.0], [64.5, 334.0], [64.6, 334.0], [64.7, 334.0], [64.8, 334.0], [64.9, 334.0], [65.0, 334.0], [65.1, 334.0], [65.2, 334.0], [65.3, 334.0], [65.4, 334.0], [65.5, 334.0], [65.6, 334.0], [65.7, 335.0], [65.8, 335.0], [65.9, 335.0], [66.0, 335.0], [66.1, 335.0], [66.2, 335.0], [66.3, 335.0], [66.4, 335.0], [66.5, 335.0], [66.6, 335.0], [66.7, 335.0], [66.8, 335.0], [66.9, 335.0], [67.0, 336.0], [67.1, 336.0], [67.2, 336.0], [67.3, 336.0], [67.4, 336.0], [67.5, 336.0], [67.6, 336.0], [67.7, 336.0], [67.8, 336.0], [67.9, 336.0], [68.0, 336.0], [68.1, 336.0], [68.2, 336.0], [68.3, 337.0], [68.4, 337.0], [68.5, 337.0], [68.6, 337.0], [68.7, 337.0], [68.8, 337.0], [68.9, 337.0], [69.0, 337.0], [69.1, 337.0], [69.2, 337.0], [69.3, 337.0], [69.4, 337.0], [69.5, 337.0], [69.6, 338.0], [69.7, 338.0], [69.8, 338.0], [69.9, 338.0], [70.0, 338.0], [70.1, 338.0], [70.2, 338.0], [70.3, 338.0], [70.4, 338.0], [70.5, 338.0], [70.6, 338.0], [70.7, 339.0], [70.8, 339.0], [70.9, 339.0], [71.0, 339.0], [71.1, 339.0], [71.2, 339.0], [71.3, 339.0], [71.4, 339.0], [71.5, 339.0], [71.6, 339.0], [71.7, 339.0], [71.8, 339.0], [71.9, 340.0], [72.0, 340.0], [72.1, 340.0], [72.2, 340.0], [72.3, 340.0], [72.4, 340.0], [72.5, 340.0], [72.6, 340.0], [72.7, 340.0], [72.8, 340.0], [72.9, 340.0], [73.0, 341.0], [73.1, 341.0], [73.2, 341.0], [73.3, 341.0], [73.4, 341.0], [73.5, 341.0], [73.6, 341.0], [73.7, 341.0], [73.8, 341.0], [73.9, 341.0], [74.0, 342.0], [74.1, 342.0], [74.2, 342.0], [74.3, 342.0], [74.4, 342.0], [74.5, 342.0], [74.6, 342.0], [74.7, 342.0], [74.8, 342.0], [74.9, 342.0], [75.0, 343.0], [75.1, 343.0], [75.2, 343.0], [75.3, 343.0], [75.4, 343.0], [75.5, 343.0], [75.6, 343.0], [75.7, 343.0], [75.8, 343.0], [75.9, 343.0], [76.0, 344.0], [76.1, 344.0], [76.2, 344.0], [76.3, 344.0], [76.4, 344.0], [76.5, 344.0], [76.6, 344.0], [76.7, 344.0], [76.8, 344.0], [76.9, 344.0], [77.0, 345.0], [77.1, 345.0], [77.2, 345.0], [77.3, 345.0], [77.4, 345.0], [77.5, 345.0], [77.6, 345.0], [77.7, 345.0], [77.8, 345.0], [77.9, 346.0], [78.0, 346.0], [78.1, 346.0], [78.2, 346.0], [78.3, 346.0], [78.4, 346.0], [78.5, 346.0], [78.6, 346.0], [78.7, 347.0], [78.8, 347.0], [78.9, 347.0], [79.0, 347.0], [79.1, 347.0], [79.2, 347.0], [79.3, 347.0], [79.4, 347.0], [79.5, 348.0], [79.6, 348.0], [79.7, 348.0], [79.8, 348.0], [79.9, 348.0], [80.0, 348.0], [80.1, 348.0], [80.2, 349.0], [80.3, 349.0], [80.4, 349.0], [80.5, 349.0], [80.6, 349.0], [80.7, 349.0], [80.8, 349.0], [80.9, 350.0], [81.0, 350.0], [81.1, 350.0], [81.2, 350.0], [81.3, 350.0], [81.4, 350.0], [81.5, 350.0], [81.6, 351.0], [81.7, 351.0], [81.8, 351.0], [81.9, 351.0], [82.0, 351.0], [82.1, 352.0], [82.2, 352.0], [82.3, 352.0], [82.4, 352.0], [82.5, 352.0], [82.6, 352.0], [82.7, 353.0], [82.8, 353.0], [82.9, 353.0], [83.0, 353.0], [83.1, 353.0], [83.2, 354.0], [83.3, 354.0], [83.4, 354.0], [83.5, 354.0], [83.6, 355.0], [83.7, 355.0], [83.8, 355.0], [83.9, 355.0], [84.0, 356.0], [84.1, 356.0], [84.2, 356.0], [84.3, 356.0], [84.4, 357.0], [84.5, 357.0], [84.6, 357.0], [84.7, 358.0], [84.8, 358.0], [84.9, 358.0], [85.0, 358.0], [85.1, 359.0], [85.2, 359.0], [85.3, 359.0], [85.4, 359.0], [85.5, 360.0], [85.6, 360.0], [85.7, 360.0], [85.8, 360.0], [85.9, 361.0], [86.0, 361.0], [86.1, 361.0], [86.2, 362.0], [86.3, 362.0], [86.4, 362.0], [86.5, 362.0], [86.6, 363.0], [86.7, 363.0], [86.8, 363.0], [86.9, 364.0], [87.0, 364.0], [87.1, 364.0], [87.2, 365.0], [87.3, 365.0], [87.4, 365.0], [87.5, 365.0], [87.6, 366.0], [87.7, 366.0], [87.8, 366.0], [87.9, 367.0], [88.0, 367.0], [88.1, 367.0], [88.2, 367.0], [88.3, 368.0], [88.4, 368.0], [88.5, 368.0], [88.6, 369.0], [88.7, 369.0], [88.8, 369.0], [88.9, 369.0], [89.0, 370.0], [89.1, 370.0], [89.2, 370.0], [89.3, 371.0], [89.4, 371.0], [89.5, 372.0], [89.6, 372.0], [89.7, 372.0], [89.8, 373.0], [89.9, 373.0], [90.0, 374.0], [90.1, 374.0], [90.2, 375.0], [90.3, 375.0], [90.4, 375.0], [90.5, 376.0], [90.6, 376.0], [90.7, 377.0], [90.8, 377.0], [90.9, 378.0], [91.0, 379.0], [91.1, 379.0], [91.2, 380.0], [91.3, 381.0], [91.4, 381.0], [91.5, 382.0], [91.6, 383.0], [91.7, 383.0], [91.8, 384.0], [91.9, 385.0], [92.0, 386.0], [92.1, 387.0], [92.2, 388.0], [92.3, 389.0], [92.4, 391.0], [92.5, 391.0], [92.6, 392.0], [92.7, 393.0], [92.8, 394.0], [92.9, 395.0], [93.0, 396.0], [93.1, 397.0], [93.2, 399.0], [93.3, 401.0], [93.4, 402.0], [93.5, 405.0], [93.6, 407.0], [93.7, 409.0], [93.8, 411.0], [93.9, 413.0], [94.0, 415.0], [94.1, 416.0], [94.2, 418.0], [94.3, 420.0], [94.4, 421.0], [94.5, 423.0], [94.6, 424.0], [94.7, 427.0], [94.8, 429.0], [94.9, 430.0], [95.0, 432.0], [95.1, 434.0], [95.2, 437.0], [95.3, 438.0], [95.4, 440.0], [95.5, 441.0], [95.6, 444.0], [95.7, 446.0], [95.8, 448.0], [95.9, 450.0], [96.0, 454.0], [96.1, 458.0], [96.2, 466.0], [96.3, 469.0], [96.4, 470.0], [96.5, 472.0], [96.6, 474.0], [96.7, 476.0], [96.8, 480.0], [96.9, 484.0], [97.0, 490.0], [97.1, 493.0], [97.2, 496.0], [97.3, 498.0], [97.4, 500.0], [97.5, 502.0], [97.6, 503.0], [97.7, 505.0], [97.8, 507.0], [97.9, 511.0], [98.0, 516.0], [98.1, 519.0], [98.2, 522.0], [98.3, 525.0], [98.4, 529.0], [98.5, 534.0], [98.6, 540.0], [98.7, 545.0], [98.8, 548.0], [98.9, 551.0], [99.0, 554.0], [99.1, 556.0], [99.2, 560.0], [99.3, 562.0], [99.4, 566.0], [99.5, 573.0], [99.6, 583.0], [99.7, 601.0], [99.8, 613.0], [99.9, 617.0]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 130.0, "minX": 0.0, "maxY": 21094.0, "series": [{"data": [[0.0, 6855.0], [300.0, 21094.0], [600.0, 130.0], [200.0, 6561.0], [100.0, 5102.0], [400.0, 1764.0], [500.0, 983.0]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1091.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 41398.0, "series": [{"data": [[0.0, 41398.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1091.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 23.53970936127071, "minX": 1.698524575E12, "maxY": 250.0, "series": [{"data": [[1.698524625E12, 250.0], [1.698524605E12, 249.96052265777013], [1.698524585E12, 101.86263440860205], [1.69852462E12, 250.0], [1.6985246E12, 228.3830894308946], [1.69852458E12, 61.88802017654484], [1.698524635E12, 185.86163522012578], [1.698524615E12, 250.0], [1.698524595E12, 185.58879781420794], [1.698524575E12, 23.53970936127071], [1.69852463E12, 250.0], [1.69852461E12, 250.0], [1.69852459E12, 143.84193827516577]], "isOverall": false, "label": "MinimalMeet-dotnet", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698524635E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10.788461538461537, "minX": 1.0, "maxY": 622.1354166666665, "series": [{"data": [[4.0, 98.42857142857143], [5.0, 10.788461538461537], [6.0, 11.421052631578947], [7.0, 13.129032258064512], [8.0, 34.81578947368421], [9.0, 18.043478260869563], [10.0, 15.506493506493513], [11.0, 16.90277777777778], [12.0, 19.416666666666664], [13.0, 17.41176470588235], [14.0, 21.79069767441861], [15.0, 20.021739130434785], [16.0, 34.29166666666666], [17.0, 24.114583333333332], [18.0, 22.795698924731173], [19.0, 29.5375], [20.0, 40.89655172413793], [21.0, 36.29577464788733], [22.0, 43.086206896551715], [23.0, 44.44067796610169], [24.0, 50.34408602150539], [25.0, 34.781249999999986], [26.0, 31.180851063829785], [27.0, 45.25], [28.0, 44.56578947368423], [29.0, 39.13636363636362], [30.0, 37.684210526315795], [31.0, 35.73076923076925], [32.0, 49.93103448275864], [33.0, 41.029999999999994], [34.0, 38.73333333333334], [35.0, 40.74226804123712], [36.0, 41.44660194174757], [37.0, 41.49999999999999], [38.0, 42.85436893203884], [39.0, 44.90384615384618], [40.0, 65.02912621359222], [41.0, 50.51], [42.0, 49.38095238095239], [43.0, 52.586956521739125], [44.0, 71.72727272727269], [45.0, 100.05000000000001], [46.0, 96.93749999999997], [47.0, 93.09859154929576], [48.0, 121.91666666666671], [49.0, 88.71428571428571], [50.0, 108.07272727272726], [51.0, 105.10606060606064], [52.0, 82.57777777777778], [53.0, 63.339805825242685], [54.0, 59.08620689655174], [55.0, 59.30701754385964], [56.0, 67.2457627118644], [57.0, 62.86607142857142], [58.0, 71.06315789473683], [59.0, 67.91262135922334], [60.0, 74.94059405940594], [61.0, 70.52083333333334], [62.0, 72.24761904761904], [63.0, 68.9259259259259], [64.0, 84.3771929824561], [65.0, 71.85087719298245], [66.0, 70.44339622641509], [67.0, 71.61607142857146], [68.0, 83.52747252747247], [69.0, 82.51376146788989], [70.0, 79.15238095238094], [71.0, 77.02830188679245], [72.0, 100.25742574257426], [73.0, 83.3760683760684], [74.0, 84.05769230769229], [75.0, 74.74380165289254], [76.0, 81.98130841121493], [77.0, 90.979797979798], [78.0, 88.61111111111111], [79.0, 85.59813084112146], [80.0, 109.57843137254902], [81.0, 104.15555555555555], [82.0, 98.52083333333334], [83.0, 99.5377358490566], [84.0, 96.89320388349515], [85.0, 106.42391304347822], [86.0, 110.76923076923073], [87.0, 111.8409090909091], [88.0, 160.56164383561642], [89.0, 125.29473684210524], [90.0, 114.09803921568627], [91.0, 108.75], [92.0, 103.84615384615381], [93.0, 113.45098039215686], [94.0, 121.17500000000004], [95.0, 115.65263157894738], [96.0, 133.39047619047622], [97.0, 112.64285714285711], [98.0, 114.43820224719097], [99.0, 144.64102564102566], [100.0, 154.88095238095238], [101.0, 140.0117647058824], [102.0, 154.08571428571435], [103.0, 173.10447761194024], [104.0, 176.80000000000004], [105.0, 144.19318181818187], [106.0, 154.9756097560975], [107.0, 163.67999999999998], [108.0, 146.00000000000003], [109.0, 143.03797468354435], [110.0, 152.3012048192771], [111.0, 150.34408602150543], [112.0, 161.38541666666677], [113.0, 156.6282051282051], [114.0, 159.2291666666666], [115.0, 149.1978021978022], [116.0, 146.9894736842106], [117.0, 142.35576923076925], [118.0, 153.74117647058824], [119.0, 162.83720930232562], [120.0, 167.87128712871282], [121.0, 151.63095238095235], [122.0, 175.28048780487808], [123.0, 181.05063291139246], [124.0, 176.79775280898875], [125.0, 171.42857142857147], [126.0, 177.23809523809524], [127.0, 176.40425531914897], [128.0, 179.86597938144325], [129.0, 168.27659574468075], [130.0, 176.71621621621625], [131.0, 193.7], [132.0, 188.37362637362634], [133.0, 179.8333333333334], [134.0, 178.08988764044938], [135.0, 184.69135802469143], [136.0, 202.07954545454538], [137.0, 195.3888888888889], [138.0, 203.66197183098592], [139.0, 209.125], [140.0, 209.33898305084736], [141.0, 231.51807228915655], [142.0, 220.67469879518075], [143.0, 199.8513513513513], [144.0, 217.80412371134014], [145.0, 212.76829268292684], [146.0, 224.13698630136986], [147.0, 247.87500000000003], [148.0, 238.77272727272725], [149.0, 202.6941176470588], [150.0, 216.75324675324674], [151.0, 225.19540229885052], [152.0, 218.57142857142864], [153.0, 209.76744186046508], [154.0, 208.5168539325843], [155.0, 210.03191489361694], [156.0, 209.8734177215191], [157.0, 228.33766233766238], [158.0, 235.26506024096383], [159.0, 215.4042553191489], [160.0, 236.79012345679018], [161.0, 236.0784313725491], [162.0, 218.50666666666663], [163.0, 218.21739130434787], [164.0, 221.48749999999998], [165.0, 234.6543209876544], [166.0, 245.44047619047626], [167.0, 239.10714285714286], [168.0, 238.54807692307696], [169.0, 223.0], [170.0, 231.46067415730334], [171.0, 246.59756097560984], [172.0, 235.21739130434787], [173.0, 233.1279069767442], [174.0, 231.0957446808511], [175.0, 220.33684210526306], [176.0, 236.33333333333337], [177.0, 234.19354838709677], [178.0, 237.46428571428564], [179.0, 243.82222222222222], [180.0, 245.34567901234567], [181.0, 245.81111111111113], [182.0, 249.7241379310345], [183.0, 245.6989247311828], [184.0, 246.90099009900987], [185.0, 237.6404494382022], [186.0, 245.62068965517238], [187.0, 249.9361702127659], [188.0, 246.90804597701148], [189.0, 257.82142857142856], [190.0, 266.4523809523809], [191.0, 268.4418604651164], [192.0, 266.07079646017695], [193.0, 258.75000000000006], [194.0, 272.297619047619], [195.0, 297.08219178082186], [196.0, 286.2826086956521], [197.0, 270.4444444444446], [198.0, 257.76666666666677], [199.0, 256.8043478260869], [200.0, 269.4077669902911], [201.0, 254.7802197802198], [202.0, 257.81609195402285], [203.0, 278.85057471264344], [204.0, 282.08988764044966], [205.0, 277.25000000000006], [206.0, 276.4302325581396], [207.0, 279.08988764044943], [208.0, 286.17708333333354], [209.0, 279.2999999999998], [210.0, 277.6813186813187], [211.0, 285.45000000000016], [212.0, 324.13043478260875], [213.0, 361.45833333333337], [214.0, 439.24489795918373], [215.0, 486.66666666666663], [216.0, 513.2033898305083], [217.0, 521.9230769230768], [218.0, 464.92045454545456], [219.0, 400.9365079365081], [220.0, 375.0], [221.0, 512.25], [222.0, 603.0], [223.0, 622.1354166666665], [224.0, 567.17], [225.0, 361.6808510638298], [226.0, 291.49494949494965], [227.0, 298.2894736842105], [228.0, 298.65979381443293], [229.0, 302.5753424657534], [230.0, 344.79687499999983], [231.0, 388.5423728813559], [232.0, 418.9610389610388], [233.0, 407.7586206896553], [234.0, 369.8767123287672], [235.0, 351.2124999999999], [236.0, 359.0602409638556], [237.0, 338.9696969696969], [238.0, 333.36986301369876], [239.0, 327.09473684210525], [240.0, 335.9310344827586], [241.0, 320.6907216494845], [242.0, 315.53260869565224], [243.0, 314.2068965517241], [244.0, 340.9873417721517], [245.0, 343.45121951219517], [246.0, 358.99999999999994], [247.0, 349.48837209302326], [248.0, 355.0126582278481], [249.0, 365.45833333333337], [250.0, 353.94812030075406], [1.0, 235.0]], "isOverall": false, "label": "POST /meetings", "isController": false}, {"data": [[187.20647697051115, 265.8586457671395]], "isOverall": false, "label": "POST /meetings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14977.8, "minX": 1.698524575E12, "maxY": 244244.0, "series": [{"data": [[1.698524625E12, 106320.4], [1.698524605E12, 112945.8], [1.698524585E12, 116193.2], [1.69852462E12, 114861.2], [1.6985246E12, 96555.0], [1.69852458E12, 123708.0], [1.698524635E12, 14977.8], [1.698524615E12, 117090.6], [1.698524595E12, 114924.0], [1.698524575E12, 92100.0], [1.69852463E12, 102081.4], [1.69852461E12, 111313.0], [1.69852459E12, 108863.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.698524625E12, 208577.6], [1.698524605E12, 221575.2], [1.698524585E12, 229152.0], [1.69852462E12, 225332.8], [1.6985246E12, 189420.0], [1.69852458E12, 244244.0], [1.698524635E12, 29383.2], [1.698524615E12, 229706.4], [1.698524595E12, 225456.0], [1.698524575E12, 182274.4], [1.69852463E12, 200261.6], [1.69852461E12, 218372.0], [1.69852459E12, 213567.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698524635E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 31.093274754984797, "minX": 1.698524575E12, "maxY": 382.0193786527225, "series": [{"data": [[1.698524625E12, 371.5129946839937], [1.698524605E12, 348.08979705310037], [1.698524585E12, 135.24086021505386], [1.69852462E12, 338.42919628212155], [1.6985246E12, 364.0052032520326], [1.69852458E12, 75.23102143757889], [1.698524635E12, 347.6415094339623], [1.698524615E12, 336.8463395012064], [1.698524595E12, 251.06366120218559], [1.698524575E12, 31.093274754984797], [1.69852463E12, 382.0193786527225], [1.69852461E12, 350.8155148095905], [1.69852459E12, 204.4880299971161]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698524635E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 31.08888137884421, "minX": 1.698524575E12, "maxY": 382.0193786527225, "series": [{"data": [[1.698524625E12, 371.5124040165373], [1.698524605E12, 348.08979705310037], [1.698524585E12, 135.2389784946237], [1.69852462E12, 338.4286495352655], [1.6985246E12, 364.0052032520326], [1.69852458E12, 75.22950819672111], [1.698524635E12, 347.6415094339623], [1.698524615E12, 336.8455349959772], [1.698524595E12, 251.06366120218559], [1.698524575E12, 31.08888137884421], [1.69852463E12, 382.0193786527225], [1.69852461E12, 350.8155148095905], [1.69852459E12, 204.48716469570252]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698524635E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.280162216965196, "minX": 1.698524575E12, "maxY": 1.6860215053763443, "series": [{"data": [[1.698524625E12, 1.5874187832250437], [1.698524605E12, 1.5657492354740088], [1.698524585E12, 1.6860215053763443], [1.69852462E12, 1.5218698742482208], [1.6985246E12, 1.5131707317073226], [1.69852458E12, 1.3160151324085738], [1.698524635E12, 1.6247379454926631], [1.698524615E12, 1.5521587556985796], [1.698524595E12, 1.5486338797814194], [1.698524575E12, 1.280162216965196], [1.69852463E12, 1.548446631805601], [1.69852461E12, 1.5407616361071963], [1.69852459E12, 1.5788866455148527]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698524635E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.698524575E12, "maxY": 660.0, "series": [{"data": [[1.698524625E12, 612.0], [1.698524605E12, 448.0], [1.698524585E12, 206.0], [1.69852462E12, 392.0], [1.6985246E12, 660.0], [1.69852458E12, 133.0], [1.698524635E12, 396.0], [1.698524615E12, 392.0], [1.698524595E12, 324.0], [1.698524575E12, 345.0], [1.69852463E12, 576.0], [1.69852461E12, 516.0], [1.69852459E12, 269.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.698524625E12, 305.0], [1.698524605E12, 305.0], [1.698524585E12, 87.0], [1.69852462E12, 306.0], [1.6985246E12, 265.0], [1.69852458E12, 40.0], [1.698524635E12, 235.0], [1.698524615E12, 308.0], [1.698524595E12, 206.0], [1.698524575E12, 8.0], [1.69852463E12, 306.0], [1.69852461E12, 307.0], [1.69852459E12, 158.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.698524625E12, 470.0], [1.698524605E12, 381.0], [1.698524585E12, 165.0], [1.69852462E12, 356.0], [1.6985246E12, 518.0], [1.69852458E12, 95.0], [1.698524635E12, 374.0], [1.698524615E12, 355.0], [1.698524595E12, 279.0], [1.698524575E12, 45.0], [1.69852463E12, 519.0], [1.69852461E12, 375.0], [1.69852459E12, 233.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.698524625E12, 581.0], [1.698524605E12, 440.0], [1.698524585E12, 184.78999999999996], [1.69852462E12, 378.0], [1.6985246E12, 620.0], [1.69852458E12, 118.0], [1.698524635E12, 389.0], [1.698524615E12, 372.0], [1.698524595E12, 298.0], [1.698524575E12, 62.0], [1.69852463E12, 563.0], [1.69852461E12, 501.0], [1.69852459E12, 253.32000000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.698524625E12, 340.0], [1.698524605E12, 341.0], [1.698524585E12, 141.5], [1.69852462E12, 336.0], [1.6985246E12, 339.0], [1.69852458E12, 74.0], [1.698524635E12, 359.0], [1.698524615E12, 336.0], [1.698524595E12, 249.0], [1.698524575E12, 33.0], [1.69852463E12, 344.0], [1.69852461E12, 341.0], [1.69852459E12, 207.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.698524625E12, 521.0], [1.698524605E12, 412.0], [1.698524585E12, 172.0], [1.69852462E12, 366.0], [1.6985246E12, 574.1999999999998], [1.69852458E12, 107.69999999999982], [1.698524635E12, 380.09999999999997], [1.698524615E12, 361.0], [1.698524595E12, 285.0], [1.698524575E12, 49.0], [1.69852463E12, 550.0], [1.69852461E12, 425.0], [1.69852459E12, 238.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698524635E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 109.0, "maxY": 495.0, "series": [{"data": [[534.0, 444.0], [562.0, 477.0], [592.0, 282.0], [618.0, 174.5], [634.0, 54.5], [650.0, 24.5], [648.0, 151.5], [646.0, 218.0], [669.0, 351.0], [651.0, 388.0], [657.0, 328.0], [659.0, 350.0], [694.0, 189.0], [697.0, 281.0], [682.0, 303.0], [690.0, 353.0], [698.0, 367.0], [716.0, 174.0], [717.0, 36.0], [704.0, 361.0], [721.0, 220.5], [726.0, 344.0], [722.0, 336.0], [730.0, 245.5], [714.0, 225.0], [712.0, 269.0], [715.0, 337.0], [707.0, 346.0], [709.0, 347.0], [713.0, 339.0], [742.0, 336.0], [763.0, 105.0], [748.0, 208.0], [746.0, 246.0], [740.0, 265.0], [741.0, 334.0], [750.0, 333.0], [736.0, 343.0], [758.0, 328.0], [759.0, 331.0], [756.0, 331.0], [753.0, 330.0], [743.0, 350.0], [745.0, 335.0], [831.0, 113.0], [861.0, 70.0], [865.0, 41.0], [878.0, 77.0], [871.0, 86.0], [109.0, 11.0], [396.0, 495.0], [477.0, 359.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 878.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 109.0, "maxY": 495.0, "series": [{"data": [[534.0, 444.0], [562.0, 477.0], [592.0, 282.0], [618.0, 174.5], [634.0, 54.5], [650.0, 24.5], [648.0, 151.5], [646.0, 218.0], [669.0, 351.0], [651.0, 388.0], [657.0, 328.0], [659.0, 350.0], [694.0, 189.0], [697.0, 281.0], [682.0, 303.0], [690.0, 353.0], [698.0, 367.0], [716.0, 174.0], [717.0, 36.0], [704.0, 361.0], [721.0, 220.5], [726.0, 344.0], [722.0, 336.0], [730.0, 245.5], [714.0, 225.0], [712.0, 269.0], [715.0, 337.0], [707.0, 346.0], [709.0, 347.0], [713.0, 339.0], [742.0, 336.0], [763.0, 105.0], [748.0, 208.0], [746.0, 246.0], [740.0, 265.0], [741.0, 334.0], [750.0, 333.0], [736.0, 343.0], [758.0, 328.0], [759.0, 331.0], [756.0, 331.0], [753.0, 330.0], [743.0, 350.0], [745.0, 335.0], [831.0, 113.0], [861.0, 70.0], [865.0, 41.0], [878.0, 77.0], [871.0, 86.0], [109.0, 11.0], [396.0, 495.0], [477.0, 359.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 878.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 45.4, "minX": 1.698524575E12, "maxY": 801.2, "series": [{"data": [[1.698524625E12, 677.2], [1.698524605E12, 719.8], [1.698524585E12, 752.4], [1.69852462E12, 731.6], [1.6985246E12, 623.4], [1.69852458E12, 801.2], [1.698524635E12, 45.4], [1.698524615E12, 745.8], [1.698524595E12, 740.2], [1.698524575E12, 599.8], [1.69852463E12, 650.2], [1.69852461E12, 709.0], [1.69852459E12, 701.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698524635E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 95.4, "minX": 1.698524575E12, "maxY": 793.0, "series": [{"data": [[1.698524625E12, 677.2], [1.698524605E12, 719.4], [1.698524585E12, 744.0], [1.69852462E12, 731.6], [1.6985246E12, 615.0], [1.69852458E12, 793.0], [1.698524635E12, 95.4], [1.698524615E12, 745.8], [1.698524595E12, 732.0], [1.698524575E12, 591.8], [1.69852463E12, 650.2], [1.69852461E12, 709.0], [1.69852459E12, 693.4]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698524635E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 95.4, "minX": 1.698524575E12, "maxY": 793.0, "series": [{"data": [[1.698524625E12, 677.2], [1.698524605E12, 719.4], [1.698524585E12, 744.0], [1.69852462E12, 731.6], [1.6985246E12, 615.0], [1.69852458E12, 793.0], [1.698524635E12, 95.4], [1.698524615E12, 745.8], [1.698524595E12, 732.0], [1.698524575E12, 591.8], [1.69852463E12, 650.2], [1.69852461E12, 709.0], [1.69852459E12, 693.4]], "isOverall": false, "label": "POST /meetings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698524635E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 95.4, "minX": 1.698524575E12, "maxY": 793.0, "series": [{"data": [[1.698524625E12, 677.2], [1.698524605E12, 719.4], [1.698524585E12, 744.0], [1.69852462E12, 731.6], [1.6985246E12, 615.0], [1.69852458E12, 793.0], [1.698524635E12, 95.4], [1.698524615E12, 745.8], [1.698524595E12, 732.0], [1.698524575E12, 591.8], [1.69852463E12, 650.2], [1.69852461E12, 709.0], [1.69852459E12, 693.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.698524635E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

