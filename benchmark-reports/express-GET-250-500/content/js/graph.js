/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 1219.0, "series": [{"data": [[0.0, 8.0], [0.1, 12.0], [0.2, 15.0], [0.3, 17.0], [0.4, 19.0], [0.5, 21.0], [0.6, 23.0], [0.7, 25.0], [0.8, 27.0], [0.9, 29.0], [1.0, 30.0], [1.1, 31.0], [1.2, 33.0], [1.3, 36.0], [1.4, 38.0], [1.5, 41.0], [1.6, 43.0], [1.7, 45.0], [1.8, 46.0], [1.9, 48.0], [2.0, 49.0], [2.1, 50.0], [2.2, 52.0], [2.3, 54.0], [2.4, 56.0], [2.5, 58.0], [2.6, 59.0], [2.7, 60.0], [2.8, 63.0], [2.9, 64.0], [3.0, 66.0], [3.1, 67.0], [3.2, 69.0], [3.3, 70.0], [3.4, 72.0], [3.5, 72.0], [3.6, 74.0], [3.7, 75.0], [3.8, 76.0], [3.9, 77.0], [4.0, 79.0], [4.1, 81.0], [4.2, 82.0], [4.3, 83.0], [4.4, 85.0], [4.5, 87.0], [4.6, 89.0], [4.7, 90.0], [4.8, 92.0], [4.9, 93.0], [5.0, 95.0], [5.1, 97.0], [5.2, 98.0], [5.3, 99.0], [5.4, 101.0], [5.5, 101.0], [5.6, 102.0], [5.7, 103.0], [5.8, 105.0], [5.9, 107.0], [6.0, 109.0], [6.1, 111.0], [6.2, 114.0], [6.3, 115.0], [6.4, 119.0], [6.5, 120.0], [6.6, 121.0], [6.7, 123.0], [6.8, 124.0], [6.9, 126.0], [7.0, 128.0], [7.1, 130.0], [7.2, 132.0], [7.3, 134.0], [7.4, 135.0], [7.5, 136.0], [7.6, 137.0], [7.7, 138.0], [7.8, 140.0], [7.9, 140.0], [8.0, 141.0], [8.1, 142.0], [8.2, 143.0], [8.3, 145.0], [8.4, 149.0], [8.5, 153.0], [8.6, 156.0], [8.7, 157.0], [8.8, 158.0], [8.9, 159.0], [9.0, 159.0], [9.1, 160.0], [9.2, 161.0], [9.3, 162.0], [9.4, 164.0], [9.5, 166.0], [9.6, 167.0], [9.7, 169.0], [9.8, 170.0], [9.9, 171.0], [10.0, 172.0], [10.1, 173.0], [10.2, 174.0], [10.3, 177.0], [10.4, 183.0], [10.5, 184.0], [10.6, 185.0], [10.7, 186.0], [10.8, 187.0], [10.9, 188.0], [11.0, 189.0], [11.1, 190.0], [11.2, 191.0], [11.3, 191.0], [11.4, 192.0], [11.5, 193.0], [11.6, 194.0], [11.7, 194.0], [11.8, 195.0], [11.9, 196.0], [12.0, 199.0], [12.1, 203.0], [12.2, 205.0], [12.3, 208.0], [12.4, 209.0], [12.5, 209.0], [12.6, 210.0], [12.7, 210.0], [12.8, 211.0], [12.9, 212.0], [13.0, 212.0], [13.1, 213.0], [13.2, 214.0], [13.3, 215.0], [13.4, 217.0], [13.5, 220.0], [13.6, 226.0], [13.7, 227.0], [13.8, 228.0], [13.9, 228.0], [14.0, 230.0], [14.1, 230.0], [14.2, 231.0], [14.3, 232.0], [14.4, 238.0], [14.5, 242.0], [14.6, 244.0], [14.7, 246.0], [14.8, 247.0], [14.9, 248.0], [15.0, 249.0], [15.1, 250.0], [15.2, 252.0], [15.3, 253.0], [15.4, 255.0], [15.5, 256.0], [15.6, 258.0], [15.7, 267.0], [15.8, 267.0], [15.9, 269.0], [16.0, 271.0], [16.1, 273.0], [16.2, 279.0], [16.3, 282.0], [16.4, 284.0], [16.5, 286.0], [16.6, 289.0], [16.7, 290.0], [16.8, 291.0], [16.9, 292.0], [17.0, 293.0], [17.1, 294.0], [17.2, 294.0], [17.3, 295.0], [17.4, 296.0], [17.5, 296.0], [17.6, 297.0], [17.7, 298.0], [17.8, 300.0], [17.9, 300.0], [18.0, 301.0], [18.1, 301.0], [18.2, 302.0], [18.3, 302.0], [18.4, 303.0], [18.5, 303.0], [18.6, 303.0], [18.7, 304.0], [18.8, 304.0], [18.9, 304.0], [19.0, 305.0], [19.1, 305.0], [19.2, 306.0], [19.3, 307.0], [19.4, 311.0], [19.5, 317.0], [19.6, 319.0], [19.7, 322.0], [19.8, 325.0], [19.9, 331.0], [20.0, 333.0], [20.1, 336.0], [20.2, 337.0], [20.3, 339.0], [20.4, 344.0], [20.5, 345.0], [20.6, 347.0], [20.7, 348.0], [20.8, 350.0], [20.9, 351.0], [21.0, 352.0], [21.1, 354.0], [21.2, 356.0], [21.3, 359.0], [21.4, 361.0], [21.5, 362.0], [21.6, 364.0], [21.7, 365.0], [21.8, 366.0], [21.9, 367.0], [22.0, 368.0], [22.1, 368.0], [22.2, 369.0], [22.3, 369.0], [22.4, 370.0], [22.5, 371.0], [22.6, 371.0], [22.7, 371.0], [22.8, 372.0], [22.9, 372.0], [23.0, 373.0], [23.1, 373.0], [23.2, 373.0], [23.3, 374.0], [23.4, 374.0], [23.5, 375.0], [23.6, 376.0], [23.7, 376.0], [23.8, 376.0], [23.9, 378.0], [24.0, 379.0], [24.1, 380.0], [24.2, 380.0], [24.3, 382.0], [24.4, 384.0], [24.5, 385.0], [24.6, 386.0], [24.7, 387.0], [24.8, 387.0], [24.9, 388.0], [25.0, 391.0], [25.1, 394.0], [25.2, 396.0], [25.3, 397.0], [25.4, 399.0], [25.5, 402.0], [25.6, 406.0], [25.7, 407.0], [25.8, 408.0], [25.9, 409.0], [26.0, 411.0], [26.1, 414.0], [26.2, 415.0], [26.3, 416.0], [26.4, 417.0], [26.5, 423.0], [26.6, 427.0], [26.7, 430.0], [26.8, 434.0], [26.9, 435.0], [27.0, 437.0], [27.1, 441.0], [27.2, 442.0], [27.3, 443.0], [27.4, 444.0], [27.5, 444.0], [27.6, 445.0], [27.7, 445.0], [27.8, 445.0], [27.9, 446.0], [28.0, 446.0], [28.1, 447.0], [28.2, 447.0], [28.3, 448.0], [28.4, 448.0], [28.5, 448.0], [28.6, 449.0], [28.7, 449.0], [28.8, 450.0], [28.9, 451.0], [29.0, 452.0], [29.1, 454.0], [29.2, 455.0], [29.3, 456.0], [29.4, 457.0], [29.5, 458.0], [29.6, 459.0], [29.7, 461.0], [29.8, 462.0], [29.9, 464.0], [30.0, 466.0], [30.1, 470.0], [30.2, 472.0], [30.3, 474.0], [30.4, 476.0], [30.5, 477.0], [30.6, 478.0], [30.7, 479.0], [30.8, 482.0], [30.9, 483.0], [31.0, 485.0], [31.1, 486.0], [31.2, 486.0], [31.3, 487.0], [31.4, 487.0], [31.5, 488.0], [31.6, 488.0], [31.7, 489.0], [31.8, 490.0], [31.9, 507.0], [32.0, 517.0], [32.1, 519.0], [32.2, 520.0], [32.3, 520.0], [32.4, 522.0], [32.5, 523.0], [32.6, 523.0], [32.7, 523.0], [32.8, 524.0], [32.9, 524.0], [33.0, 525.0], [33.1, 525.0], [33.2, 526.0], [33.3, 526.0], [33.4, 528.0], [33.5, 530.0], [33.6, 533.0], [33.7, 535.0], [33.8, 538.0], [33.9, 541.0], [34.0, 547.0], [34.1, 554.0], [34.2, 560.0], [34.3, 561.0], [34.4, 563.0], [34.5, 569.0], [34.6, 571.0], [34.7, 572.0], [34.8, 574.0], [34.9, 575.0], [35.0, 577.0], [35.1, 579.0], [35.2, 580.0], [35.3, 581.0], [35.4, 582.0], [35.5, 583.0], [35.6, 584.0], [35.7, 584.0], [35.8, 585.0], [35.9, 586.0], [36.0, 586.0], [36.1, 587.0], [36.2, 588.0], [36.3, 589.0], [36.4, 591.0], [36.5, 594.0], [36.6, 595.0], [36.7, 596.0], [36.8, 598.0], [36.9, 601.0], [37.0, 602.0], [37.1, 604.0], [37.2, 606.0], [37.3, 608.0], [37.4, 609.0], [37.5, 611.0], [37.6, 612.0], [37.7, 614.0], [37.8, 616.0], [37.9, 618.0], [38.0, 619.0], [38.1, 620.0], [38.2, 621.0], [38.3, 623.0], [38.4, 624.0], [38.5, 625.0], [38.6, 625.0], [38.7, 626.0], [38.8, 626.0], [38.9, 627.0], [39.0, 629.0], [39.1, 630.0], [39.2, 630.0], [39.3, 631.0], [39.4, 631.0], [39.5, 632.0], [39.6, 632.0], [39.7, 633.0], [39.8, 635.0], [39.9, 639.0], [40.0, 640.0], [40.1, 641.0], [40.2, 643.0], [40.3, 644.0], [40.4, 650.0], [40.5, 654.0], [40.6, 656.0], [40.7, 658.0], [40.8, 660.0], [40.9, 662.0], [41.0, 663.0], [41.1, 665.0], [41.2, 673.0], [41.3, 676.0], [41.4, 691.0], [41.5, 694.0], [41.6, 695.0], [41.7, 696.0], [41.8, 697.0], [41.9, 697.0], [42.0, 698.0], [42.1, 698.0], [42.2, 699.0], [42.3, 700.0], [42.4, 701.0], [42.5, 702.0], [42.6, 704.0], [42.7, 708.0], [42.8, 708.0], [42.9, 709.0], [43.0, 710.0], [43.1, 711.0], [43.2, 711.0], [43.3, 712.0], [43.4, 713.0], [43.5, 713.0], [43.6, 714.0], [43.7, 714.0], [43.8, 716.0], [43.9, 717.0], [44.0, 719.0], [44.1, 720.0], [44.2, 721.0], [44.3, 722.0], [44.4, 722.0], [44.5, 723.0], [44.6, 723.0], [44.7, 725.0], [44.8, 725.0], [44.9, 726.0], [45.0, 726.0], [45.1, 727.0], [45.2, 728.0], [45.3, 730.0], [45.4, 733.0], [45.5, 736.0], [45.6, 767.0], [45.7, 779.0], [45.8, 780.0], [45.9, 781.0], [46.0, 783.0], [46.1, 784.0], [46.2, 785.0], [46.3, 786.0], [46.4, 788.0], [46.5, 789.0], [46.6, 790.0], [46.7, 791.0], [46.8, 792.0], [46.9, 792.0], [47.0, 793.0], [47.1, 794.0], [47.2, 795.0], [47.3, 796.0], [47.4, 798.0], [47.5, 799.0], [47.6, 801.0], [47.7, 805.0], [47.8, 806.0], [47.9, 807.0], [48.0, 808.0], [48.1, 809.0], [48.2, 810.0], [48.3, 811.0], [48.4, 812.0], [48.5, 814.0], [48.6, 816.0], [48.7, 817.0], [48.8, 818.0], [48.9, 820.0], [49.0, 822.0], [49.1, 824.0], [49.2, 826.0], [49.3, 828.0], [49.4, 829.0], [49.5, 830.0], [49.6, 832.0], [49.7, 833.0], [49.8, 835.0], [49.9, 837.0], [50.0, 839.0], [50.1, 840.0], [50.2, 842.0], [50.3, 843.0], [50.4, 845.0], [50.5, 847.0], [50.6, 851.0], [50.7, 854.0], [50.8, 856.0], [50.9, 858.0], [51.0, 861.0], [51.1, 875.0], [51.2, 884.0], [51.3, 901.0], [51.4, 921.0], [51.5, 937.0], [51.6, 946.0], [51.7, 949.0], [51.8, 949.0], [51.9, 950.0], [52.0, 951.0], [52.1, 951.0], [52.2, 951.0], [52.3, 952.0], [52.4, 952.0], [52.5, 952.0], [52.6, 953.0], [52.7, 953.0], [52.8, 953.0], [52.9, 954.0], [53.0, 954.0], [53.1, 954.0], [53.2, 954.0], [53.3, 955.0], [53.4, 955.0], [53.5, 955.0], [53.6, 955.0], [53.7, 956.0], [53.8, 956.0], [53.9, 956.0], [54.0, 956.0], [54.1, 956.0], [54.2, 957.0], [54.3, 957.0], [54.4, 957.0], [54.5, 958.0], [54.6, 958.0], [54.7, 958.0], [54.8, 958.0], [54.9, 959.0], [55.0, 959.0], [55.1, 959.0], [55.2, 960.0], [55.3, 960.0], [55.4, 960.0], [55.5, 961.0], [55.6, 961.0], [55.7, 961.0], [55.8, 961.0], [55.9, 961.0], [56.0, 962.0], [56.1, 962.0], [56.2, 962.0], [56.3, 963.0], [56.4, 963.0], [56.5, 963.0], [56.6, 964.0], [56.7, 964.0], [56.8, 964.0], [56.9, 964.0], [57.0, 964.0], [57.1, 965.0], [57.2, 965.0], [57.3, 965.0], [57.4, 966.0], [57.5, 966.0], [57.6, 966.0], [57.7, 966.0], [57.8, 967.0], [57.9, 967.0], [58.0, 967.0], [58.1, 968.0], [58.2, 968.0], [58.3, 968.0], [58.4, 968.0], [58.5, 969.0], [58.6, 969.0], [58.7, 969.0], [58.8, 970.0], [58.9, 970.0], [59.0, 970.0], [59.1, 971.0], [59.2, 971.0], [59.3, 971.0], [59.4, 972.0], [59.5, 972.0], [59.6, 972.0], [59.7, 973.0], [59.8, 973.0], [59.9, 974.0], [60.0, 974.0], [60.1, 974.0], [60.2, 975.0], [60.3, 975.0], [60.4, 975.0], [60.5, 976.0], [60.6, 976.0], [60.7, 976.0], [60.8, 977.0], [60.9, 977.0], [61.0, 977.0], [61.1, 977.0], [61.2, 978.0], [61.3, 978.0], [61.4, 978.0], [61.5, 979.0], [61.6, 979.0], [61.7, 980.0], [61.8, 980.0], [61.9, 981.0], [62.0, 981.0], [62.1, 982.0], [62.2, 982.0], [62.3, 983.0], [62.4, 983.0], [62.5, 984.0], [62.6, 984.0], [62.7, 984.0], [62.8, 985.0], [62.9, 986.0], [63.0, 986.0], [63.1, 987.0], [63.2, 987.0], [63.3, 987.0], [63.4, 988.0], [63.5, 988.0], [63.6, 989.0], [63.7, 989.0], [63.8, 990.0], [63.9, 990.0], [64.0, 990.0], [64.1, 990.0], [64.2, 991.0], [64.3, 991.0], [64.4, 991.0], [64.5, 992.0], [64.6, 992.0], [64.7, 992.0], [64.8, 992.0], [64.9, 993.0], [65.0, 993.0], [65.1, 993.0], [65.2, 994.0], [65.3, 994.0], [65.4, 994.0], [65.5, 995.0], [65.6, 995.0], [65.7, 995.0], [65.8, 996.0], [65.9, 996.0], [66.0, 997.0], [66.1, 997.0], [66.2, 997.0], [66.3, 997.0], [66.4, 998.0], [66.5, 998.0], [66.6, 998.0], [66.7, 998.0], [66.8, 999.0], [66.9, 999.0], [67.0, 999.0], [67.1, 999.0], [67.2, 1000.0], [67.3, 1000.0], [67.4, 1000.0], [67.5, 1001.0], [67.6, 1001.0], [67.7, 1001.0], [67.8, 1001.0], [67.9, 1002.0], [68.0, 1002.0], [68.1, 1002.0], [68.2, 1002.0], [68.3, 1003.0], [68.4, 1003.0], [68.5, 1003.0], [68.6, 1003.0], [68.7, 1004.0], [68.8, 1004.0], [68.9, 1004.0], [69.0, 1004.0], [69.1, 1005.0], [69.2, 1005.0], [69.3, 1005.0], [69.4, 1005.0], [69.5, 1005.0], [69.6, 1006.0], [69.7, 1006.0], [69.8, 1006.0], [69.9, 1006.0], [70.0, 1007.0], [70.1, 1007.0], [70.2, 1007.0], [70.3, 1008.0], [70.4, 1008.0], [70.5, 1008.0], [70.6, 1009.0], [70.7, 1009.0], [70.8, 1009.0], [70.9, 1010.0], [71.0, 1010.0], [71.1, 1010.0], [71.2, 1010.0], [71.3, 1011.0], [71.4, 1011.0], [71.5, 1011.0], [71.6, 1011.0], [71.7, 1011.0], [71.8, 1012.0], [71.9, 1012.0], [72.0, 1012.0], [72.1, 1012.0], [72.2, 1012.0], [72.3, 1013.0], [72.4, 1013.0], [72.5, 1013.0], [72.6, 1014.0], [72.7, 1014.0], [72.8, 1014.0], [72.9, 1014.0], [73.0, 1014.0], [73.1, 1015.0], [73.2, 1015.0], [73.3, 1015.0], [73.4, 1015.0], [73.5, 1016.0], [73.6, 1016.0], [73.7, 1016.0], [73.8, 1016.0], [73.9, 1016.0], [74.0, 1016.0], [74.1, 1017.0], [74.2, 1017.0], [74.3, 1017.0], [74.4, 1017.0], [74.5, 1017.0], [74.6, 1018.0], [74.7, 1018.0], [74.8, 1018.0], [74.9, 1018.0], [75.0, 1018.0], [75.1, 1019.0], [75.2, 1019.0], [75.3, 1019.0], [75.4, 1019.0], [75.5, 1019.0], [75.6, 1020.0], [75.7, 1020.0], [75.8, 1020.0], [75.9, 1020.0], [76.0, 1020.0], [76.1, 1021.0], [76.2, 1021.0], [76.3, 1021.0], [76.4, 1021.0], [76.5, 1022.0], [76.6, 1022.0], [76.7, 1022.0], [76.8, 1022.0], [76.9, 1023.0], [77.0, 1023.0], [77.1, 1023.0], [77.2, 1024.0], [77.3, 1024.0], [77.4, 1024.0], [77.5, 1025.0], [77.6, 1025.0], [77.7, 1025.0], [77.8, 1025.0], [77.9, 1026.0], [78.0, 1026.0], [78.1, 1026.0], [78.2, 1026.0], [78.3, 1027.0], [78.4, 1027.0], [78.5, 1027.0], [78.6, 1027.0], [78.7, 1028.0], [78.8, 1028.0], [78.9, 1029.0], [79.0, 1029.0], [79.1, 1030.0], [79.2, 1030.0], [79.3, 1031.0], [79.4, 1031.0], [79.5, 1032.0], [79.6, 1032.0], [79.7, 1033.0], [79.8, 1034.0], [79.9, 1034.0], [80.0, 1035.0], [80.1, 1036.0], [80.2, 1036.0], [80.3, 1037.0], [80.4, 1037.0], [80.5, 1038.0], [80.6, 1038.0], [80.7, 1039.0], [80.8, 1039.0], [80.9, 1040.0], [81.0, 1040.0], [81.1, 1040.0], [81.2, 1041.0], [81.3, 1041.0], [81.4, 1042.0], [81.5, 1042.0], [81.6, 1043.0], [81.7, 1043.0], [81.8, 1044.0], [81.9, 1044.0], [82.0, 1045.0], [82.1, 1045.0], [82.2, 1046.0], [82.3, 1046.0], [82.4, 1047.0], [82.5, 1047.0], [82.6, 1048.0], [82.7, 1048.0], [82.8, 1049.0], [82.9, 1050.0], [83.0, 1051.0], [83.1, 1051.0], [83.2, 1052.0], [83.3, 1053.0], [83.4, 1054.0], [83.5, 1055.0], [83.6, 1055.0], [83.7, 1056.0], [83.8, 1056.0], [83.9, 1057.0], [84.0, 1058.0], [84.1, 1058.0], [84.2, 1058.0], [84.3, 1059.0], [84.4, 1060.0], [84.5, 1060.0], [84.6, 1060.0], [84.7, 1061.0], [84.8, 1061.0], [84.9, 1062.0], [85.0, 1062.0], [85.1, 1062.0], [85.2, 1063.0], [85.3, 1063.0], [85.4, 1064.0], [85.5, 1065.0], [85.6, 1065.0], [85.7, 1066.0], [85.8, 1066.0], [85.9, 1066.0], [86.0, 1067.0], [86.1, 1067.0], [86.2, 1067.0], [86.3, 1068.0], [86.4, 1068.0], [86.5, 1068.0], [86.6, 1069.0], [86.7, 1069.0], [86.8, 1069.0], [86.9, 1070.0], [87.0, 1070.0], [87.1, 1071.0], [87.2, 1072.0], [87.3, 1073.0], [87.4, 1074.0], [87.5, 1075.0], [87.6, 1075.0], [87.7, 1076.0], [87.8, 1077.0], [87.9, 1078.0], [88.0, 1078.0], [88.1, 1079.0], [88.2, 1080.0], [88.3, 1080.0], [88.4, 1081.0], [88.5, 1081.0], [88.6, 1082.0], [88.7, 1082.0], [88.8, 1083.0], [88.9, 1084.0], [89.0, 1084.0], [89.1, 1085.0], [89.2, 1086.0], [89.3, 1086.0], [89.4, 1087.0], [89.5, 1087.0], [89.6, 1087.0], [89.7, 1088.0], [89.8, 1088.0], [89.9, 1088.0], [90.0, 1089.0], [90.1, 1089.0], [90.2, 1089.0], [90.3, 1090.0], [90.4, 1091.0], [90.5, 1091.0], [90.6, 1092.0], [90.7, 1092.0], [90.8, 1093.0], [90.9, 1094.0], [91.0, 1094.0], [91.1, 1095.0], [91.2, 1096.0], [91.3, 1097.0], [91.4, 1099.0], [91.5, 1100.0], [91.6, 1101.0], [91.7, 1102.0], [91.8, 1103.0], [91.9, 1103.0], [92.0, 1104.0], [92.1, 1104.0], [92.2, 1105.0], [92.3, 1105.0], [92.4, 1106.0], [92.5, 1107.0], [92.6, 1107.0], [92.7, 1108.0], [92.8, 1108.0], [92.9, 1109.0], [93.0, 1110.0], [93.1, 1111.0], [93.2, 1111.0], [93.3, 1111.0], [93.4, 1112.0], [93.5, 1112.0], [93.6, 1113.0], [93.7, 1113.0], [93.8, 1114.0], [93.9, 1114.0], [94.0, 1114.0], [94.1, 1114.0], [94.2, 1115.0], [94.3, 1115.0], [94.4, 1116.0], [94.5, 1116.0], [94.6, 1117.0], [94.7, 1117.0], [94.8, 1118.0], [94.9, 1118.0], [95.0, 1119.0], [95.1, 1119.0], [95.2, 1120.0], [95.3, 1121.0], [95.4, 1121.0], [95.5, 1122.0], [95.6, 1123.0], [95.7, 1125.0], [95.8, 1126.0], [95.9, 1127.0], [96.0, 1129.0], [96.1, 1129.0], [96.2, 1130.0], [96.3, 1131.0], [96.4, 1131.0], [96.5, 1132.0], [96.6, 1132.0], [96.7, 1133.0], [96.8, 1134.0], [96.9, 1134.0], [97.0, 1134.0], [97.1, 1135.0], [97.2, 1136.0], [97.3, 1136.0], [97.4, 1136.0], [97.5, 1137.0], [97.6, 1138.0], [97.7, 1139.0], [97.8, 1139.0], [97.9, 1140.0], [98.0, 1141.0], [98.1, 1142.0], [98.2, 1144.0], [98.3, 1145.0], [98.4, 1146.0], [98.5, 1147.0], [98.6, 1150.0], [98.7, 1162.0], [98.8, 1179.0], [98.9, 1189.0], [99.0, 1193.0], [99.1, 1201.0], [99.2, 1204.0], [99.3, 1205.0], [99.4, 1207.0], [99.5, 1208.0], [99.6, 1209.0], [99.7, 1209.0], [99.8, 1210.0], [99.9, 1212.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 145.0, "minX": 0.0, "maxY": 3835.0, "series": [{"data": [[0.0, 842.0], [600.0, 851.0], [700.0, 829.0], [200.0, 914.0], [800.0, 600.0], [900.0, 2510.0], [1000.0, 3835.0], [1100.0, 1208.0], [300.0, 1204.0], [1200.0, 145.0], [100.0, 1056.0], [400.0, 1024.0], [500.0, 788.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5040.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10766.0, "series": [{"data": [[0.0, 5040.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10766.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.698526885E12, "maxY": 250.0, "series": [{"data": [[1.698526895E12, 70.8798882681564], [1.698526915E12, 235.91001564945202], [1.698526935E12, 250.0], [1.6985269E12, 112.76629680998607], [1.69852692E12, 250.0], [1.69852694E12, 250.0], [1.698526885E12, 5.327272727272731], [1.698526905E12, 154.0264993026497], [1.698526925E12, 250.0], [1.698526945E12, 225.17990275526748], [1.69852689E12, 29.703249097472927], [1.69852691E12, 195.57728253055367], [1.69852693E12, 250.0], [1.69852695E12, 1.5]], "isOverall": false, "label": "MinimalMeet-express", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69852695E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 50.827586206896555, "minX": 1.0, "maxY": 1056.793103448276, "series": [{"data": [[2.0, 78.35714285714286], [3.0, 57.40909090909091], [4.0, 58.333333333333336], [5.0, 50.827586206896555], [6.0, 54.366666666666674], [7.0, 68.08], [8.0, 59.8125], [9.0, 59.83870967741936], [10.0, 74.7857142857143], [11.0, 70.63636363636364], [12.0, 73.4375], [13.0, 76.03124999999999], [14.0, 80.90625], [15.0, 78.9032258064516], [16.0, 97.2142857142857], [17.0, 100.53125], [18.0, 88.22857142857143], [19.0, 94.02941176470587], [20.0, 102.0625], [21.0, 100.21212121212122], [22.0, 101.79411764705881], [23.0, 103.25], [24.0, 110.58823529411765], [25.0, 103.7027027027027], [26.0, 105.1025641025641], [27.0, 112.33333333333334], [28.0, 114.82857142857142], [29.0, 122.27777777777779], [30.0, 121.64864864864866], [31.0, 125.78378378378378], [32.0, 129.27272727272728], [33.0, 162.29032258064512], [34.0, 135.94594594594594], [35.0, 144.45714285714283], [36.0, 138.0], [37.0, 147.8], [38.0, 155.18181818181816], [39.0, 182.66666666666666], [40.0, 168.30555555555557], [41.0, 156.89189189189193], [42.0, 159.18918918918916], [43.0, 162.1891891891892], [44.0, 166.63888888888889], [45.0, 178.2058823529412], [46.0, 184.41176470588232], [47.0, 181.21621621621625], [48.0, 181.41666666666657], [49.0, 191.5], [50.0, 192.61111111111117], [51.0, 193.25714285714295], [52.0, 196.43243243243242], [53.0, 223.2222222222222], [54.0, 238.45454545454544], [55.0, 217.25], [56.0, 214.24242424242422], [57.0, 214.0], [58.0, 206.38461538461536], [59.0, 207.1891891891892], [60.0, 211.34210526315792], [61.0, 214.97297297297297], [62.0, 223.22222222222223], [63.0, 230.91666666666663], [64.0, 231.05405405405403], [65.0, 232.2105263157895], [66.0, 233.1111111111111], [67.0, 258.76666666666665], [68.0, 265.8648648648649], [69.0, 249.5], [70.0, 248.35135135135135], [71.0, 250.1315789473684], [72.0, 249.52777777777777], [73.0, 267.17647058823536], [74.0, 273.0540540540541], [75.0, 272.0], [76.0, 273.6944444444445], [77.0, 294.99999999999994], [78.0, 309.5555555555556], [79.0, 319.0333333333333], [80.0, 308.9142857142857], [81.0, 318.96153846153845], [82.0, 328.1351351351352], [83.0, 320.48648648648657], [84.0, 288.8918918918918], [85.0, 291.8], [86.0, 309.2], [87.0, 316.02702702702703], [88.0, 314.94444444444446], [89.0, 313.48571428571427], [90.0, 321.0], [91.0, 322.07894736842104], [92.0, 320.4054054054054], [93.0, 322.52777777777766], [94.0, 323.9722222222222], [95.0, 357.96428571428567], [96.0, 364.08108108108115], [97.0, 368.6388888888889], [98.0, 340.7368421052631], [99.0, 353.6551724137932], [100.0, 384.96296296296305], [101.0, 402.7777777777777], [102.0, 398.6052631578947], [103.0, 365.86486486486484], [104.0, 351.18918918918916], [105.0, 366.8181818181819], [106.0, 382.2121212121212], [107.0, 392.47222222222234], [108.0, 389.2432432432432], [109.0, 388.31428571428563], [110.0, 394.4857142857142], [111.0, 390.6216216216216], [112.0, 390.8648648648649], [113.0, 379.5405405405405], [114.0, 389.9444444444444], [115.0, 387.4871794871795], [116.0, 388.8378378378378], [117.0, 387.1842105263158], [118.0, 395.6], [119.0, 401.5384615384615], [120.0, 409.88571428571424], [121.0, 414.83783783783787], [122.0, 421.6969696969698], [123.0, 453.4814814814814], [124.0, 462.0], [125.0, 463.05263157894734], [126.0, 453.70270270270277], [127.0, 424.81578947368416], [128.0, 425.8108108108108], [129.0, 429.8378378378379], [130.0, 437.1714285714286], [131.0, 447.3611111111111], [132.0, 457.2857142857142], [133.0, 461.65789473684214], [134.0, 461.69444444444446], [135.0, 462.4444444444445], [136.0, 461.1621621621623], [137.0, 483.31034482758616], [138.0, 492.2972972972974], [139.0, 497.6000000000001], [140.0, 503.4864864864864], [141.0, 485.25641025641033], [142.0, 475.36842105263156], [143.0, 470.97368421052636], [144.0, 465.12820512820514], [145.0, 472.55555555555566], [146.0, 480.94594594594605], [147.0, 489.16666666666674], [148.0, 499.86111111111114], [149.0, 502.49999999999994], [150.0, 503.4864864864865], [151.0, 528.4827586206897], [152.0, 538.3055555555554], [153.0, 540.2162162162161], [154.0, 548.1111111111111], [155.0, 550.0], [156.0, 534.5277777777778], [157.0, 537.9189189189187], [158.0, 539.1621621621622], [159.0, 539.25], [160.0, 555.0666666666667], [161.0, 572.3000000000001], [162.0, 601.9677419354838], [163.0, 613.9714285714285], [164.0, 627.8124999999999], [165.0, 640.34375], [166.0, 641.4285714285714], [167.0, 633.7027027027027], [168.0, 620.1052631578945], [169.0, 616.0277777777777], [170.0, 598.8648648648647], [171.0, 583.3055555555554], [172.0, 577.8378378378378], [173.0, 587.6857142857143], [174.0, 589.1081081081081], [175.0, 594.6388888888888], [176.0, 599.3611111111112], [177.0, 599.9189189189188], [178.0, 600.0], [179.0, 606.8857142857142], [180.0, 620.0344827586207], [181.0, 638.1944444444445], [182.0, 645.2285714285714], [183.0, 663.5999999999999], [184.0, 674.5945945945946], [185.0, 670.1578947368422], [186.0, 645.8648648648646], [187.0, 644.8611111111112], [188.0, 638.8918918918919], [189.0, 628.7777777777777], [190.0, 638.7499999999998], [191.0, 648.3823529411765], [192.0, 655.5405405405405], [193.0, 665.741935483871], [194.0, 681.9142857142858], [195.0, 704.9166666666666], [196.0, 723.4324324324325], [197.0, 723.8378378378379], [198.0, 731.7419354838707], [199.0, 742.9428571428572], [200.0, 739.9411764705883], [201.0, 726.727272727273], [202.0, 721.4444444444445], [203.0, 724.2571428571429], [204.0, 719.078947368421], [205.0, 710.4857142857144], [206.0, 711.1714285714286], [207.0, 711.0555555555558], [208.0, 707.8888888888888], [209.0, 711.0571428571428], [210.0, 736.9032258064516], [211.0, 736.6842105263158], [212.0, 733.1081081081081], [213.0, 732.0540540540543], [214.0, 736.2258064516129], [215.0, 778.0434782608696], [216.0, 804.9655172413794], [217.0, 817.4666666666667], [218.0, 834.59375], [219.0, 846.2777777777778], [220.0, 857.4117647058823], [221.0, 864.9999999999999], [222.0, 850.4666666666666], [223.0, 827.46875], [224.0, 829.7741935483871], [225.0, 827.2727272727275], [226.0, 850.0000000000001], [227.0, 843.8571428571428], [228.0, 838.2285714285714], [229.0, 820.9722222222221], [230.0, 819.5333333333333], [231.0, 814.4857142857143], [232.0, 812.4722222222222], [233.0, 794.6111111111111], [234.0, 800.7894736842106], [235.0, 802.0789473684213], [236.0, 805.5277777777776], [237.0, 796.1666666666666], [238.0, 789.7714285714285], [239.0, 796.9142857142857], [240.0, 829.2083333333333], [241.0, 860.4666666666666], [242.0, 884.1875], [243.0, 910.0714285714286], [244.0, 940.1428571428572], [245.0, 979.1249999999999], [246.0, 1008.4827586206898], [247.0, 1032.3103448275863], [248.0, 1056.793103448276], [249.0, 1050.5333333333333], [250.0, 1034.5206270627075], [1.0, 932.0]], "isOverall": false, "label": "GET /meetings", "isController": false}, {"data": [[182.78925724408379, 720.3164621029993]], "isOverall": false, "label": "GET /meetings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 56.4, "minX": 1.698526885E12, "maxY": 2.96452128E7, "series": [{"data": [[1.698526895E12, 2.94396288E7], [1.698526915E12, 2.62736352E7], [1.698526935E12, 2.56568832E7], [1.6985269E12, 2.96452128E7], [1.69852692E12, 2.3847744E7], [1.69852694E12, 2.52045984E7], [1.698526885E12, 3392136.0], [1.698526905E12, 2.94807456E7], [1.698526925E12, 2.47317552E7], [1.698526945E12, 2.53690656E7], [1.69852689E12, 2.8473384E7], [1.69852691E12, 2.85967344E7], [1.69852693E12, 2.47934304E7], [1.69852695E12, 41116.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.698526895E12, 40382.4], [1.698526915E12, 36039.6], [1.698526935E12, 35193.6], [1.6985269E12, 40664.4], [1.69852692E12, 32712.0], [1.69852694E12, 34573.2], [1.698526885E12, 4653.0], [1.698526905E12, 40438.8], [1.698526925E12, 33924.6], [1.698526945E12, 34798.8], [1.69852689E12, 39057.0], [1.69852691E12, 39226.2], [1.69852693E12, 34009.2], [1.69852695E12, 56.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69852695E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 22.975757575757584, "minX": 1.698526885E12, "maxY": 1082.562931034481, "series": [{"data": [[1.698526895E12, 240.65502793296088], [1.698526915E12, 886.607198748044], [1.698526935E12, 1011.6434294871794], [1.6985269E12, 378.791262135922], [1.69852692E12, 1082.562931034481], [1.69852694E12, 1006.1655791190869], [1.698526885E12, 22.975757575757584], [1.698526905E12, 522.7189679218964], [1.698526925E12, 1049.7356608478806], [1.698526945E12, 1030.2714748784429], [1.69852689E12, 102.11335740072212], [1.69852691E12, 673.0323508267434], [1.69852693E12, 1030.2686567164167], [1.69852695E12, 932.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69852695E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 22.26060606060606, "minX": 1.698526885E12, "maxY": 1081.5318965517242, "series": [{"data": [[1.698526895E12, 239.833100558659], [1.698526915E12, 885.6533646322383], [1.698526935E12, 1010.6738782051277], [1.6985269E12, 377.9361997226074], [1.69852692E12, 1081.5318965517242], [1.69852694E12, 1005.1761827079939], [1.698526885E12, 22.26060606060606], [1.698526905E12, 521.8640167364016], [1.698526925E12, 1048.7339983374907], [1.698526945E12, 1029.2414910858988], [1.69852689E12, 101.30902527075811], [1.69852691E12, 672.1480948957591], [1.69852693E12, 1029.2786069651756], [1.69852695E12, 931.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69852695E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.739525139664805, "minX": 1.698526885E12, "maxY": 1.0, "series": [{"data": [[1.698526895E12, 0.739525139664805], [1.698526915E12, 0.8419405320813768], [1.698526935E12, 0.824519230769231], [1.6985269E12, 0.7482662968099868], [1.69852692E12, 0.8758620689655163], [1.69852694E12, 0.7977161500815672], [1.698526885E12, 0.993939393939395], [1.698526905E12, 0.7761506276150626], [1.698526925E12, 0.8827930174563595], [1.698526945E12, 0.8209076175040524], [1.69852689E12, 0.8693140794223835], [1.69852691E12, 0.7922358015815965], [1.69852693E12, 0.832504145936982], [1.69852695E12, 1.0]], "isOverall": false, "label": "GET /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69852695E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.698526885E12, "maxY": 1219.0, "series": [{"data": [[1.698526895E12, 319.0], [1.698526915E12, 1095.0], [1.698526935E12, 1118.0], [1.6985269E12, 451.0], [1.69852692E12, 1152.0], [1.69852694E12, 1108.0], [1.698526885E12, 70.0], [1.698526905E12, 642.0], [1.698526925E12, 1219.0], [1.698526945E12, 1153.0], [1.69852689E12, 289.0], [1.69852691E12, 802.0], [1.69852693E12, 1120.0], [1.69852695E12, 932.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.698526895E12, 166.0], [1.698526915E12, 767.0], [1.698526935E12, 953.0], [1.6985269E12, 299.0], [1.69852692E12, 991.0], [1.69852694E12, 947.0], [1.698526885E12, 8.0], [1.698526905E12, 439.0], [1.698526925E12, 965.0], [1.698526945E12, 937.0], [1.69852689E12, 19.0], [1.69852691E12, 577.0], [1.69852693E12, 956.0], [1.69852695E12, 932.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.698526895E12, 302.0], [1.698526915E12, 1046.0], [1.698526935E12, 1080.1000000000001], [1.6985269E12, 441.0], [1.69852692E12, 1137.0], [1.69852694E12, 1087.0], [1.698526885E12, 36.0], [1.698526905E12, 607.0], [1.698526925E12, 1204.0], [1.698526945E12, 1117.0], [1.69852689E12, 159.0], [1.69852691E12, 726.0], [1.69852693E12, 1101.3], [1.69852695E12, 932.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.698526895E12, 311.0], [1.698526915E12, 1091.0], [1.698526935E12, 1113.51], [1.6985269E12, 449.0], [1.69852692E12, 1147.0], [1.69852694E12, 1095.0], [1.698526885E12, 65.38000000000002], [1.698526905E12, 631.0], [1.698526925E12, 1212.0], [1.698526945E12, 1147.0], [1.69852689E12, 171.1400000000001], [1.69852691E12, 794.0799999999999], [1.69852693E12, 1116.0], [1.69852695E12, 932.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.698526895E12, 232.0], [1.698526915E12, 837.0], [1.698526935E12, 1013.0], [1.6985269E12, 374.0], [1.69852692E12, 1105.0], [1.69852694E12, 987.0], [1.698526885E12, 21.0], [1.698526905E12, 523.0], [1.698526925E12, 1014.0], [1.698526945E12, 1016.0], [1.69852689E12, 101.0], [1.69852691E12, 693.0], [1.69852693E12, 1021.0], [1.69852695E12, 932.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.698526895E12, 304.0], [1.698526915E12, 1057.1], [1.698526935E12, 1107.0], [1.6985269E12, 446.0], [1.69852692E12, 1140.0], [1.69852694E12, 1091.0], [1.698526885E12, 41.0], [1.698526905E12, 619.25], [1.698526925E12, 1209.0], [1.698526945E12, 1136.25], [1.69852689E12, 163.0], [1.69852691E12, 733.3999999999999], [1.69852693E12, 1107.6499999999999], [1.69852695E12, 932.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69852695E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21.0, "minX": 2.0, "maxY": 1179.0, "series": [{"data": [[2.0, 932.0], [165.0, 21.0], [197.0, 1179.0], [215.0, 1126.0], [221.0, 1061.0], [220.0, 1085.0], [230.0, 994.0], [226.0, 1043.0], [224.0, 1126.0], [228.0, 1121.0], [229.0, 994.0], [242.0, 1030.5], [246.0, 1019.0], [245.0, 968.0], [240.0, 957.0], [247.0, 1087.0], [244.0, 961.0], [250.0, 47.0], [251.0, 1005.0], [252.0, 1122.5], [255.0, 1018.0], [248.0, 1006.0], [257.0, 978.0], [270.0, 292.5], [258.0, 596.5], [268.0, 710.5], [263.0, 869.5], [265.0, 829.0], [256.0, 1083.0], [262.0, 1013.0], [261.0, 1015.0], [276.0, 202.5], [287.0, 524.0], [284.0, 127.0], [281.0, 189.0], [285.0, 367.0], [286.0, 396.0], [280.0, 591.5], [283.0, 811.0], [274.0, 792.0], [288.0, 157.0], [297.0, 309.5], [291.0, 237.0], [293.0, 458.5], [298.0, 372.0], [290.0, 461.0], [303.0, 464.0], [296.0, 580.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 303.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 21.0, "minX": 2.0, "maxY": 1178.0, "series": [{"data": [[2.0, 931.0], [165.0, 21.0], [197.0, 1178.0], [215.0, 1124.0], [221.0, 1060.0], [220.0, 1084.0], [230.0, 993.0], [226.0, 1042.0], [224.0, 1125.0], [228.0, 1120.0], [229.0, 993.0], [242.0, 1030.0], [246.0, 1018.0], [245.0, 967.0], [240.0, 956.0], [247.0, 1086.0], [244.0, 960.0], [250.0, 46.0], [251.0, 1004.0], [252.0, 1121.5], [255.0, 1017.5], [248.0, 1005.0], [257.0, 977.0], [270.0, 292.0], [258.0, 595.5], [268.0, 710.0], [263.0, 868.5], [265.0, 828.0], [256.0, 1082.0], [262.0, 1012.0], [261.0, 1014.0], [276.0, 201.5], [287.0, 523.0], [284.0, 126.0], [281.0, 188.0], [285.0, 366.0], [286.0, 395.0], [280.0, 590.5], [283.0, 810.0], [274.0, 791.0], [288.0, 157.0], [297.0, 309.0], [291.0, 236.0], [293.0, 457.5], [298.0, 371.0], [290.0, 460.0], [303.0, 463.0], [296.0, 579.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 303.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 34.6, "minX": 1.698526885E12, "maxY": 296.6, "series": [{"data": [[1.698526895E12, 294.8], [1.698526915E12, 262.2], [1.698526935E12, 249.6], [1.6985269E12, 296.6], [1.69852692E12, 232.0], [1.69852694E12, 245.2], [1.698526885E12, 34.6], [1.698526905E12, 295.2], [1.698526925E12, 240.6], [1.698526945E12, 197.2], [1.69852689E12, 285.4], [1.69852691E12, 286.6], [1.69852693E12, 241.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.698526945E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.698526885E12, "maxY": 288.4, "series": [{"data": [[1.698526895E12, 286.4], [1.698526915E12, 255.6], [1.698526935E12, 249.6], [1.6985269E12, 288.4], [1.69852692E12, 232.0], [1.69852694E12, 245.2], [1.698526885E12, 33.0], [1.698526905E12, 286.8], [1.698526925E12, 240.6], [1.698526945E12, 246.8], [1.69852689E12, 277.0], [1.69852691E12, 278.2], [1.69852693E12, 241.2], [1.69852695E12, 0.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69852695E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.698526885E12, "maxY": 288.4, "series": [{"data": [[1.698526895E12, 286.4], [1.698526915E12, 255.6], [1.698526935E12, 249.6], [1.6985269E12, 288.4], [1.69852692E12, 232.0], [1.69852694E12, 245.2], [1.698526885E12, 33.0], [1.698526905E12, 286.8], [1.698526925E12, 240.6], [1.698526945E12, 246.8], [1.69852689E12, 277.0], [1.69852691E12, 278.2], [1.69852693E12, 241.2], [1.69852695E12, 0.4]], "isOverall": false, "label": "GET /meetings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69852695E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.698526885E12, "maxY": 288.4, "series": [{"data": [[1.698526895E12, 286.4], [1.698526915E12, 255.6], [1.698526935E12, 249.6], [1.6985269E12, 288.4], [1.69852692E12, 232.0], [1.69852694E12, 245.2], [1.698526885E12, 33.0], [1.698526905E12, 286.8], [1.698526925E12, 240.6], [1.698526945E12, 246.8], [1.69852689E12, 277.0], [1.69852691E12, 278.2], [1.69852693E12, 241.2], [1.69852695E12, 0.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69852695E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

