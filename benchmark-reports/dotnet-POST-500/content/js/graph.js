/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 3995.0, "series": [{"data": [[0.0, 10.0], [0.1, 15.0], [0.2, 16.0], [0.3, 17.0], [0.4, 19.0], [0.5, 20.0], [0.6, 22.0], [0.7, 23.0], [0.8, 25.0], [0.9, 26.0], [1.0, 27.0], [1.1, 29.0], [1.2, 30.0], [1.3, 31.0], [1.4, 32.0], [1.5, 33.0], [1.6, 34.0], [1.7, 35.0], [1.8, 36.0], [1.9, 37.0], [2.0, 37.0], [2.1, 38.0], [2.2, 39.0], [2.3, 40.0], [2.4, 41.0], [2.5, 42.0], [2.6, 43.0], [2.7, 43.0], [2.8, 45.0], [2.9, 46.0], [3.0, 47.0], [3.1, 48.0], [3.2, 49.0], [3.3, 50.0], [3.4, 51.0], [3.5, 52.0], [3.6, 53.0], [3.7, 54.0], [3.8, 55.0], [3.9, 56.0], [4.0, 56.0], [4.1, 57.0], [4.2, 58.0], [4.3, 59.0], [4.4, 59.0], [4.5, 60.0], [4.6, 60.0], [4.7, 61.0], [4.8, 62.0], [4.9, 62.0], [5.0, 63.0], [5.1, 64.0], [5.2, 65.0], [5.3, 65.0], [5.4, 66.0], [5.5, 67.0], [5.6, 67.0], [5.7, 68.0], [5.8, 69.0], [5.9, 70.0], [6.0, 71.0], [6.1, 72.0], [6.2, 72.0], [6.3, 73.0], [6.4, 74.0], [6.5, 76.0], [6.6, 77.0], [6.7, 78.0], [6.8, 79.0], [6.9, 80.0], [7.0, 81.0], [7.1, 82.0], [7.2, 83.0], [7.3, 84.0], [7.4, 86.0], [7.5, 88.0], [7.6, 89.0], [7.7, 90.0], [7.8, 91.0], [7.9, 92.0], [8.0, 94.0], [8.1, 95.0], [8.2, 96.0], [8.3, 96.0], [8.4, 97.0], [8.5, 98.0], [8.6, 98.0], [8.7, 99.0], [8.8, 100.0], [8.9, 100.0], [9.0, 101.0], [9.1, 101.0], [9.2, 102.0], [9.3, 103.0], [9.4, 103.0], [9.5, 104.0], [9.6, 105.0], [9.7, 106.0], [9.8, 106.0], [9.9, 107.0], [10.0, 108.0], [10.1, 109.0], [10.2, 111.0], [10.3, 112.0], [10.4, 113.0], [10.5, 114.0], [10.6, 115.0], [10.7, 116.0], [10.8, 117.0], [10.9, 117.0], [11.0, 118.0], [11.1, 119.0], [11.2, 119.0], [11.3, 120.0], [11.4, 120.0], [11.5, 121.0], [11.6, 122.0], [11.7, 122.0], [11.8, 123.0], [11.9, 123.0], [12.0, 124.0], [12.1, 124.0], [12.2, 125.0], [12.3, 126.0], [12.4, 126.0], [12.5, 127.0], [12.6, 127.0], [12.7, 128.0], [12.8, 129.0], [12.9, 131.0], [13.0, 132.0], [13.1, 134.0], [13.2, 136.0], [13.3, 138.0], [13.4, 142.0], [13.5, 148.0], [13.6, 151.0], [13.7, 152.0], [13.8, 152.0], [13.9, 153.0], [14.0, 154.0], [14.1, 154.0], [14.2, 155.0], [14.3, 155.0], [14.4, 156.0], [14.5, 156.0], [14.6, 157.0], [14.7, 157.0], [14.8, 158.0], [14.9, 158.0], [15.0, 159.0], [15.1, 159.0], [15.2, 159.0], [15.3, 160.0], [15.4, 161.0], [15.5, 162.0], [15.6, 162.0], [15.7, 163.0], [15.8, 163.0], [15.9, 164.0], [16.0, 165.0], [16.1, 166.0], [16.2, 167.0], [16.3, 169.0], [16.4, 171.0], [16.5, 173.0], [16.6, 175.0], [16.7, 177.0], [16.8, 179.0], [16.9, 180.0], [17.0, 182.0], [17.1, 182.0], [17.2, 183.0], [17.3, 185.0], [17.4, 186.0], [17.5, 187.0], [17.6, 188.0], [17.7, 189.0], [17.8, 190.0], [17.9, 191.0], [18.0, 191.0], [18.1, 192.0], [18.2, 193.0], [18.3, 194.0], [18.4, 194.0], [18.5, 195.0], [18.6, 195.0], [18.7, 196.0], [18.8, 196.0], [18.9, 197.0], [19.0, 198.0], [19.1, 198.0], [19.2, 198.0], [19.3, 199.0], [19.4, 200.0], [19.5, 200.0], [19.6, 201.0], [19.7, 202.0], [19.8, 202.0], [19.9, 203.0], [20.0, 203.0], [20.1, 204.0], [20.2, 205.0], [20.3, 205.0], [20.4, 206.0], [20.5, 206.0], [20.6, 207.0], [20.7, 208.0], [20.8, 209.0], [20.9, 210.0], [21.0, 210.0], [21.1, 211.0], [21.2, 212.0], [21.3, 214.0], [21.4, 215.0], [21.5, 218.0], [21.6, 220.0], [21.7, 222.0], [21.8, 224.0], [21.9, 227.0], [22.0, 229.0], [22.1, 233.0], [22.2, 237.0], [22.3, 241.0], [22.4, 244.0], [22.5, 246.0], [22.6, 248.0], [22.7, 249.0], [22.8, 251.0], [22.9, 253.0], [23.0, 256.0], [23.1, 259.0], [23.2, 263.0], [23.3, 266.0], [23.4, 268.0], [23.5, 270.0], [23.6, 272.0], [23.7, 274.0], [23.8, 277.0], [23.9, 281.0], [24.0, 283.0], [24.1, 285.0], [24.2, 288.0], [24.3, 289.0], [24.4, 293.0], [24.5, 296.0], [24.6, 298.0], [24.7, 300.0], [24.8, 301.0], [24.9, 302.0], [25.0, 303.0], [25.1, 304.0], [25.2, 305.0], [25.3, 307.0], [25.4, 309.0], [25.5, 311.0], [25.6, 312.0], [25.7, 313.0], [25.8, 315.0], [25.9, 316.0], [26.0, 317.0], [26.1, 324.0], [26.2, 329.0], [26.3, 332.0], [26.4, 335.0], [26.5, 342.0], [26.6, 346.0], [26.7, 359.0], [26.8, 363.0], [26.9, 369.0], [27.0, 373.0], [27.1, 385.0], [27.2, 387.0], [27.3, 390.0], [27.4, 394.0], [27.5, 395.0], [27.6, 396.0], [27.7, 398.0], [27.8, 400.0], [27.9, 401.0], [28.0, 402.0], [28.1, 403.0], [28.2, 404.0], [28.3, 405.0], [28.4, 406.0], [28.5, 407.0], [28.6, 408.0], [28.7, 409.0], [28.8, 410.0], [28.9, 411.0], [29.0, 412.0], [29.1, 414.0], [29.2, 415.0], [29.3, 416.0], [29.4, 417.0], [29.5, 418.0], [29.6, 419.0], [29.7, 420.0], [29.8, 420.0], [29.9, 421.0], [30.0, 421.0], [30.1, 422.0], [30.2, 423.0], [30.3, 423.0], [30.4, 424.0], [30.5, 424.0], [30.6, 425.0], [30.7, 425.0], [30.8, 426.0], [30.9, 426.0], [31.0, 427.0], [31.1, 427.0], [31.2, 427.0], [31.3, 428.0], [31.4, 428.0], [31.5, 428.0], [31.6, 429.0], [31.7, 429.0], [31.8, 429.0], [31.9, 430.0], [32.0, 430.0], [32.1, 431.0], [32.2, 431.0], [32.3, 431.0], [32.4, 432.0], [32.5, 432.0], [32.6, 432.0], [32.7, 433.0], [32.8, 433.0], [32.9, 433.0], [33.0, 434.0], [33.1, 434.0], [33.2, 434.0], [33.3, 435.0], [33.4, 435.0], [33.5, 436.0], [33.6, 436.0], [33.7, 437.0], [33.8, 437.0], [33.9, 438.0], [34.0, 438.0], [34.1, 439.0], [34.2, 439.0], [34.3, 439.0], [34.4, 440.0], [34.5, 441.0], [34.6, 441.0], [34.7, 442.0], [34.8, 442.0], [34.9, 443.0], [35.0, 444.0], [35.1, 444.0], [35.2, 445.0], [35.3, 446.0], [35.4, 446.0], [35.5, 447.0], [35.6, 448.0], [35.7, 449.0], [35.8, 450.0], [35.9, 451.0], [36.0, 452.0], [36.1, 453.0], [36.2, 454.0], [36.3, 455.0], [36.4, 456.0], [36.5, 457.0], [36.6, 458.0], [36.7, 459.0], [36.8, 460.0], [36.9, 461.0], [37.0, 462.0], [37.1, 463.0], [37.2, 464.0], [37.3, 465.0], [37.4, 466.0], [37.5, 467.0], [37.6, 468.0], [37.7, 469.0], [37.8, 469.0], [37.9, 470.0], [38.0, 471.0], [38.1, 472.0], [38.2, 473.0], [38.3, 475.0], [38.4, 476.0], [38.5, 477.0], [38.6, 478.0], [38.7, 480.0], [38.8, 481.0], [38.9, 483.0], [39.0, 485.0], [39.1, 489.0], [39.2, 492.0], [39.3, 494.0], [39.4, 502.0], [39.5, 505.0], [39.6, 506.0], [39.7, 509.0], [39.8, 510.0], [39.9, 512.0], [40.0, 513.0], [40.1, 513.0], [40.2, 514.0], [40.3, 515.0], [40.4, 515.0], [40.5, 516.0], [40.6, 517.0], [40.7, 518.0], [40.8, 518.0], [40.9, 519.0], [41.0, 519.0], [41.1, 520.0], [41.2, 520.0], [41.3, 521.0], [41.4, 521.0], [41.5, 522.0], [41.6, 523.0], [41.7, 523.0], [41.8, 524.0], [41.9, 524.0], [42.0, 525.0], [42.1, 525.0], [42.2, 526.0], [42.3, 526.0], [42.4, 526.0], [42.5, 527.0], [42.6, 528.0], [42.7, 528.0], [42.8, 529.0], [42.9, 530.0], [43.0, 530.0], [43.1, 531.0], [43.2, 532.0], [43.3, 533.0], [43.4, 534.0], [43.5, 535.0], [43.6, 536.0], [43.7, 537.0], [43.8, 537.0], [43.9, 538.0], [44.0, 539.0], [44.1, 539.0], [44.2, 540.0], [44.3, 540.0], [44.4, 541.0], [44.5, 541.0], [44.6, 541.0], [44.7, 542.0], [44.8, 542.0], [44.9, 543.0], [45.0, 543.0], [45.1, 543.0], [45.2, 544.0], [45.3, 544.0], [45.4, 544.0], [45.5, 545.0], [45.6, 545.0], [45.7, 545.0], [45.8, 546.0], [45.9, 547.0], [46.0, 547.0], [46.1, 547.0], [46.2, 548.0], [46.3, 548.0], [46.4, 549.0], [46.5, 549.0], [46.6, 549.0], [46.7, 550.0], [46.8, 550.0], [46.9, 551.0], [47.0, 551.0], [47.1, 552.0], [47.2, 552.0], [47.3, 552.0], [47.4, 553.0], [47.5, 553.0], [47.6, 553.0], [47.7, 554.0], [47.8, 554.0], [47.9, 555.0], [48.0, 555.0], [48.1, 556.0], [48.2, 556.0], [48.3, 557.0], [48.4, 557.0], [48.5, 557.0], [48.6, 558.0], [48.7, 558.0], [48.8, 559.0], [48.9, 559.0], [49.0, 560.0], [49.1, 560.0], [49.2, 561.0], [49.3, 561.0], [49.4, 562.0], [49.5, 562.0], [49.6, 563.0], [49.7, 563.0], [49.8, 564.0], [49.9, 564.0], [50.0, 565.0], [50.1, 565.0], [50.2, 566.0], [50.3, 566.0], [50.4, 566.0], [50.5, 567.0], [50.6, 567.0], [50.7, 568.0], [50.8, 568.0], [50.9, 569.0], [51.0, 569.0], [51.1, 570.0], [51.2, 570.0], [51.3, 571.0], [51.4, 571.0], [51.5, 572.0], [51.6, 573.0], [51.7, 574.0], [51.8, 575.0], [51.9, 576.0], [52.0, 577.0], [52.1, 578.0], [52.2, 579.0], [52.3, 580.0], [52.4, 582.0], [52.5, 582.0], [52.6, 584.0], [52.7, 585.0], [52.8, 586.0], [52.9, 588.0], [53.0, 589.0], [53.1, 591.0], [53.2, 592.0], [53.3, 594.0], [53.4, 596.0], [53.5, 597.0], [53.6, 600.0], [53.7, 602.0], [53.8, 604.0], [53.9, 607.0], [54.0, 608.0], [54.1, 609.0], [54.2, 610.0], [54.3, 611.0], [54.4, 612.0], [54.5, 613.0], [54.6, 613.0], [54.7, 614.0], [54.8, 614.0], [54.9, 615.0], [55.0, 615.0], [55.1, 616.0], [55.2, 616.0], [55.3, 616.0], [55.4, 617.0], [55.5, 617.0], [55.6, 617.0], [55.7, 618.0], [55.8, 618.0], [55.9, 619.0], [56.0, 619.0], [56.1, 620.0], [56.2, 620.0], [56.3, 620.0], [56.4, 620.0], [56.5, 621.0], [56.6, 621.0], [56.7, 622.0], [56.8, 622.0], [56.9, 622.0], [57.0, 623.0], [57.1, 623.0], [57.2, 623.0], [57.3, 624.0], [57.4, 624.0], [57.5, 625.0], [57.6, 625.0], [57.7, 625.0], [57.8, 626.0], [57.9, 626.0], [58.0, 627.0], [58.1, 627.0], [58.2, 627.0], [58.3, 628.0], [58.4, 628.0], [58.5, 628.0], [58.6, 628.0], [58.7, 629.0], [58.8, 629.0], [58.9, 629.0], [59.0, 630.0], [59.1, 630.0], [59.2, 630.0], [59.3, 630.0], [59.4, 631.0], [59.5, 631.0], [59.6, 631.0], [59.7, 631.0], [59.8, 632.0], [59.9, 632.0], [60.0, 632.0], [60.1, 632.0], [60.2, 632.0], [60.3, 633.0], [60.4, 633.0], [60.5, 633.0], [60.6, 633.0], [60.7, 633.0], [60.8, 634.0], [60.9, 634.0], [61.0, 634.0], [61.1, 634.0], [61.2, 634.0], [61.3, 635.0], [61.4, 635.0], [61.5, 635.0], [61.6, 635.0], [61.7, 635.0], [61.8, 636.0], [61.9, 636.0], [62.0, 636.0], [62.1, 636.0], [62.2, 636.0], [62.3, 636.0], [62.4, 637.0], [62.5, 637.0], [62.6, 637.0], [62.7, 637.0], [62.8, 637.0], [62.9, 637.0], [63.0, 638.0], [63.1, 638.0], [63.2, 638.0], [63.3, 638.0], [63.4, 638.0], [63.5, 638.0], [63.6, 639.0], [63.7, 639.0], [63.8, 639.0], [63.9, 639.0], [64.0, 639.0], [64.1, 639.0], [64.2, 640.0], [64.3, 640.0], [64.4, 640.0], [64.5, 640.0], [64.6, 640.0], [64.7, 640.0], [64.8, 640.0], [64.9, 641.0], [65.0, 641.0], [65.1, 641.0], [65.2, 641.0], [65.3, 641.0], [65.4, 641.0], [65.5, 642.0], [65.6, 642.0], [65.7, 642.0], [65.8, 642.0], [65.9, 642.0], [66.0, 642.0], [66.1, 643.0], [66.2, 643.0], [66.3, 643.0], [66.4, 643.0], [66.5, 643.0], [66.6, 643.0], [66.7, 643.0], [66.8, 644.0], [66.9, 644.0], [67.0, 644.0], [67.1, 644.0], [67.2, 644.0], [67.3, 644.0], [67.4, 645.0], [67.5, 645.0], [67.6, 645.0], [67.7, 645.0], [67.8, 645.0], [67.9, 645.0], [68.0, 646.0], [68.1, 646.0], [68.2, 646.0], [68.3, 646.0], [68.4, 646.0], [68.5, 647.0], [68.6, 647.0], [68.7, 647.0], [68.8, 647.0], [68.9, 647.0], [69.0, 647.0], [69.1, 648.0], [69.2, 648.0], [69.3, 648.0], [69.4, 648.0], [69.5, 648.0], [69.6, 648.0], [69.7, 649.0], [69.8, 649.0], [69.9, 649.0], [70.0, 649.0], [70.1, 649.0], [70.2, 650.0], [70.3, 650.0], [70.4, 650.0], [70.5, 650.0], [70.6, 650.0], [70.7, 651.0], [70.8, 651.0], [70.9, 651.0], [71.0, 651.0], [71.1, 651.0], [71.2, 651.0], [71.3, 652.0], [71.4, 652.0], [71.5, 652.0], [71.6, 652.0], [71.7, 652.0], [71.8, 653.0], [71.9, 653.0], [72.0, 653.0], [72.1, 653.0], [72.2, 653.0], [72.3, 654.0], [72.4, 654.0], [72.5, 654.0], [72.6, 654.0], [72.7, 655.0], [72.8, 655.0], [72.9, 655.0], [73.0, 655.0], [73.1, 655.0], [73.2, 656.0], [73.3, 656.0], [73.4, 656.0], [73.5, 656.0], [73.6, 656.0], [73.7, 657.0], [73.8, 657.0], [73.9, 657.0], [74.0, 657.0], [74.1, 657.0], [74.2, 658.0], [74.3, 658.0], [74.4, 658.0], [74.5, 658.0], [74.6, 659.0], [74.7, 659.0], [74.8, 659.0], [74.9, 659.0], [75.0, 660.0], [75.1, 660.0], [75.2, 660.0], [75.3, 660.0], [75.4, 661.0], [75.5, 661.0], [75.6, 661.0], [75.7, 661.0], [75.8, 662.0], [75.9, 662.0], [76.0, 662.0], [76.1, 662.0], [76.2, 662.0], [76.3, 663.0], [76.4, 663.0], [76.5, 663.0], [76.6, 663.0], [76.7, 664.0], [76.8, 664.0], [76.9, 664.0], [77.0, 664.0], [77.1, 664.0], [77.2, 665.0], [77.3, 665.0], [77.4, 665.0], [77.5, 665.0], [77.6, 666.0], [77.7, 666.0], [77.8, 666.0], [77.9, 666.0], [78.0, 667.0], [78.1, 667.0], [78.2, 667.0], [78.3, 667.0], [78.4, 668.0], [78.5, 668.0], [78.6, 668.0], [78.7, 668.0], [78.8, 669.0], [78.9, 669.0], [79.0, 669.0], [79.1, 669.0], [79.2, 670.0], [79.3, 670.0], [79.4, 670.0], [79.5, 670.0], [79.6, 671.0], [79.7, 671.0], [79.8, 671.0], [79.9, 671.0], [80.0, 672.0], [80.1, 672.0], [80.2, 672.0], [80.3, 672.0], [80.4, 673.0], [80.5, 673.0], [80.6, 673.0], [80.7, 673.0], [80.8, 674.0], [80.9, 674.0], [81.0, 674.0], [81.1, 674.0], [81.2, 675.0], [81.3, 675.0], [81.4, 675.0], [81.5, 676.0], [81.6, 676.0], [81.7, 676.0], [81.8, 676.0], [81.9, 677.0], [82.0, 677.0], [82.1, 678.0], [82.2, 678.0], [82.3, 679.0], [82.4, 679.0], [82.5, 680.0], [82.6, 680.0], [82.7, 681.0], [82.8, 681.0], [82.9, 682.0], [83.0, 682.0], [83.1, 683.0], [83.2, 683.0], [83.3, 684.0], [83.4, 684.0], [83.5, 685.0], [83.6, 685.0], [83.7, 686.0], [83.8, 687.0], [83.9, 687.0], [84.0, 688.0], [84.1, 689.0], [84.2, 690.0], [84.3, 690.0], [84.4, 691.0], [84.5, 692.0], [84.6, 693.0], [84.7, 694.0], [84.8, 695.0], [84.9, 696.0], [85.0, 697.0], [85.1, 698.0], [85.2, 699.0], [85.3, 700.0], [85.4, 701.0], [85.5, 702.0], [85.6, 703.0], [85.7, 703.0], [85.8, 704.0], [85.9, 704.0], [86.0, 705.0], [86.1, 705.0], [86.2, 706.0], [86.3, 707.0], [86.4, 707.0], [86.5, 708.0], [86.6, 709.0], [86.7, 711.0], [86.8, 712.0], [86.9, 714.0], [87.0, 718.0], [87.1, 721.0], [87.2, 723.0], [87.3, 725.0], [87.4, 727.0], [87.5, 728.0], [87.6, 729.0], [87.7, 730.0], [87.8, 732.0], [87.9, 734.0], [88.0, 735.0], [88.1, 736.0], [88.2, 737.0], [88.3, 737.0], [88.4, 738.0], [88.5, 739.0], [88.6, 740.0], [88.7, 741.0], [88.8, 742.0], [88.9, 743.0], [89.0, 745.0], [89.1, 746.0], [89.2, 748.0], [89.3, 749.0], [89.4, 750.0], [89.5, 751.0], [89.6, 752.0], [89.7, 753.0], [89.8, 754.0], [89.9, 755.0], [90.0, 756.0], [90.1, 757.0], [90.2, 758.0], [90.3, 759.0], [90.4, 760.0], [90.5, 762.0], [90.6, 764.0], [90.7, 766.0], [90.8, 768.0], [90.9, 770.0], [91.0, 772.0], [91.1, 774.0], [91.2, 776.0], [91.3, 779.0], [91.4, 784.0], [91.5, 788.0], [91.6, 792.0], [91.7, 796.0], [91.8, 799.0], [91.9, 803.0], [92.0, 807.0], [92.1, 809.0], [92.2, 812.0], [92.3, 813.0], [92.4, 815.0], [92.5, 818.0], [92.6, 821.0], [92.7, 824.0], [92.8, 827.0], [92.9, 830.0], [93.0, 832.0], [93.1, 835.0], [93.2, 836.0], [93.3, 838.0], [93.4, 839.0], [93.5, 841.0], [93.6, 842.0], [93.7, 844.0], [93.8, 849.0], [93.9, 858.0], [94.0, 865.0], [94.1, 872.0], [94.2, 880.0], [94.3, 884.0], [94.4, 887.0], [94.5, 890.0], [94.6, 904.0], [94.7, 910.0], [94.8, 912.0], [94.9, 916.0], [95.0, 918.0], [95.1, 920.0], [95.2, 922.0], [95.3, 925.0], [95.4, 927.0], [95.5, 930.0], [95.6, 935.0], [95.7, 938.0], [95.8, 947.0], [95.9, 1047.0], [96.0, 1121.0], [96.1, 1128.0], [96.2, 1143.0], [96.3, 1155.0], [96.4, 1167.0], [96.5, 1198.0], [96.6, 1226.0], [96.7, 1247.0], [96.8, 1278.0], [96.9, 1372.0], [97.0, 1388.0], [97.1, 1403.0], [97.2, 1408.0], [97.3, 1414.0], [97.4, 1429.0], [97.5, 1437.0], [97.6, 1450.0], [97.7, 1463.0], [97.8, 1481.0], [97.9, 1499.0], [98.0, 1507.0], [98.1, 1523.0], [98.2, 1568.0], [98.3, 2013.0], [98.4, 2024.0], [98.5, 2033.0], [98.6, 2045.0], [98.7, 2055.0], [98.8, 2071.0], [98.9, 3756.0], [99.0, 3765.0], [99.1, 3772.0], [99.2, 3783.0], [99.3, 3787.0], [99.4, 3797.0], [99.5, 3821.0], [99.6, 3831.0], [99.7, 3856.0], [99.8, 3902.0], [99.9, 3932.0]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 13222.0, "series": [{"data": [[0.0, 3661.0], [600.0, 13222.0], [700.0, 2742.0], [800.0, 1153.0], [900.0, 550.0], [1000.0, 31.0], [1100.0, 233.0], [1200.0, 142.0], [1300.0, 88.0], [1400.0, 353.0], [1500.0, 122.0], [100.0, 4417.0], [1600.0, 6.0], [1700.0, 10.0], [1800.0, 9.0], [1900.0, 6.0], [2000.0, 220.0], [2500.0, 2.0], [2700.0, 8.0], [200.0, 2232.0], [3400.0, 6.0], [3700.0, 239.0], [3800.0, 159.0], [3900.0, 86.0], [300.0, 1285.0], [400.0, 4839.0], [500.0, 5931.0]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 869.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24442.0, "series": [{"data": [[0.0, 16441.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 24442.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 869.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 45.51009340162698, "minX": 1.69858738E12, "maxY": 500.0, "series": [{"data": [[1.69858739E12, 203.92941176470558], [1.69858743E12, 500.0], [1.69858741E12, 500.0], [1.698587385E12, 120.21469194312768], [1.698587425E12, 500.0], [1.698587405E12, 450.85783892232763], [1.69858738E12, 45.51009340162698], [1.69858742E12, 500.0], [1.6985874E12, 369.84130072262343], [1.698587395E12, 289.08839611178615], [1.69858744E12, 337.0984251968501], [1.698587435E12, 500.0], [1.698587415E12, 500.0]], "isOverall": false, "label": "MinimalMeet-dotnet", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858744E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 15.685714285714287, "minX": 5.0, "maxY": 1355.0, "series": [{"data": [[5.0, 1355.0], [7.0, 180.0], [8.0, 137.87878787878788], [9.0, 61.43333333333333], [10.0, 15.685714285714287], [11.0, 18.17647058823529], [12.0, 19.057142857142857], [13.0, 145.32558139534882], [14.0, 20.564102564102566], [15.0, 23.35897435897436], [16.0, 138.19444444444446], [17.0, 24.736842105263158], [18.0, 24.552631578947377], [19.0, 30.051282051282055], [20.0, 27.720930232558143], [21.0, 187.25581395348837], [22.0, 35.36111111111109], [23.0, 34.650000000000006], [24.0, 119.65217391304347], [25.0, 33.95238095238095], [26.0, 39.24324324324324], [27.0, 34.42], [28.0, 33.367346938775505], [29.0, 169.23529411764704], [30.0, 34.93333333333332], [31.0, 38.38000000000001], [32.0, 124.58333333333333], [33.0, 39.56000000000002], [34.0, 42.73469387755102], [35.0, 47.45945945945946], [36.0, 50.02222222222224], [37.0, 163.48214285714286], [38.0, 42.63461538461539], [39.0, 42.64150943396226], [40.0, 150.6829268292683], [41.0, 56.7560975609756], [42.0, 55.76923076923076], [43.0, 50.13461538461539], [44.0, 54.51162790697675], [45.0, 160.3709677419355], [46.0, 50.6875], [47.0, 59.853658536585364], [48.0, 151.7173913043478], [49.0, 64.41666666666669], [50.0, 59.82692307692308], [51.0, 58.33333333333334], [52.0, 59.55769230769232], [53.0, 169.6833333333333], [54.0, 57.072727272727285], [55.0, 61.92000000000001], [56.0, 149.08333333333331], [57.0, 93.01754385964911], [58.0, 61.178571428571416], [59.0, 66.77551020408161], [60.0, 65.4814814814815], [61.0, 156.28333333333333], [62.0, 66.57692307692308], [63.0, 70.59615384615384], [64.0, 138.3448275862069], [65.0, 71.80392156862747], [66.0, 72.90566037735849], [67.0, 77.3529411764706], [68.0, 80.24561403508773], [69.0, 208.6470588235294], [70.0, 79.93877551020407], [71.0, 85.21428571428571], [72.0, 182.4318181818182], [73.0, 95.98181818181817], [74.0, 88.64000000000001], [75.0, 86.15094339622642], [76.0, 80.7142857142857], [77.0, 186.06451612903226], [78.0, 86.21153846153844], [79.0, 90.01923076923077], [80.0, 183.06521739130437], [81.0, 102.65999999999998], [82.0, 102.77272727272728], [83.0, 102.00000000000001], [84.0, 108.33333333333334], [85.0, 222.17857142857142], [86.0, 97.1153846153846], [87.0, 96.74074074074072], [88.0, 163.8833333333333], [89.0, 97.49999999999999], [90.0, 98.74137931034484], [91.0, 104.42500000000001], [92.0, 112.30188679245285], [93.0, 222.140350877193], [94.0, 100.44827586206898], [95.0, 98.56140350877192], [96.0, 174.96296296296293], [97.0, 109.94117647058822], [98.0, 116.55102040816325], [99.0, 110.08620689655172], [100.0, 105.5438596491228], [101.0, 244.58], [102.0, 121.31914893617021], [103.0, 125.18518518518518], [104.0, 200.2549019607843], [105.0, 117.64814814814818], [106.0, 118.68888888888887], [107.0, 125.0888888888889], [108.0, 132.98148148148144], [109.0, 230.85483870967738], [110.0, 119.3220338983051], [111.0, 118.3061224489796], [112.0, 183.6290322580645], [113.0, 123.03999999999998], [114.0, 122.67796610169495], [115.0, 125.6734693877551], [116.0, 126.11864406779661], [117.0, 238.77192982456137], [118.0, 125.65000000000002], [119.0, 124.21052631578945], [120.0, 204.84615384615384], [121.0, 135.0178571428571], [122.0, 138.06249999999994], [123.0, 141.14893617021278], [124.0, 157.8], [125.0, 276.0178571428571], [126.0, 161.9512195121951], [127.0, 157.94230769230774], [128.0, 234.23529411764707], [129.0, 153.06122448979596], [130.0, 154.55319148936172], [131.0, 156.08333333333331], [132.0, 156.21818181818185], [133.0, 264.7068965517242], [134.0, 153.97999999999993], [135.0, 158.95918367346943], [136.0, 245.74999999999997], [137.0, 166.35849056603774], [138.0, 159.14285714285714], [139.0, 153.36170212765956], [140.0, 155.09090909090907], [141.0, 265.49152542372883], [142.0, 159.18644067796615], [143.0, 160.00000000000003], [144.0, 235.9038461538461], [145.0, 159.19642857142853], [146.0, 167.6888888888889], [147.0, 175.1], [148.0, 183.31914893617017], [149.0, 300.84905660377365], [150.0, 181.29787234042558], [151.0, 183.18750000000003], [152.0, 263.313725490196], [153.0, 187.68888888888893], [154.0, 194.06382978723406], [155.0, 194.10204081632656], [156.0, 193.68749999999997], [157.0, 302.92857142857144], [158.0, 193.1707317073171], [159.0, 197.83333333333337], [160.0, 275.24], [161.0, 207.7916666666667], [162.0, 190.4444444444444], [163.0, 174.52459016393448], [164.0, 163.21568627450986], [165.0, 277.7666666666667], [166.0, 181.37500000000003], [167.0, 187.45833333333337], [168.0, 262.8571428571429], [169.0, 209.77777777777777], [170.0, 242.15384615384616], [171.0, 284.62500000000006], [172.0, 309.17499999999995], [173.0, 522.3448275862069], [174.0, 358.33333333333337], [175.0, 378.75000000000006], [176.0, 418.92857142857144], [177.0, 321.5588235294118], [178.0, 324.09375000000006], [179.0, 322.0833333333333], [180.0, 309.0652173913043], [181.0, 398.89285714285717], [182.0, 263.16981132075466], [183.0, 222.65384615384613], [184.0, 267.6610169491525], [185.0, 204.3846153846154], [186.0, 202.12727272727273], [187.0, 199.875], [188.0, 198.50000000000006], [189.0, 290.6268656716417], [190.0, 192.91228070175438], [191.0, 194.63636363636365], [192.0, 269.0892857142857], [193.0, 234.01886792452834], [194.0, 212.37931034482753], [195.0, 214.5098039215687], [196.0, 209.83870967741936], [197.0, 295.75862068965523], [198.0, 205.50000000000006], [199.0, 202.19642857142856], [200.0, 262.2], [201.0, 203.77777777777777], [202.0, 209.96153846153848], [203.0, 217.58490566037736], [204.0, 223.87272727272727], [205.0, 325.64516129032256], [206.0, 237.1025641025641], [207.0, 235.3333333333333], [208.0, 302.2727272727273], [209.0, 253.90909090909096], [210.0, 269.39285714285717], [211.0, 283.741935483871], [212.0, 315.44444444444446], [213.0, 572.925925925926], [214.0, 384.7941176470588], [215.0, 418.5], [216.0, 501.6470588235294], [217.0, 453.5], [218.0, 424.8448275862069], [219.0, 345.73584905660374], [220.0, 296.02040816326536], [221.0, 463.0], [222.0, 294.38709677419354], [223.0, 330.4782608695652], [224.0, 486.75], [225.0, 395.29411764705884], [226.0, 427.88888888888886], [227.0, 445.96875000000006], [228.0, 468.6944444444444], [229.0, 556.8222222222222], [230.0, 432.0204081632652], [231.0, 335.78333333333336], [232.0, 362.33333333333326], [233.0, 304.90625], [234.0, 307.87499999999994], [235.0, 285.7678571428571], [236.0, 312.0], [237.0, 467.28205128205127], [238.0, 320.24489795918356], [239.0, 301.4385964912281], [240.0, 361.5967741935484], [241.0, 277.2], [242.0, 253.6545454545454], [243.0, 247.83928571428575], [244.0, 247.01666666666668], [245.0, 361.00000000000006], [246.0, 256.4181818181818], [247.0, 265.18367346938777], [248.0, 331.28333333333336], [249.0, 278.18604651162786], [250.0, 285.2181818181819], [251.0, 293.0232558139535], [252.0, 310.5555555555556], [253.0, 474.17499999999995], [254.0, 357.5806451612903], [255.0, 376.6176470588234], [257.0, 415.5333333333334], [256.0, 495.9705882352941], [258.0, 438.2564102564103], [259.0, 435.2790697674418], [260.0, 432.4594594594594], [261.0, 568.7105263157895], [262.0, 421.46666666666675], [263.0, 408.4571428571428], [264.0, 509.3125], [270.0, 547.4814814814814], [271.0, 573.3499999999999], [268.0, 502.65217391304344], [269.0, 684.5625], [265.0, 449.47058823529414], [266.0, 456.06666666666666], [267.0, 489.5], [273.0, 625.9130434782608], [272.0, 821.4285714285714], [274.0, 626.9000000000001], [275.0, 595.2571428571429], [276.0, 577.3939393939396], [277.0, 699.8648648648648], [278.0, 550.1714285714285], [279.0, 515.7727272727275], [280.0, 518.3636363636364], [286.0, 420.075], [287.0, 430.76923076923083], [284.0, 431.08823529411774], [285.0, 542.2444444444445], [281.0, 445.1818181818182], [282.0, 435.8717948717949], [283.0, 431.24999999999994], [289.0, 433.52631578947364], [288.0, 507.9318181818181], [290.0, 435.3255813953488], [291.0, 426.76315789473676], [292.0, 430.20000000000005], [293.0, 564.8499999999999], [294.0, 436.38235294117646], [295.0, 442.2820512820513], [296.0, 529.2820512820514], [302.0, 448.0416666666666], [303.0, 428.40909090909093], [300.0, 453.8536585365853], [301.0, 564.5777777777779], [297.0, 454.4523809523811], [298.0, 447.4090909090909], [299.0, 448.27272727272725], [305.0, 428.0], [304.0, 482.55319148936167], [306.0, 422.1428571428573], [307.0, 412.88372093023264], [308.0, 407.0476190476191], [309.0, 493.53999999999996], [310.0, 415.72093023255815], [311.0, 408.7169811320754], [312.0, 459.5116279069768], [318.0, 399.1111111111111], [319.0, 401.65909090909105], [316.0, 392.89285714285705], [317.0, 472.4222222222222], [313.0, 407.25999999999993], [314.0, 402.9782608695652], [315.0, 399.3913043478261], [321.0, 410.8490566037736], [320.0, 456.08888888888885], [322.0, 419.7894736842105], [323.0, 427.795918367347], [324.0, 431.125], [325.0, 506.5652173913043], [326.0, 432.64583333333337], [327.0, 433.0851063829788], [328.0, 477.59999999999997], [334.0, 471.85365853658544], [335.0, 467.33333333333326], [332.0, 472.38095238095246], [333.0, 537.5283018867926], [329.0, 432.04999999999995], [330.0, 436.0975609756097], [331.0, 460.4782608695653], [337.0, 464.4081632653061], [336.0, 512.1333333333333], [338.0, 454.8571428571428], [339.0, 424.64583333333326], [340.0, 425.4583333333333], [341.0, 490.0], [342.0, 426.13043478260863], [343.0, 428.4081632653061], [344.0, 472.2857142857142], [350.0, 435.7500000000001], [351.0, 435.9782608695652], [348.0, 429.43749999999994], [349.0, 504.4897959183673], [345.0, 422.95833333333337], [346.0, 426.53061224489795], [347.0, 426.17391304347825], [353.0, 442.6458333333334], [352.0, 481.78846153846155], [354.0, 442.80851063829783], [355.0, 440.7692307692308], [356.0, 436.3877551020409], [357.0, 508.4897959183674], [358.0, 441.4222222222223], [359.0, 445.9583333333334], [360.0, 494.3111111111111], [366.0, 467.09523809523813], [367.0, 468.1555555555554], [364.0, 463.9056603773585], [365.0, 531.0196078431372], [361.0, 453.82608695652164], [362.0, 457.5102040816327], [363.0, 461.25], [369.0, 469.5217391304347], [368.0, 511.85714285714283], [370.0, 472.5531914893616], [371.0, 475.9047619047619], [372.0, 479.99999999999994], [373.0, 541.8679245283018], [374.0, 478.8684210526316], [375.0, 504.1666666666667], [376.0, 619.1428571428571], [382.0, 589.4210526315788], [383.0, 619.2083333333335], [380.0, 557.7037037037036], [381.0, 643.054054054054], [377.0, 555.7179487179488], [378.0, 552.7037037037037], [379.0, 545.7115384615388], [385.0, 672.3333333333334], [384.0, 708.1363636363634], [386.0, 682.0], [387.0, 645.0833333333334], [388.0, 646.7250000000001], [389.0, 757.8965517241379], [390.0, 707.3000000000001], [391.0, 728.9642857142857], [392.0, 750.9599999999999], [398.0, 527.9375], [399.0, 503.8163265306121], [396.0, 578.9591836734693], [397.0, 621.2653061224491], [393.0, 696.1320754716982], [394.0, 652.0816326530613], [395.0, 609.4583333333335], [401.0, 492.7254901960784], [400.0, 531.9333333333334], [402.0, 501.7045454545454], [403.0, 508.74418604651146], [404.0, 510.8297872340425], [405.0, 573.8653846153846], [406.0, 511.1914893617021], [407.0, 515.6444444444445], [408.0, 555.8163265306123], [414.0, 556.0652173913043], [415.0, 563.7560975609757], [412.0, 544.0243902439025], [413.0, 612.4374999999998], [409.0, 521.9111111111109], [410.0, 530.3333333333333], [411.0, 546.1458333333333], [417.0, 571.7380952380952], [416.0, 603.5957446808511], [418.0, 580.948717948718], [419.0, 584.0416666666666], [420.0, 570.3333333333333], [421.0, 618.3454545454545], [422.0, 559.979591836735], [423.0, 557.3829787234043], [424.0, 589.6734693877551], [430.0, 552.0980392156864], [431.0, 551.6999999999999], [428.0, 541.7666666666667], [429.0, 614.42], [425.0, 546.4999999999999], [426.0, 542.857142857143], [427.0, 534.392156862745], [433.0, 556.0], [432.0, 592.4222222222224], [434.0, 560.2558139534882], [435.0, 563.6304347826087], [436.0, 567.1304347826089], [437.0, 619.5], [438.0, 552.5500000000002], [439.0, 556.0909090909091], [440.0, 596.4339622641511], [446.0, 565.2500000000003], [447.0, 567.0784313725486], [444.0, 565.7073170731708], [445.0, 609.6], [441.0, 569.391304347826], [442.0, 566.0612244897961], [443.0, 568.6666666666666], [449.0, 554.530612244898], [448.0, 586.480769230769], [450.0, 555.2272727272726], [451.0, 564.9782608695651], [452.0, 572.5714285714286], [453.0, 616.4130434782608], [454.0, 583.547619047619], [455.0, 586.9523809523805], [456.0, 612.9423076923078], [462.0, 621.4545454545453], [463.0, 616.9999999999998], [460.0, 615.1750000000001], [461.0, 646.0888888888887], [457.0, 593.0851063829788], [458.0, 600.4634146341464], [459.0, 606.6382978723403], [465.0, 615.767441860465], [464.0, 630.2888888888889], [466.0, 613.5306122448982], [467.0, 616.2558139534884], [468.0, 620.4047619047619], [469.0, 641.8888888888889], [470.0, 622.5869565217394], [471.0, 617.4999999999999], [472.0, 623.6304347826086], [478.0, 637.9024390243903], [479.0, 635.1636363636362], [476.0, 628.4634146341464], [477.0, 643.4693877551022], [473.0, 618.9024390243902], [474.0, 624.9069767441858], [475.0, 624.4468085106381], [481.0, 635.4782608695651], [480.0, 632.8695652173911], [482.0, 634.0652173913046], [483.0, 635.1304347826087], [484.0, 635.953488372093], [485.0, 637.7272727272727], [486.0, 639.6382978723406], [487.0, 638.3799999999999], [488.0, 634.4883720930235], [495.0, 690.0], [494.0, 696.0], [492.0, 690.0], [489.0, 633.7777777777778], [490.0, 662.0], [491.0, 692.5], [500.0, 782.8104558462744], [498.0, 689.0], [497.0, 690.0], [496.0, 693.0]], "isOverall": false, "label": "POST /meetings", "isController": false}, {"data": [[364.0383694194296, 551.141190841157]], "isOverall": false, "label": "POST /meetings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23926.8, "minX": 1.69858738E12, "maxY": 259952.0, "series": [{"data": [[1.69858739E12, 116944.2], [1.69858743E12, 55169.8], [1.69858741E12, 102332.6], [1.698587385E12, 131664.0], [1.698587425E12, 115677.6], [1.698587405E12, 109554.6], [1.69858738E12, 103332.0], [1.69858742E12, 106540.2], [1.6985874E12, 112977.2], [1.698587395E12, 103368.8], [1.69858744E12, 23926.8], [1.698587435E12, 113919.2], [1.698587415E12, 113385.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69858739E12, 230384.0], [1.69858743E12, 108231.2], [1.69858741E12, 200754.4], [1.698587385E12, 259952.0], [1.698587425E12, 226934.4], [1.698587405E12, 214922.4], [1.69858738E12, 204450.4], [1.69858742E12, 209008.8], [1.6985874E12, 221636.8], [1.698587395E12, 202787.2], [1.69858744E12, 46939.2], [1.698587435E12, 223484.8], [1.698587415E12, 222437.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858744E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 54.5992768906298, "minX": 1.69858738E12, "maxY": 1081.9986876640437, "series": [{"data": [[1.69858739E12, 267.57834224598895], [1.69858743E12, 657.5276038702324], [1.69858741E12, 817.3617674133172], [1.698587385E12, 140.0744075829379], [1.698587425E12, 679.7486427795857], [1.698587405E12, 588.4832330180571], [1.69858738E12, 54.5992768906298], [1.69858742E12, 740.4485705865019], [1.6985874E12, 502.028627015009], [1.698587395E12, 424.4696233292827], [1.69858744E12, 1081.9986876640437], [1.698587435E12, 1057.04796030871], [1.698587415E12, 688.5231237884245]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858744E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 54.59294968363956, "minX": 1.69858738E12, "maxY": 1081.9986876640437, "series": [{"data": [[1.69858739E12, 267.5780748663111], [1.69858743E12, 657.5276038702324], [1.69858741E12, 817.3614605707276], [1.698587385E12, 140.0732227488152], [1.698587425E12, 679.7478284473405], [1.698587405E12, 588.4826597879044], [1.69858738E12, 54.59294968363956], [1.69858742E12, 740.4479811376362], [1.6985874E12, 502.0280711506391], [1.698587395E12, 424.46871202916236], [1.69858744E12, 1081.9986876640437], [1.698587435E12, 1057.04796030871], [1.698587415E12, 688.5231237884245]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858744E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.0847593582887725, "minX": 1.69858738E12, "maxY": 1.3837775867010615, "series": [{"data": [[1.69858739E12, 1.0847593582887725], [1.69858743E12, 1.327262379055208], [1.69858741E12, 1.202209266646211], [1.698587385E12, 1.1469194312796163], [1.698587425E12, 1.314332247557002], [1.698587405E12, 1.3837775867010615], [1.69858738E12, 1.2805061765592014], [1.69858742E12, 1.2844090775125272], [1.6985874E12, 1.3449138410227917], [1.698587395E12, 1.3314094775212637], [1.69858744E12, 1.311023622047245], [1.698587435E12, 1.121278941565603], [1.698587415E12, 1.3292716698975386]], "isOverall": false, "label": "POST /meetings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858744E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.69858738E12, "maxY": 3995.0, "series": [{"data": [[1.69858739E12, 492.0], [1.69858743E12, 2589.0], [1.69858741E12, 2072.0], [1.698587385E12, 217.0], [1.698587425E12, 818.0], [1.698587405E12, 653.0], [1.69858738E12, 284.0], [1.69858742E12, 959.0], [1.6985874E12, 743.0], [1.698587395E12, 649.0], [1.69858744E12, 1535.0], [1.698587435E12, 3995.0], [1.698587415E12, 852.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69858739E12, 154.0], [1.69858743E12, 624.0], [1.69858741E12, 510.0], [1.698587385E12, 85.0], [1.698587425E12, 606.0], [1.698587405E12, 522.0], [1.69858738E12, 10.0], [1.69858742E12, 626.0], [1.6985874E12, 410.0], [1.698587395E12, 251.0], [1.69858744E12, 664.0], [1.698587435E12, 515.0], [1.698587415E12, 604.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69858739E12, 388.9000000000001], [1.69858743E12, 661.0], [1.69858741E12, 1458.0], [1.698587385E12, 189.0], [1.698587425E12, 759.0], [1.698587405E12, 634.0], [1.69858738E12, 83.0], [1.69858742E12, 919.0], [1.6985874E12, 641.0999999999999], [1.698587395E12, 513.0], [1.69858744E12, 1498.0], [1.698587435E12, 3777.0], [1.698587415E12, 806.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69858739E12, 458.0], [1.69858743E12, 676.4200000000001], [1.69858741E12, 2057.0], [1.698587385E12, 204.0], [1.698587425E12, 809.0], [1.698587405E12, 643.0], [1.69858738E12, 98.0], [1.69858742E12, 942.0], [1.6985874E12, 736.0], [1.698587395E12, 631.0], [1.69858744E12, 1531.0], [1.698587435E12, 3933.0], [1.698587415E12, 843.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69858739E12, 247.0], [1.69858743E12, 647.0], [1.69858741E12, 642.0], [1.698587385E12, 132.0], [1.698587425E12, 666.0], [1.698587405E12, 576.0], [1.69858738E12, 56.0], [1.69858742E12, 688.0], [1.6985874E12, 473.0], [1.698587395E12, 427.0], [1.69858744E12, 1141.5], [1.698587435E12, 637.0], [1.698587415E12, 668.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69858739E12, 432.0], [1.69858743E12, 663.0], [1.69858741E12, 2025.0], [1.698587385E12, 195.0], [1.698587425E12, 772.0], [1.698587405E12, 637.0], [1.69858738E12, 89.0], [1.69858742E12, 929.0], [1.6985874E12, 682.0], [1.698587395E12, 573.3499999999999], [1.69858744E12, 1515.7], [1.698587435E12, 3827.0], [1.698587415E12, 835.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858744E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 17.0, "minX": 2.0, "maxY": 3787.0, "series": [{"data": [[541.0, 1252.0], [539.0, 872.0], [2.0, 2589.0], [566.0, 395.0], [595.0, 651.0], [596.0, 645.0], [628.0, 816.0], [643.0, 197.0], [655.0, 433.0], [670.0, 699.0], [672.0, 29.0], [680.0, 320.0], [693.0, 754.0], [715.0, 428.0], [718.0, 474.0], [714.0, 731.5], [742.0, 641.0], [758.0, 410.0], [757.0, 659.0], [746.0, 435.0], [756.0, 515.0], [740.0, 558.0], [747.0, 602.0], [764.0, 647.0], [743.0, 804.0], [737.0, 673.0], [753.0, 645.0], [768.0, 670.0], [788.0, 46.0], [783.0, 440.0], [775.0, 606.5], [776.0, 644.0], [779.0, 635.0], [773.0, 682.0], [796.0, 629.0], [787.0, 759.0], [770.0, 645.0], [803.0, 190.0], [821.0, 217.0], [829.0, 300.0], [802.0, 670.0], [846.0, 62.0], [855.0, 80.0], [847.0, 101.0], [860.0, 118.0], [854.0, 131.0], [856.0, 157.0], [881.0, 204.0], [918.0, 530.5], [917.0, 540.0], [8.0, 1887.5], [158.0, 17.0], [202.0, 641.0], [260.0, 1434.0], [357.0, 1436.0], [375.0, 3787.0], [405.0, 690.0], [484.0, 548.0], [485.0, 634.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 918.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 17.0, "minX": 2.0, "maxY": 3787.0, "series": [{"data": [[541.0, 1252.0], [539.0, 872.0], [2.0, 2589.0], [566.0, 395.0], [595.0, 651.0], [596.0, 645.0], [628.0, 816.0], [643.0, 197.0], [655.0, 433.0], [670.0, 699.0], [672.0, 29.0], [680.0, 320.0], [693.0, 754.0], [715.0, 428.0], [718.0, 474.0], [714.0, 731.5], [742.0, 641.0], [758.0, 410.0], [757.0, 659.0], [746.0, 435.0], [756.0, 515.0], [740.0, 558.0], [747.0, 602.0], [764.0, 647.0], [743.0, 804.0], [737.0, 673.0], [753.0, 645.0], [768.0, 670.0], [788.0, 46.0], [783.0, 440.0], [775.0, 606.5], [776.0, 644.0], [779.0, 635.0], [773.0, 682.0], [796.0, 629.0], [787.0, 759.0], [770.0, 645.0], [803.0, 190.0], [821.0, 217.0], [829.0, 300.0], [802.0, 670.0], [846.0, 62.0], [855.0, 80.0], [847.0, 101.0], [860.0, 118.0], [854.0, 131.0], [856.0, 157.0], [881.0, 204.0], [918.0, 530.5], [917.0, 540.0], [8.0, 1887.5], [158.0, 17.0], [202.0, 641.0], [260.0, 1434.0], [357.0, 1436.0], [375.0, 3787.0], [405.0, 690.0], [484.0, 548.0], [485.0, 634.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 918.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 52.4, "minX": 1.69858738E12, "maxY": 860.6, "series": [{"data": [[1.69858739E12, 764.6], [1.69858743E12, 351.4], [1.69858741E12, 652.6], [1.698587385E12, 860.6], [1.698587425E12, 737.0], [1.698587405E12, 714.6], [1.69858738E12, 679.6], [1.69858742E12, 678.4], [1.6985874E12, 736.2], [1.698587395E12, 675.2], [1.69858744E12, 52.4], [1.698587435E12, 725.6], [1.698587415E12, 722.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858744E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 152.4, "minX": 1.69858738E12, "maxY": 844.0, "series": [{"data": [[1.69858739E12, 748.0], [1.69858743E12, 351.4], [1.69858741E12, 651.8], [1.698587385E12, 844.0], [1.698587425E12, 736.8], [1.698587405E12, 697.8], [1.69858738E12, 663.8], [1.69858742E12, 678.6], [1.6985874E12, 719.6], [1.698587395E12, 658.4], [1.69858744E12, 152.4], [1.698587435E12, 725.6], [1.698587415E12, 722.2]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.69858744E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 152.4, "minX": 1.69858738E12, "maxY": 844.0, "series": [{"data": [[1.69858739E12, 748.0], [1.69858743E12, 351.4], [1.69858741E12, 651.8], [1.698587385E12, 844.0], [1.698587425E12, 736.8], [1.698587405E12, 697.8], [1.69858738E12, 663.8], [1.69858742E12, 678.6], [1.6985874E12, 719.6], [1.698587395E12, 658.4], [1.69858744E12, 152.4], [1.698587435E12, 725.6], [1.698587415E12, 722.2]], "isOverall": false, "label": "POST /meetings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858744E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 152.4, "minX": 1.69858738E12, "maxY": 844.0, "series": [{"data": [[1.69858739E12, 748.0], [1.69858743E12, 351.4], [1.69858741E12, 651.8], [1.698587385E12, 844.0], [1.698587425E12, 736.8], [1.698587405E12, 697.8], [1.69858738E12, 663.8], [1.69858742E12, 678.6], [1.6985874E12, 719.6], [1.698587395E12, 658.4], [1.69858744E12, 152.4], [1.698587435E12, 725.6], [1.698587415E12, 722.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.69858744E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

